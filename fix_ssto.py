#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è index.html –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –¢–ï–°–¢ –°–°–¢–û
–í–µ—Ä—Å–∏—è: 3.0 - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
"""

import re
import os
import shutil
from datetime import datetime

def backup_file(filepath):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = f"{filepath}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(filepath, backup_path)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def analyze_file_structure(content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞:")
    
    # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    patterns = {
        'loadRequests': r'loadRequests',
        'loadSignals': r'loadSignals',
        'loadTerminals': r'loadTerminals',
        'ExcelDataLoader': r'ExcelDataLoader',
        'VesselDB': r'VesselDB',
        'requests-tbody': r'requests-tbody',
        'signals-tbody': r'signals-tbody',
        'terminals-tbody': r'terminals-tbody'
    }
    
    for name, pattern in patterns.items():
        matches = re.findall(pattern, content)
        if matches:
            print(f"  ‚úì {name}: –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Ä–∞–∑")
        else:
            print(f"  ‚úó {name}: –ù–ï –ù–ê–ô–î–ï–ù–û")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è IMO –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    if 'request.imo' in content:
        print("  ‚úì IMO —É–∂–µ –µ—Å—Ç—å –≤ loadRequests")
    else:
        print("  ‚úó IMO –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ loadRequests")
    
    return True

def add_imo_to_tables(content):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É IMO –≤–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
    changes_made = False
    
    # 1. –î–æ–±–∞–≤–∏—Ç—å IMO –≤ HTML –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
    if '<th>MMSI</th>' in content and '<th>IMO</th>' not in content:
        content = content.replace(
            '<th>MMSI</th>\n                        <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>',
            '<th>MMSI</th>\n                        <th>IMO</th>\n                        <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>'
        )
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        content = content.replace(
            '<th>MMSI</th>\n                    <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>',
            '<th>MMSI</th>\n                    <th>IMO</th>\n                    <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>'
        )
        print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ IMO –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫")
        changes_made = True
    
    # 2. –î–æ–±–∞–≤–∏—Ç—å IMO –≤ —Ñ—É–Ω–∫—Ü–∏—é loadRequests
    if 'function loadRequests' in content and 'request.imo' not in content:
        # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ request.mmsi
        pattern = r'(\$\{request\.mmsi\})</td>'
        replacement = r'\1</td>\n                    <td>${request.imo || \'-\'}</td>'
        content = re.sub(pattern, replacement, content)
        print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ IMO –≤ loadRequests")
        changes_made = True
    
    # 3. –î–æ–±–∞–≤–∏—Ç—å IMO –≤ HTML –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    signals_header_pattern = r'(<th>MMSI</th>\s*<th>–¢–∏–ø</th>)'
    if re.search(signals_header_pattern, content):
        content = re.sub(
            signals_header_pattern,
            r'<th>MMSI</th>\n                    <th>IMO</th>\n                    <th>–¢–∏–ø</th>',
            content
        )
        print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ IMO –≤ —Ç–∞–±–ª–∏—Ü—É —Å–∏–≥–Ω–∞–ª–æ–≤")
        changes_made = True
    
    # 4. –î–æ–±–∞–≤–∏—Ç—å IMO –≤ —Ñ—É–Ω–∫—Ü–∏—é loadSignals
    if 'function loadSignals' in content and not re.search(r'vessel\.imo|signal\.imo', content):
        # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ signal.mmsi
        pattern = r'(\$\{signal\.mmsi \|\| \'-\'\})</td>'
        replacement = r'\1</td>\n                    <td>${vessel ? vessel.imo || \'-\' : \'-\'}</td>'
        content = re.sub(pattern, replacement, content)
        print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ IMO –≤ loadSignals")
        changes_made = True
    
    return content, changes_made

def add_excel_loader_improvements(content):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –≤ ExcelDataLoader –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    changes_made = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∞
    if 'class ExcelDataLoader' not in content:
        print("  ‚ö† –ö–ª–∞—Å—Å ExcelDataLoader –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return content, False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ parseVesselName –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'parseVesselName' not in content:
        # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ constructor –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –º–µ—Ç–æ–¥–∞
        insert_position = content.find('setupHandlers() {')
        if insert_position > 0:
            # –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ setupHandlers
            brace_count = 0
            i = insert_position
            while i < len(content):
                if content[i] == '{':
                    brace_count += 1
                elif content[i] == '}':
                    brace_count -= 1
                    if brace_count == 0:
                        # –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ setupHandlers
                        new_method = '''

            parseVesselName(value) {
                if (!value) return { name: '', mmsi: '', imo: '' };
                
                const str = String(value).trim();
                let name = str;
                let mmsi = '';
                let imo = '';
                
                // –ü–æ–∏—Å–∫ MMSI (9 —Ü–∏—Ñ—Ä)
                const mmsiMatch = str.match(/\\b(\\d{9})\\b/);
                if (mmsiMatch) {
                    mmsi = mmsiMatch[1];
                    name = str.replace(mmsiMatch[0], '').trim();
                }
                
                // –ü–æ–∏—Å–∫ IMO (7 —Ü–∏—Ñ—Ä)
                const imoMatch = str.match(/\\b(\\d{7})\\b/);
                if (imoMatch) {
                    imo = imoMatch[1];
                    name = str.replace(imoMatch[0], '').trim();
                }
                
                name = name.replace(/[,;:\\-]+$/, '').trim();
                
                return { name, mmsi, imo };
            }'''
                        content = content[:i+1] + new_method + content[i+1:]
                        print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ parseVesselName –≤ ExcelDataLoader")
                        changes_made = True
                        break
                i += 1
    
    return content, changes_made

def main():
    filepath = 'index.html'
    
    if not os.path.exists(filepath):
        print(f"‚ùå –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filepath}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(filepath):,} –±–∞–π—Ç")
    
    backup_path = backup_file(filepath)
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        analyze_file_structure(content)
        
        print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        
        total_changes = False
        
        # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ IMO –≤ —Ç–∞–±–ª–∏—Ü—ã
        print("\n1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ IMO:")
        content, changes1 = add_imo_to_tables(content)
        total_changes = total_changes or changes1
        
        # 2. –£–ª—É—á—à–µ–Ω–∏–µ ExcelDataLoader
        print("\n2. –£–ª—É—á—à–µ–Ω–∏–µ ExcelDataLoader:")
        content, changes2 = add_excel_loader_improvements(content)
        total_changes = total_changes or changes2
        
        if total_changes:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"\n‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            print(f"üìè –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, —Ñ–∞–π–ª —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
        
        print(f"\nüíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        print(f"üîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"    Windows: copy {backup_path} {filepath}")
        print(f"    Linux/Mac: cp {backup_path} {filepath}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        shutil.copy2(backup_path, filepath)
        print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()