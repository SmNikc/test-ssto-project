#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –°–°–¢–û –∏–∑ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏
–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: C:\Projects\test-ssto-project\restore_and_fix_all.py
"""
import re
import os
import shutil
from datetime import datetime

def restore_and_fix():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    project_dir = r'C:\Projects\test-ssto-project'
    target_file = os.path.join(project_dir, 'index_14_36.html')
    working_backup = os.path.join(project_dir, 'index_14_36.html.backup_20250910_013247')
    
    print("=" * 70)
    print("üîÑ –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–°–¢–û")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if not os.path.exists(working_backup):
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {working_backup}")
        print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:")
        for f in os.listdir(project_dir):
            if 'index' in f:
                print(f"  ‚Ä¢ {f}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    if os.path.exists(target_file):
        final_backup = f"{target_file}.final_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy(target_file, final_backup)
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(final_backup)}")
    
    # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ò–ó –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò
    print(f"\nüì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏...")
    shutil.copy(working_backup, target_file)
    print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑: {os.path.basename(working_backup)}")
    
    # –ß–∏—Ç–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    print("\nüìñ –ß—Ç–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    with open(target_file, 'r', encoding='utf-8', errors='ignore') as f:
        content = f.read()
    
    print("   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {:.1f} KB".format(len(content) / 1024))
    
    # ===================== –ü–†–ò–ú–ï–ù–Ø–ï–ú –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø =====================
    
    print("\n" + "=" * 70)
    print("üìã –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 70)
    
    # 1. –î–û–ë–ê–í–õ–Ø–ï–ú DataStore –∫–ª–∞—Å—Å
    print("\n1Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ DataStore...")
    
    datastore_code = """
        // ===================== DataStore: –µ–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (LocalStorage) ===================== 
        class DataStore {
            constructor() {
                this.keys = {
                    requests: 'testRequests',
                    signals:  'signals',
                    terminals:'vessels'
                };
                this.ensureArrays();
            }
            
            ensureArrays() {
                for (const k of Object.values(this.keys)) {
                    if (!Array.isArray(this._get(k))) this._set(k, []);
                }
            }
            
            _get(key) { 
                return JSON.parse(localStorage.getItem(key) || '[]'); 
            }
            
            _set(key, v) { 
                localStorage.setItem(key, JSON.stringify(v)); 
            }
            
            get(key) { 
                return this._get(this.keys[key]); 
            }
            
            set(key, v) { 
                this._set(this.keys[key], v); 
            }
            
            upsert(key, arr) {
                const store = this.get(key);
                const upserted = [];
                for (const item of arr) {
                    const id = item.id || item.terminal_number || item.signal_number;
                    const idx = store.findIndex(i => 
                        i.id === id || 
                        i.terminal_number === id || 
                        i.signal_number === id
                    );
                    if (idx > -1) store[idx] = { ...store[idx], ...item };
                    else store.push(item);
                    upserted.push(store[idx] || item);
                }
                this.set(key, store);
                return upserted;
            }
            
            remove(key, id) {
                const store = this.get(key);
                const idx = store.findIndex(i => 
                    i.id === id || 
                    i.terminal_number === id || 
                    i.signal_number === id
                );
                if (idx > -1) store.splice(idx, 1);
                this.set(key, store);
            }
        }
        
        const store = new DataStore();
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞ script
    script_start = content.find('<script>') + len('<script>')
    content = content[:script_start] + datastore_code + content[script_start:]
    print("   ‚úÖ DataStore –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 2. –î–û–ë–ê–í–õ–Ø–ï–ú ExcelLoader –∫–ª–∞—Å—Å
    print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ExcelLoader...")
    
    excel_loader_code = """
        // ===================== ExcelLoader: –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç Excel ===================== 
        class ExcelLoader {
            constructor(store) {
                this.store = store;
                this.mode = 'merge';  // 'merge' / 'replace'
            }
            
            handleFile(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = (evt) => {
                    const data = evt.target.result;
                    const wb = XLSX.read(data, { type: 'binary' });
                    this.processExcelData(wb);
                };
                reader.readAsBinaryString(file);
            }
            
            processExcelData(wb) {
                const sheets = wb.SheetNames;
                let preview = { new: 0, updated: 0, skipped: 0 };
                const requests = [], signals = [], terminals = [];
                
                for (const sheetName of sheets) {
                    const ws = wb.Sheets[sheetName];
                    const rows = XLSX.utils.sheet_to_json(ws, { header: 1 });
                    
                    for (let i = 1; i < rows.length; i++) {
                        const row = rows[i];
                        if (row.length < 2) continue;
                        
                        const headers = rows[0];
                        const obj = {};
                        for (let j = 0; j < headers.length; j++) {
                            obj[headers[j]] = row[j];
                        }
                        
                        // Detect sheet type by headers
                        if (this.hasHeader(headers, ['–ó–∞—è–≤–∫–∞', 'Request', '–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏', 'Terminal'])) {
                            requests.push(obj);
                        } else if (this.hasHeader(headers, ['–°–∏–≥–Ω–∞–ª', 'Signal', '–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è'])) {
                            signals.push(obj);
                        } else if (this.hasHeader(headers, ['–¢–µ—Ä–º–∏–Ω–∞–ª', 'Vessel', 'MMSI', '–°—É–¥–Ω–æ'])) {
                            terminals.push(this.parseTerminal(obj));
                        }
                    }
                }
                
                // Process with mode
                if (this.mode === 'replace') {
                    this.store.set('requests', requests);
                    this.store.set('signals', signals);
                    this.store.set('terminals', terminals);
                    preview = { 
                        new: requests.length + signals.length + terminals.length, 
                        updated: 0, 
                        skipped: 0 
                    };
                } else {
                    const upReq = this.store.upsert('requests', requests);
                    const upSig = this.store.upsert('signals', signals);
                    const upTer = this.store.upsert('terminals', terminals);
                    preview.new = upReq.filter(i => !i.id).length + 
                                 upSig.filter(i => !i.id).length + 
                                 upTer.filter(i => !i.id).length;
                    preview.updated = upReq.length + upSig.length + upTer.length - preview.new;
                }
                
                alert(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\\n–ù–æ–≤—ã—Ö: ${preview.new}\\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${preview.updated}\\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${preview.skipped}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                if (typeof loadDashboard === 'function') loadDashboard();
                if (typeof loadRequests === 'function') loadRequests();
                if (typeof loadSignals === 'function') loadSignals();
                if (typeof loadTerminals === 'function') loadTerminals();
            }
            
            parseTerminal(obj) {
                const terminal = {
                    id: obj.id || 'T-' + Date.now() + '-' + Math.random(),
                    terminal_number: obj['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏'] || obj['Terminal Number'] || '',
                    vessel_name: obj['–°—É–¥–Ω–æ'] || obj['Vessel'] || '',
                    mmsi: obj['MMSI'] || '',
                    terminal_type: obj['–¢–∏–ø —Å–≤—è–∑–∏'] || obj['Type'] || 'INMARSAT',
                    owner: obj['–í–ª–∞–¥–µ–ª–µ—Ü'] || obj['Owner'] || '',
                    lastTest: obj['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç'] || obj['Last Test'] || '',
                    status: 'active'
                };
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                for (let key in obj) {
                    if ((key.toLowerCase().includes('–ø–æ—Å–ª–µ–¥') && key.toLowerCase().includes('—Ç–µ—Å—Ç')) ||
                        (key.toLowerCase().includes('last') && key.toLowerCase().includes('test'))) {
                        const dateValue = obj[key];
                        if (dateValue) {
                            const date = new Date(dateValue);
                            if (!isNaN(date)) {
                                terminal.lastTest = date.toISOString().split('T')[0];
                                terminal.status = 'tested';
                            } else {
                                terminal.lastTest = String(dateValue);
                            }
                        }
                    }
                }
                
                return terminal;
            }
            
            hasHeader(headers, keywords) {
                return keywords.some(kw => 
                    headers.some(h => h && h.toLowerCase().includes(kw.toLowerCase()))
                );
            }
        }
        
        const excelLoader = new ExcelLoader(store);
"""
    
    content = content[:script_start] + content[:script_start].split('const store')[0] + datastore_code + excel_loader_code + content[script_start:]
    content = re.sub(r'const store = new DataStore\(\);\s*const store = new DataStore\(\);', 'const store = new DataStore();', content)
    print("   ‚úÖ ExcelLoader –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 3. –ò–°–ü–†–ê–í–õ–Ø–ï–ú uploadExcel —Ñ—É–Ω–∫—Ü–∏—é
    print("\n3Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ uploadExcel...")
    
    content = re.sub(
        r'function uploadExcel\(\)\s*{[^}]+}',
        """function uploadExcel() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.xlsx,.xls';
            input.onchange = (e) => excelLoader.handleFile(e);
            input.click();
        }""",
        content,
        flags=re.DOTALL
    )
    print("   ‚úÖ uploadExcel –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    
    # 4. –ò–°–ü–†–ê–í–õ–Ø–ï–ú loadTerminals —Ñ—É–Ω–∫—Ü–∏—é
    print("\n4Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ loadTerminals...")
    
    improved_load_terminals = """function loadTerminals() {
            console.log('üö¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤...');
            
            const terminals = store.get('terminals');
            const tbody = document.getElementById('terminals-tbody');
            
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (terminals.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" style="text-align:center;">–ù–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤</td></tr>';
            } else {
                terminals.forEach(terminal => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    let status = '–ê–∫—Ç–∏–≤–µ–Ω';
                    let statusClass = 'status-active';
                    
                    if (terminal.status === 'inactive') {
                        status = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                        statusClass = 'status-inactive';
                    } else if (terminal.status === 'tested') {
                        status = '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω';
                        statusClass = 'status-tested';
                    } else if (terminal.status === 'pending') {
                        status = '–û–∂–∏–¥–∞–µ—Ç —Ç–µ—Å—Ç–∞';
                        statusClass = 'status-pending';
                    }
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç
                    let nextTestDate = '';
                    if (terminal.lastTest) {
                        const lastDate = new Date(terminal.lastTest);
                        if (!isNaN(lastDate)) {
                            const nextDate = new Date(lastDate);
                            nextDate.setFullYear(nextDate.getFullYear() + 1);
                            nextTestDate = nextDate.toISOString().split('T')[0];
                        }
                    }
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${terminal.terminal_number || ''}</td>
                        <td>${terminal.vessel_name || ''}</td>
                        <td>${terminal.mmsi || ''}</td>
                        <td>${terminal.terminal_type || 'INMARSAT'}</td>
                        <td>${terminal.owner || ''}</td>
                        <td>${terminal.lastTest || ''}</td>
                        <td>${nextTestDate}</td>
                        <td><span class="status-badge ${statusClass}">${status}</span></td>
                        <td>
                            <button class="btn btn-primary btn-sm" onclick="viewTerminal('${terminal.id || terminal.terminal_number}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                            <button class="btn btn-success btn-sm" onclick="testTerminal('${terminal.terminal_number}')">–¢–µ—Å—Ç</button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }
        }"""
    
    content = re.sub(
        r'function loadTerminals\(\)\s*{[^}]+}',
        improved_load_terminals,
        content,
        flags=re.DOTALL
    )
    print("   ‚úÖ loadTerminals –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    
    # 5. –î–û–ë–ê–í–õ–Ø–ï–ú testTerminal —Ñ—É–Ω–∫—Ü–∏—é
    print("\n5Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ testTerminal...")
    
    test_terminal_func = """
        function testTerminal(terminalNumber) {
            const signal = {
                id: 'SIG' + Date.now(),
                terminal: terminalNumber,
                type: 'TEST',
                received: new Date().toISOString(),
                isTest: true
            };
            store.upsert('signals', [signal]);
            
            const terminals = store.get('terminals');
            const terminal = terminals.find(t => t.terminal_number === terminalNumber);
            if (terminal) {
                terminal.lastTest = new Date().toISOString().split('T')[0];
                terminal.status = 'tested';
                store.set('terminals', terminals);
            }
            
            loadTerminals();
            loadSignals();
            loadDashboard();
            
            alert(`–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ${terminalNumber}`);
        }
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ initMap
    if 'function testTerminal' not in content:
        content = re.sub(
            r'(let olMap;)',
            test_terminal_func + '\n\n\\1',
            content
        )
        print("   ‚úÖ testTerminal –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 6. –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ò–õ–ò –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    print("\n6Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤...")
    
    status_styles = """
        .status-badge { 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 0.8em; 
            display: inline-block;
        }
        .status-active { 
            background: #d4edda; 
            color: #155724; 
        }
        .status-inactive { 
            background: #f8d7da; 
            color: #721c24; 
        }
        .status-tested { 
            background: #c7f3c7; 
            color: #0d5f0d; 
        }
        .status-pending { 
            background: #fff3cd; 
            color: #856404; 
        }"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </style>
    style_end = content.find('</style>')
    if style_end > 0 and '.status-tested' not in content:
        content = content[:style_end] + status_styles + content[style_end:]
        print("   ‚úÖ –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # 7. –£–ë–ï–ñ–î–ê–ï–ú–°–Ø –ß–¢–û –ù–ê–í–ò–ì–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢
    print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤
    if 'document.querySelectorAll(\'.tab\').forEach(tab =>' not in content:
        nav_handler = """
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('data-tab');
                    
                    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.content').forEach(c => c.classList.remove('active'));
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                    this.classList.add('active');
                    const targetContent = document.getElementById(targetId);
                    if (targetContent) {
                        targetContent.classList.add('active');
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if (targetId === 'map' && window.olMap) {
                        setTimeout(() => {
                            window.olMap.updateSize();
                        }, 100);
                    }
                });
            });
        });
"""
        script_end = content.rfind('</script>')
        if script_end > 0:
            content = content[:script_end] + nav_handler + '\n' + content[script_end:]
            print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # 8. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ì–û–õ–û–í–ö–ò –¢–ê–ë–õ–ò–¶–´ –¢–ï–†–ú–ò–ù–ê–õ–û–í
    print("\n8Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤...")
    
    terminals_headers = """<tr>
                    <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                    <th>–°—É–¥–Ω–æ</th>
                    <th>MMSI</th>
                    <th>–¢–∏–ø —Å–≤—è–∑–∏</th>
                    <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
                    <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç</th>
                    <th>–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>"""
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
    content = re.sub(
        r'<thead>\s*<tr>\s*<th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏[^<]*</th>[^</tr>]*</tr>\s*</thead>',
        f'<thead>{terminals_headers}</thead>',
        content,
        flags=re.DOTALL
    )
    print("   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    # 9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –û–ß–ò–°–¢–ö–ê
    print("\n9Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞...")
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    content = re.sub(r'(const store = new DataStore\(\);)\s*\1', '\\1', content)
    content = re.sub(r'(const excelLoader = new ExcelLoader\(store\);)\s*\1', '\\1', content)
    
    print("   ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    with open(target_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {target_file}")
    print(f"   üìè –†–∞–∑–º–µ—Ä: {len(content) / 1024:.1f} KB")
    
    print("\n" + "=" * 70)
    print("‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 70)
    
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å DataStore")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å ExcelLoader")
    print("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è loadTerminals")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è testTerminal")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤")
    print("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è")
    print("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü")
    
    print("\nüéØ –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å:")
    print("  ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫")
    print("  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤")
    print("  ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏")
    print("  ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞")
    
    print("\n‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏—è:")
    print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ index_14_36.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("  2. –ù–∞–∂–º–∏—Ç–µ Ctrl+F5 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏")
    print("  4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø...")
    print("-" * 70)
    
    success = restore_and_fix()
    
    if success:
        print("\n‚ú® –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print("üåü –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")