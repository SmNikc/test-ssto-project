#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –°–ö–†–ò–ü–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –°–°–¢–û
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏—è Grok –∏ GPT –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–ü—É—Ç—å: C:\Projects\test-ssto-project\final_restore_ssto.py
"""

import re
import os
import shutil
from datetime import datetime
from pathlib import Path

def final_restore():
    """–ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    project_dir = Path(r'C:\Projects\test-ssto-project')
    target_file = project_dir / 'index_14_36.html'
    
    # –ò—â–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é —Ä–∞–±–æ—á—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_patterns = [
        'index_14_36.html.backup_20250910_013247',  # –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—á–∞—è
        'index_clean.html',  # —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç Grok
        'index_14_36.html.final_backup_*'
    ]
    
    backup_file = None
    for pattern in backup_patterns:
        files = list(project_dir.glob(pattern))
        if files:
            backup_file = files[0]
            break
    
    if not backup_file:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª.")
        backup_file = target_file
    
    print("=" * 70)
    print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–°–¢–û")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    new_backup = target_file.with_name(f'{target_file.name}.final_{timestamp}')
    if target_file.exists():
        shutil.copy(str(target_file), str(new_backup))
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {new_backup.name}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    print(f"\nüì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: {backup_file.name}")
    content = backup_file.read_text(encoding='utf-8', errors='ignore')
    
    # ==================== –ü–†–ò–ú–ï–ù–Ø–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ====================
    
    print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    # 1. –£–î–ê–õ–Ø–ï–ú onclick –∏–∑ —Ç–µ–≥–∞ <style> (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
    content = re.sub(r'<style[^>]*onclick="[^"]*"[^>]*>', '<style>', content)
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω onclick –∏–∑ <style>")
    
    # 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é switchTab (—Ä–µ—à–µ–Ω–∏–µ Grok + GPT)
    new_switch_tab = """
    // ===================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö =====================
    function switchTab(tabName, element) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        document.querySelectorAll('.content').forEach(section => {
            section.classList.remove('active');
        });
        
        const targetSection = document.getElementById(tabName);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.tab').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ data-tab –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        const activeBtn = element || document.querySelector(`.tab[data-tab="${tabName}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
        
        // –°–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.scrollTo({ top: 0, behavior: 'instant' });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (tabName === 'map' && window.olMap) {
            setTimeout(() => {
                window.olMap.updateSize();
            }, 100);
        }
        
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞:', tabName);
    }
    
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    document.addEventListener('click', function(e) {
        const tab = e.target.closest('.tab[data-tab]');
        if (tab) {
            e.preventDefault();
            const targetId = tab.getAttribute('data-tab');
            switchTab(targetId, tab);
        }
    });
"""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é switchTab
    content = re.sub(
        r'function switchTab[^}]+\}[^}]*\}',
        '',
        content,
        flags=re.DOTALL
    )
    
    # 3. –î–û–ë–ê–í–õ–Ø–ï–ú DataStore –∏ ExcelLoader
    data_store_code = """
    // ===================== DataStore: –µ–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ =====================
    class DataStore {
        constructor() {
            this.keys = {
                requests: 'testRequests',
                signals: 'signals',
                terminals: 'vessels'
            };
            this.ensureArrays();
        }
        
        ensureArrays() {
            for (const k of Object.values(this.keys)) {
                if (!Array.isArray(this._get(k))) this._set(k, []);
            }
        }
        
        _get(key) { 
            try {
                return JSON.parse(localStorage.getItem(key) || '[]');
            } catch(e) {
                return [];
            }
        }
        
        _set(key, v) { 
            localStorage.setItem(key, JSON.stringify(v || [])); 
        }
        
        get(key) { 
            return this._get(this.keys[key]); 
        }
        
        set(key, v) { 
            this._set(this.keys[key], v); 
        }
        
        upsert(key, arr) {
            const store = this.get(key);
            const upserted = [];
            for (const item of arr) {
                const id = item.id || item.terminal_number || item.signal_number;
                const idx = store.findIndex(i => 
                    i.id === id || 
                    i.terminal_number === id || 
                    i.signal_number === id
                );
                if (idx > -1) {
                    store[idx] = { ...store[idx], ...item };
                } else {
                    store.push(item);
                }
                upserted.push(store[idx] || item);
            }
            this.set(key, store);
            return upserted;
        }
    }
    
    const store = new DataStore();
"""
    
    # 4. –£–õ–£–ß–®–ï–ù–ù–´–ô ExcelLoader —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å–∫–ª–µ–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (—Ä–µ—à–µ–Ω–∏–µ GPT)
    excel_loader_code = """
    // ===================== ExcelLoader —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º =====================
    class ExcelLoader {
        constructor(store) {
            this.store = store;
            this.mode = 'merge'; // 'merge' –∏–ª–∏ 'replace'
        }
        
        handleFile(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (evt) => {
                try {
                    const data = evt.target.result;
                    const wb = XLSX.read(data, { type: 'binary' });
                    this.processExcelData(wb);
                } catch(err) {
                    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel:', err);
                    showNotification('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ Excel', 'error');
                }
            };
            reader.readAsBinaryString(file);
        }
        
        processExcelData(wb) {
            const sheets = wb.SheetNames;
            let preview = { new: 0, updated: 0, skipped: 0 };
            const requests = [], signals = [], terminals = [];
            
            for (const sheetName of sheets) {
                const ws = wb.Sheets[sheetName];
                const rows = XLSX.utils.sheet_to_json(ws, { header: 1 });
                
                for (let i = 1; i < rows.length; i++) {
                    const row = rows[i];
                    if (row.length < 2) continue;
                    
                    const headers = rows[0];
                    const obj = {};
                    for (let j = 0; j < headers.length; j++) {
                        obj[headers[j]] = row[j];
                    }
                    
                    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–∞–∑–±–æ—Ä–æ–º —Å–∫–ª–µ–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                    const parsed = this.parseRow(obj);
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                    if (this.hasHeader(headers, ['–ó–∞—è–≤–∫–∞', 'Request', '–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏', 'Terminal'])) {
                        if (parsed.terminal_number) requests.push(parsed);
                    } else if (this.hasHeader(headers, ['–°–∏–≥–Ω–∞–ª', 'Signal', '–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è'])) {
                        if (parsed.terminal_number) signals.push(parsed);
                    } else if (this.hasHeader(headers, ['–¢–µ—Ä–º–∏–Ω–∞–ª', 'Vessel', '–°—É–¥–Ω–æ', 'MMSI'])) {
                        if (parsed.terminal_number || parsed.mmsi) terminals.push(parsed);
                    }
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏
            if (this.mode === 'replace') {
                this.store.set('requests', requests);
                this.store.set('signals', signals);
                this.store.set('terminals', terminals);
                preview = { 
                    new: requests.length + signals.length + terminals.length, 
                    updated: 0, 
                    skipped: 0 
                };
            } else {
                const upReq = this.store.upsert('requests', requests);
                const upSig = this.store.upsert('signals', signals);
                const upTer = this.store.upsert('terminals', terminals);
                preview.new = upReq.filter(i => !i.id).length + 
                             upSig.filter(i => !i.id).length + 
                             upTer.filter(i => !i.id).length;
                preview.updated = upReq.length + upSig.length + upTer.length - preview.new;
            }
            
            showNotification(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –ù–æ–≤—ã—Ö: ${preview.new}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${preview.updated}`, 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            if (typeof loadDashboard === 'function') loadDashboard();
            if (typeof loadRequests === 'function') loadRequests();
            if (typeof loadSignals === 'function') loadSignals();
            if (typeof loadTerminals === 'function') loadTerminals();
        }
        
        parseRow(raw) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (9 —Ü–∏—Ñ—Ä)
            const extractTerminalNumber = (str) => {
                const match = String(str || '').match(/\\b\\d{9}\\b/);
                return match ? match[0] : '';
            };
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º MMSI (9 —Ü–∏—Ñ—Ä)
            const extractMMSI = (str) => {
                const match = String(str || '').match(/\\b\\d{9}\\b/);
                return match ? match[0] : '';
            };
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º IMO (7 —Ü–∏—Ñ—Ä)
            const extractIMO = (str) => {
                const match = String(str || '').match(/\\b\\d{7}\\b/);
                return match ? match[0] : '';
            };
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º email
            const extractEmail = (str) => {
                const match = String(str || '').match(/[^\\s]+@[^\\s]+/);
                return match ? match[0] : '';
            };
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            const extractPhone = (str) => {
                const match = String(str || '').match(/\\+?\\d[\\d\\-\\s()]{7,}/);
                return match ? match[0] : '';
            };
            
            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            const parseDate = (str) => {
                const s = String(str || '').trim();
                if (!s) return '';
                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ dd.mm.yyyy, dd/mm/yyyy, yyyy-mm-dd
                const dmy = s.match(/^(\\d{1,2})[./-](\\d{1,2})[./-](\\d{4})$/);
                if (dmy) return `${dmy[3]}-${dmy[2].padStart(2,'0')}-${dmy[1].padStart(2,'0')}`;
                const iso = s.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);
                if (iso) return s;
                return '';
            };
            
            const result = {
                id: 'T' + Date.now() + Math.random().toString(36).slice(2, 6),
                terminal_number: extractTerminalNumber(
                    raw['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏'] || raw['–ù–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞'] || 
                    raw['Terminal'] || raw['Station Number'] || ''
                ),
                terminal_type: String(raw['–¢–∏–ø'] || raw['–¢–∏–ø —Å–≤—è–∑–∏'] || 'INMARSAT').toUpperCase().includes('IRIDIUM') 
                    ? 'IRIDIUM' : 'INMARSAT',
                vessel_name: raw['–°—É–¥–Ω–æ'] || raw['–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞'] || raw['Vessel'] || '',
                mmsi: extractMMSI(raw['MMSI'] || ''),
                imo: extractIMO(raw['IMO'] || ''),
                owner: raw['–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü'] || raw['–í–ª–∞–¥–µ–ª–µ—Ü'] || raw['Owner'] || '',
                email: extractEmail(raw['Email'] || raw['–ö–æ–Ω—Ç–∞–∫—Ç—ã'] || ''),
                phone: extractPhone(raw['–¢–µ–ª–µ—Ñ–æ–Ω'] || raw['Phone'] || raw['–ö–æ–Ω—Ç–∞–∫—Ç—ã'] || ''),
                lastTest: parseDate(raw['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç'] || raw['Last Test'] || ''),
                testDate: parseDate(raw['–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞'] || raw['Test Date'] || ''),
                status: 'pending'
            };
            
            // –ï—Å–ª–∏ MMSI –∏ —Å—É–¥–Ω–æ —Å–∫–ª–µ–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
            if (!result.mmsi && result.vessel_name) {
                const mmsi = extractMMSI(result.vessel_name);
                if (mmsi) {
                    result.mmsi = mmsi;
                    result.vessel_name = result.vessel_name.replace(mmsi, '').trim();
                }
            }
            
            return result;
        }
        
        hasHeader(headers, keywords) {
            return keywords.some(kw => 
                headers.some(h => h && h.toLowerCase().includes(kw.toLowerCase()))
            );
        }
    }
    
    const excelLoader = new ExcelLoader(store);
"""
    
    # 5. –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    notification_code = """
    // ===================== –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π =====================
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
            color: white;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 9999;
            animation: slideIn 0.3s ease;
            max-width: 300px;
        `;
        notification.textContent = message;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }
"""
    
    # 6. –§–£–ù–ö–¶–ò–Ø uploadExcel
    upload_excel_code = """
    // ===================== –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel =====================
    function uploadExcel() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.xlsx,.xls';
        input.onchange = (e) => excelLoader.handleFile(e);
        input.click();
    }
"""
    
    # 7. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–†–¢–´ OpenLayers
    map_init_code = """
    // ===================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã OpenLayers =====================
    let olMap;
    
    function initMap() {
        const mapEl = document.getElementById('map');
        if (!mapEl) return;
        
        if (olMap) {
            olMap.updateSize();
            return;
        }
        
        olMap = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            view: new ol.View({
                center: ol.proj.fromLonLat([37.6173, 55.7558]),
                zoom: 4
            })
        });
    }
"""
    
    # 8. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
    init_code = """
    // ===================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã =====================
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –°–°–¢–û...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (typeof loadDashboard === 'function') loadDashboard();
        if (typeof loadRequests === 'function') loadRequests();
        if (typeof loadSignals === 'function') loadSignals();
        if (typeof loadTerminals === 'function') loadTerminals();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        setTimeout(function() {
            if (typeof initMap === 'function') initMap();
        }, 100);
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        switchTab('dashboard');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        const form = document.getElementById('new-request-form');
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const request = {
                    id: 'REQ' + Date.now(),
                    terminal: document.getElementById('terminal-number').value,
                    satType: document.getElementById('sat-type').value,
                    vessel: document.getElementById('vessel-name').value,
                    mmsi: document.getElementById('mmsi').value,
                    imo: document.getElementById('imo').value,
                    owner: document.getElementById('owner').value,
                    email: document.getElementById('email').value,
                    testDate: document.getElementById('test-date').value,
                    testTime: document.getElementById('test-time').value,
                    status: 'pending'
                };
                
                store.upsert('requests', [request]);
                showNotification('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'success');
                form.reset();
                
                if (typeof loadDashboard === 'function') loadDashboard();
                if (typeof loadRequests === 'function') loadRequests();
            });
        }
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –°–°–¢–û –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    });
"""
    
    # ==================== –°–ë–û–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê ====================
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ script –±–ª–æ–∫–∏ (–∫—Ä–æ–º–µ CDN)
    content = re.sub(
        r'<script(?![^>]*\bsrc\s*=)[^>]*>[\s\S]*?</script\s*>',
        '',
        content,
        flags=re.IGNORECASE
    )
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ inline —Å–∫—Ä–∏–ø—Ç—ã")
    
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π JavaScript –±–ª–æ–∫
    final_js = f"""
    <script>
    {new_switch_tab}
    {data_store_code}
    {excel_loader_code}
    {notification_code}
    {upload_excel_code}
    {map_init_code}
    
    // ===================== –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö =====================
    function loadDashboard() {{
        const requests = store.get('requests');
        const signals = store.get('signals');
        
        document.getElementById('active-requests').textContent = requests.length;
        document.getElementById('pending-confirm').textContent = requests.filter(r => r.status === 'pending').length;
        document.getElementById('confirmed').textContent = requests.filter(r => r.status === 'confirmed').length;
        document.getElementById('total-signals').textContent = signals.length;
        document.getElementById('auto-confirm-status').textContent = 
            localStorage.getItem('autoConfirm') === 'true' ? '–í–ö–õ–Æ–ß–ï–ù' : '–û–¢–ö–õ–Æ–ß–ï–ù';
    }}
    
    function loadRequests() {{
        const tbody = document.getElementById('requests-tbody');
        if (!tbody) return;
        
        const requests = store.get('requests');
        tbody.innerHTML = '';
        
        if (requests.length === 0) {{
            tbody.innerHTML = '<tr><td colspan="8" style="text-align:center;">–ù–µ—Ç –∑–∞—è–≤–æ–∫</td></tr>';
        }} else {{
            requests.forEach(req => {{
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${{req.id}}</td>
                    <td>${{req.terminal || req.terminal_number || ''}}</td>
                    <td>${{req.vessel || req.vessel_name || ''}}</td>
                    <td>${{req.mmsi || ''}}</td>
                    <td>${{req.imo || ''}}</td>
                    <td>${{req.testDate || ''}}</td>
                    <td><span class="status-badge status-${{req.status}}">${{req.status}}</span></td>
                    <td><button class="btn btn-primary btn-sm" onclick="confirmRequest('${{req.id}}')">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button></td>
                `;
                tbody.appendChild(row);
            }});
        }}
    }}
    
    function loadSignals() {{
        const tbody = document.getElementById('signals-tbody');
        if (!tbody) return;
        
        const signals = store.get('signals');
        tbody.innerHTML = '';
        
        if (signals.length === 0) {{
            tbody.innerHTML = '<tr><td colspan="9" style="text-align:center;">–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤</td></tr>';
        }} else {{
            signals.forEach(sig => {{
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${{sig.id}}</td>
                    <td>${{sig.terminal || sig.terminal_number || ''}}</td>
                    <td>${{sig.vessel || sig.vessel_name || ''}}</td>
                    <td>${{sig.mmsi || ''}}</td>
                    <td>${{sig.imo || ''}}</td>
                    <td>${{sig.type || 'INMARSAT'}}</td>
                    <td>${{sig.received || ''}}</td>
                    <td>${{sig.isTest ? '<span class="status-badge status-tested">–¢–µ—Å—Ç</span>' : '<span class="status-badge status-active">–¢—Ä–µ–≤–æ–≥–∞</span>'}}</td>
                    <td><button class="btn btn-primary btn-sm" onclick="matchSignal('${{sig.id}}')">–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å</button></td>
                `;
                tbody.appendChild(row);
            }});
        }}
    }}
    
    function loadTerminals() {{
        const tbody = document.getElementById('terminals-tbody');
        if (!tbody) return;
        
        const terminals = store.get('terminals');
        tbody.innerHTML = '';
        
        if (terminals.length === 0) {{
            tbody.innerHTML = '<tr><td colspan="9" style="text-align:center;">–ù–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤</td></tr>';
        }} else {{
            terminals.forEach(terminal => {{
                let status = '–ê–∫—Ç–∏–≤–µ–Ω';
                let statusClass = 'status-active';
                
                if (terminal.status === 'inactive') {{
                    status = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                    statusClass = 'status-inactive';
                }} else if (terminal.status === 'tested') {{
                    status = '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω';
                    statusClass = 'status-tested';
                }} else if (terminal.status === 'pending') {{
                    status = '–û–∂–∏–¥–∞–µ—Ç —Ç–µ—Å—Ç–∞';
                    statusClass = 'status-pending';
                }}
                
                let nextTestDate = '';
                if (terminal.lastTest) {{
                    try {{
                        const lastDate = new Date(terminal.lastTest);
                        if (!isNaN(lastDate.getTime())) {{
                            const nextDate = new Date(lastDate);
                            nextDate.setFullYear(nextDate.getFullYear() + 1);
                            nextTestDate = nextDate.toISOString().split('T')[0];
                        }}
                    }} catch(e) {{}}
                }}
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${{terminal.terminal_number || ''}}</td>
                    <td>${{terminal.vessel_name || terminal.name || ''}}</td>
                    <td>${{terminal.mmsi || ''}}</td>
                    <td>${{terminal.terminal_type || terminal.type || 'INMARSAT'}}</td>
                    <td>${{terminal.owner || ''}}</td>
                    <td>${{terminal.lastTest || ''}}</td>
                    <td>${{nextTestDate}}</td>
                    <td><span class="status-badge ${{statusClass}}">${{status}}</span></td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewTerminal('${{terminal.id || terminal.terminal_number}}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                        <button class="btn btn-success btn-sm" onclick="testTerminal('${{terminal.terminal_number}}')">–¢–µ—Å—Ç</button>
                    </td>
                `;
                tbody.appendChild(row);
            }});
        }}
    }}
    
    // ===================== –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π =====================
    function confirmRequest(id) {{
        const requests = store.get('requests');
        const req = requests.find(r => r.id === id);
        if (req) {{
            req.status = 'confirmed';
            store.set('requests', requests);
            loadRequests();
            loadDashboard();
            showNotification('–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'success');
        }}
    }}
    
    function matchSignal(id) {{
        showNotification('–§—É–Ω–∫—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }}
    
    function viewTerminal(id) {{
        showNotification('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ' + id, 'info');
    }}
    
    function testTerminal(terminalNumber) {{
        const signal = {{
            id: 'SIG' + Date.now(),
            terminal: terminalNumber,
            terminal_number: terminalNumber,
            type: 'TEST',
            received: new Date().toISOString(),
            isTest: true
        }};
        
        store.upsert('signals', [signal]);
        
        const terminals = store.get('terminals');
        const terminal = terminals.find(t => t.terminal_number === terminalNumber);
        if (terminal) {{
            terminal.lastTest = new Date().toISOString().split('T')[0];
            terminal.status = 'tested';
            store.set('terminals', terminals);
        }}
        
        loadTerminals();
        loadSignals();
        loadDashboard();
        showNotification('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
    }}
    
    function toggleAutoConfirm() {{
        const current = localStorage.getItem('autoConfirm') === 'true';
        localStorage.setItem('autoConfirm', !current);
        loadDashboard();
        showNotification('–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ' + (!current ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'), 'info');
    }}
    
    function generateTestData() {{
        const testRequest = {{
            id: 'REQ' + Date.now(),
            terminal: '427309676',
            terminal_number: '427309676',
            vessel: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
            vessel_name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
            mmsi: '273456789',
            imo: '1234567',
            owner: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü',
            testDate: new Date().toISOString().split('T')[0],
            status: 'pending'
        }};
        
        const testSignal = {{
            id: 'SIG' + Date.now(),
            terminal: '427309676',
            terminal_number: '427309676',
            vessel: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
            vessel_name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
            mmsi: '273456789',
            type: 'INMARSAT',
            received: new Date().toISOString(),
            isTest: true
        }};
        
        const testTerminal = {{
            id: 'TERM' + Date.now(),
            terminal_number: '427309676',
            vessel_name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
            mmsi: '273456789',
            terminal_type: 'INMARSAT',
            owner: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü',
            lastTest: new Date().toISOString().split('T')[0],
            status: 'tested'
        }};
        
        store.upsert('requests', [testRequest]);
        store.upsert('signals', [testSignal]);
        store.upsert('terminals', [testTerminal]);
        
        loadDashboard();
        loadRequests();
        loadSignals();
        loadTerminals();
        
        showNotification('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'success');
    }}
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    function configureEmail() {{ showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function exportSettings() {{ showNotification('–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function importSettings() {{ showNotification('–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function processEmailQueue() {{ showNotification('–û–±—Ä–∞–±–æ—Ç–∫–∞ email –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function syncSearchSea() {{ showNotification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function systemCheck() {{ showNotification('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function addTerminal() {{ showNotification('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function exportTerminalsCSV() {{ showNotification('–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info'); }}
    function showAllSignals() {{ showNotification('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã', 'info'); }}
    function measureDistance() {{ showNotification('–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è', 'info'); }}
    function takeScreenshot() {{ showNotification('–°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞—Ä—Ç—ã', 'info'); }}
    function clearMap() {{ showNotification('–û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã', 'info'); }}
    function generateReport() {{ showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞', 'info'); }}
    function exportPDF() {{ showNotification('–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF', 'info'); }}
    function viewRequest(id) {{ showNotification('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ ' + id, 'info'); }}
    function viewSignal(id) {{ showNotification('–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏–≥–Ω–∞–ª–∞ ' + id, 'info'); }}
    
    {init_code}
    </script>
    """
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π JavaScript –ø–µ—Ä–µ–¥ </body>
    if '</body>' in content:
        content = content.replace('</body>', final_js + '\n</body>')
    else:
        content += final_js
    
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π JavaScript –±–ª–æ–∫")
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Leaflet
    content = re.sub(r'<link[^>]*leaflet[^>]*>', '', content, flags=re.IGNORECASE)
    content = re.sub(r'<script[^>]*leaflet[^>]*></script>', '', content, flags=re.IGNORECASE)
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Leaflet")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    target_file.write_text(content, encoding='utf-8')
    
    print("\n" + "=" * 70)
    print("‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print("=" * 70)
    
    print("\nüìã –ß–¢–û –ë–´–õ–û –°–î–ï–õ–ê–ù–û:")
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω onclick –∏–∑ —Ç–µ–≥–∞ <style>")
    print("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è switchTab")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å DataStore")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π ExcelLoader")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenLayers")
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    print("\nüéØ –î–ï–ô–°–¢–í–ò–Ø:")
    print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ index_14_36.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("  2. –ù–∞–∂–º–∏—Ç–µ Ctrl+F5 –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫")
    print("  4. –ù–∞–∂–º–∏—Ç–µ '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'")
    print("  5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª")
    
    print("\n‚úÖ –î–û–õ–ñ–ù–û –†–ê–ë–û–¢–ê–¢–¨:")
    print("  ‚Ä¢ –í—Å–µ –≤–∫–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è")
    print("  ‚Ä¢ –ö–∞—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("  ‚Ä¢ Excel –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å–∫–ª–µ–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π")
    print("  ‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
    print("  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –°–°–¢–û")
    print("-" * 70)
    
    success = final_restore()
    
    if success:
        print("\n‚ú® –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏")