#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ ExcelLoader –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: C:\Projects\test-ssto-project\add_excel_loader.py
"""

import os
from datetime import datetime

def add_excel_loader():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å ExcelLoader –≤ —Ñ–∞–π–ª"""
    
    file_path = r'C:\Projects\test-ssto-project\index_14_36.html'
    
    print("=" * 70)
    print("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–ê–°–°–ê ExcelLoader")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.before_excel_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    print("\nüìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        print(f"   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(backup_path)}")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ExcelLoader
    if 'class ExcelLoader' in content or 'ExcelLoader' in content:
        print("\n‚úÖ ExcelLoader —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ")
        return True
    
    print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ExcelLoader...")
    
    # –ö–ª–∞—Å—Å ExcelLoader
    excel_loader_code = """
// ============= –ö–õ–ê–°–° –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò EXCEL =============
class ExcelLoader {
    constructor() {
        this.setupHandlers();
    }

    setupHandlers() {
        const input = document.getElementById('excel-upload');
        if (input) {
            input.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    this.loadExcelFile(file);
                }
            });
        }
    }

    openFileDialog() {
        const input = document.getElementById('excel-upload');
        if (input) {
            input.click();
        }
    }

    loadExcelFile(file) {
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', file.name);
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = e.target.result;
                const workbook = XLSX.read(data, { type: 'binary' });
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
                let allData = [];
                workbook.SheetNames.forEach(sheetName => {
                    console.log('üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞:', sheetName);
                    const worksheet = workbook.Sheets[sheetName];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    allData = allData.concat(jsonData);
                });
                
                console.log('üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:', allData.length);
                this.processExcelData(allData);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message);
            }
        };
        
        reader.onerror = () => {
            alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        };
        
        reader.readAsBinaryString(file);
    }

    processExcelData(data) {
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Excel, –∑–∞–ø–∏—Å–µ–π:', data.length);
        
        if (!data || data.length === 0) {
            alert('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        
        let requests = [];
        let terminals = [];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        data.forEach((row, index) => {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ (9 —Ü–∏—Ñ—Ä)
            let stationNumber = '';
            
            // –ò—â–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            for (let key in row) {
                const value = String(row[key] || '');
                // –ò—â–µ–º 9 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
                const matches = value.match(/[0-9]{9}/);
                if (matches) {
                    stationNumber = matches[0];
                    break;
                }
            }
            
            if (!stationNumber) {
                console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É', index, '- –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π —Ç–µ—Å—Ç–∞ - —ç—Ç–æ –∑–∞—è–≤–∫–∞
            let hasTestDate = false;
            let testDate = '';
            
            for (let key in row) {
                if (key.toLowerCase().includes('–¥–∞—Ç–∞') || 
                    key.toLowerCase().includes('—Ç–µ—Å—Ç') || 
                    key.toLowerCase().includes('–ø–ª–∞–Ω')) {
                    if (row[key]) {
                        hasTestDate = true;
                        testDate = String(row[key]);
                        break;
                    }
                }
            }
            
            if (hasTestDate) {
                // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                const request = {
                    id: 'REQ-' + Date.now() + '-' + index,
                    stationNumber: stationNumber,
                    vesselName: row['–°—É–¥–Ω–æ'] || row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞'] || row['Vessel'] || '',
                    mmsi: row['MMSI'] || row['–ú–ú–°'] || '',
                    imo: row['IMO'] || row['–ò–ú–û'] || '',
                    testDate: testDate,
                    status: 'pending',
                    createdAt: new Date().toISOString()
                };
                
                requests.push(request);
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', stationNumber);
            } else {
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
                const terminal = {
                    id: 'T-' + Date.now() + '-' + index,
                    terminal_number: stationNumber,
                    vessel_name: row['–°—É–¥–Ω–æ'] || row['Vessel'] || '',
                    mmsi: row['MMSI'] || '',
                    terminal_type: row['–¢–∏–ø —Å–≤—è–∑–∏'] || row['Type'] || 'INMARSAT',
                    owner: row['–í–ª–∞–¥–µ–ª–µ—Ü'] || row['Owner'] || '',
                    status: 'active'
                };
                
                terminals.push(terminal);
                console.log('–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª:', stationNumber);
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        if (requests.length > 0) {
            const existingRequests = JSON.parse(localStorage.getItem('testRequests') || '[]');
            localStorage.setItem('testRequests', JSON.stringify([...existingRequests, ...requests]));
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫:', requests.length);
        }
        
        if (terminals.length > 0) {
            const existingTerminals = JSON.parse(localStorage.getItem('ssasTerminals') || '[]');
            localStorage.setItem('ssasTerminals', JSON.stringify([...existingTerminals, ...terminals]));
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤:', terminals.length);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (typeof loadRequests === 'function') loadRequests();
        if (typeof loadTerminals === 'function') loadTerminals();
        if (typeof loadDashboard === 'function') loadDashboard();
        
        alert('–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ' + requests.length + ' –∑–∞—è–≤–æ–∫, ' + terminals.length + ' —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤');
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ExcelLoader
window.excelLoader = new ExcelLoader();

// ============= –ö–û–ù–ï–¶ –ö–õ–ê–°–°–ê ExcelLoader =============
"""
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ - –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </script>
    last_script_pos = content.rfind('</script>')
    if last_script_pos > 0:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
        content = content[:last_script_pos] + excel_loader_code + '\n' + content[last_script_pos:]
        print("   ‚úÖ –ö–ª–∞—Å—Å ExcelLoader –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞...")
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
        final_content = f.read()
    
    if 'class ExcelLoader' in final_content:
        print("   ‚úÖ ExcelLoader —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        print("\n" + "=" * 70)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("\n‚ö†Ô∏è –¢–µ–ø–µ—Ä—å:")
        print("  1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: Ctrl+F5")
        print("  2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)")
        return True
    else:
        print("   ‚ùå ExcelLoader –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    add_excel_loader()
    print("\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")