// add-test-type-column.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\add-test-type-column.js

const { Client } = require('pg');
require('dotenv').config();

const client = new Client({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'ssto',
  password: process.env.DB_PASSWORD || 'sstopass',
  database: process.env.DB_NAME || 'sstodb'
});

async function addTestTypeColumn() {
  try {
    await client.connect();
    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ test_type –≤ —Ç–∞–±–ª–∏—Ü—É requests...\n');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É test_type
    await client.query(`
      ALTER TABLE requests 
      ADD COLUMN IF NOT EXISTS test_type VARCHAR(50) DEFAULT 'routine'
    `);
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ test_type –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–±–∞–≤–∏–ª–∞—Å—å
    const result = await client.query(`
      SELECT column_name, data_type, column_default
      FROM information_schema.columns 
      WHERE table_name = 'requests' 
      AND column_name = 'test_type'
    `);
    
    if (result.rows.length > 0) {
      console.log('\n‚úÖ –ö–æ–ª–æ–Ω–∫–∞ test_type —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:');
      console.log(`  –¢–∏–ø: ${result.rows[0].data_type}`);
      console.log(`  –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${result.rows[0].column_default}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã requests:');
    const allColumns = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'requests'
      ORDER BY ordinal_position
    `);
    
    allColumns.rows.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type}`);
    });
    
    console.log('\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  } finally {
    await client.end();
  }
}

addTestTypeColumn();