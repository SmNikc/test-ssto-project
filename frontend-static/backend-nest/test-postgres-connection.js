// test-postgres-connection.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ C:\Projects\test-ssto-project\backend-nest\test-postgres-connection.js

const { Client } = require('pg');
require('dotenv').config();

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...\n');
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env:');
console.log('DB_HOST:', process.env.DB_HOST || 'localhost');
console.log('DB_PORT:', process.env.DB_PORT || 5432);
console.log('DB_USER:', process.env.DB_USER || 'ssto');
console.log('DB_NAME:', process.env.DB_NAME || 'sstodb');
console.log('-----------------------------------\n');

const client = new Client({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'ssto',
  password: process.env.DB_PASSWORD || 'sstopass',
  database: process.env.DB_NAME || 'sstodb'
});

async function testConnection() {
  try {
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...');
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
    const versionResult = await client.query('SELECT version()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –í–µ—Ä—Å–∏—è:', versionResult.rows[0].version);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);
    
    if (tablesResult.rows.length > 0) {
      console.log('\nüìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
      tablesResult.rows.forEach(row => {
        console.log('  - ' + row.table_name);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ requests
      const requestsCount = await client.query('SELECT COUNT(*) FROM requests');
      console.log(`\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ –ë–î: ${requestsCount.rows[0].count}`);
    } else {
      console.log('\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏.');
    }
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL:');
    console.log('   Get-Service -Name "postgresql*"');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –≤ backend-nest');
    console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç:');
    console.log('   psql -U postgres');
    console.log('   CREATE DATABASE sstodb;');
    console.log('   CREATE USER ssto WITH PASSWORD \'sstopass\';');
    console.log('   GRANT ALL PRIVILEGES ON DATABASE sstodb TO ssto;');
  } finally {
    await client.end();
  }
}

testConnection();