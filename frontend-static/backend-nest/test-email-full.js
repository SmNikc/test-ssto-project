// backend-nest/test-email-full.js
// –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailService –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç

const http = require('http');

console.log('\n   üìß –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EMAIL –ò –°–ò–ì–ù–ê–õ–û–í\n');
console.log('='.repeat(60));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç
function parseRussianDate(dateStr) {
  const months = {
    '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3,
    '–º–∞—è': 4, '–∏—é–Ω—è': 5, '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7,
    '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
  };

  // –ü–∞—Ç—Ç–µ—Ä–Ω: "4 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥. 12:30:45"
  const pattern = /(\d{1,2})\s+([–∞-—è]+)\s+(\d{4})\s+–≥\.\s+(\d{1,2}):(\d{2}):(\d{2})/i;
  const match = dateStr.match(pattern);
  
  if (match) {
    const [, day, monthStr, year, hours, minutes, seconds] = match;
    const month = months[monthStr.toLowerCase()];
    
    if (month !== undefined) {
      return new Date(
        parseInt(year),
        month,
        parseInt(day),
        parseInt(hours),
        parseInt(minutes),
        parseInt(seconds)
      );
    }
  }
  
  return null;
}

// HTTP –∑–∞–ø—Ä–æ—Å
function makeRequest(options, postData = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({ 
          status: res.statusCode, 
          data: data,
          headers: res.headers 
        });
      });
    });
    
    req.on('error', reject);
    
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
    
    if (postData) {
      req.write(postData);
    }
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailService...');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('\n1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    const result = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/health',
      method: 'GET'
    });
    
    if (result.status === 200 || result.status === 404) {
      console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    } else {
      console.log(`‚ö†Ô∏è Backend –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º: ${result.status}`);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.log('\n‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
    console.log('   1. Backend –∑–∞–ø—É—â–µ–Ω (npm run start:dev)');
    console.log('   2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('   3. Email –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }

  // 2. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
  console.log('\nüìÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç:');
  const testDates = [
    "1 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥. 5:46:51",
    "15 —è–Ω–≤–∞—Ä—è 2025 –≥. 14:30:00",
    "31 –¥–µ–∫–∞–±—Ä—è 2024 –≥. 23:59:59",
    "4 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥. 12:30:45"
  ];

  testDates.forEach(dateStr => {
    const parsed = parseRussianDate(dateStr);
    if (parsed) {
      console.log(`   "${dateStr}" -> ‚úÖ ${parsed.toLocaleString('ru-RU')}`);
    } else {
      console.log(`   "${dateStr}" -> ‚ùå –ù–ï –†–ê–°–ü–û–ó–ù–ê–ù–û`);
    }
  });
  console.log('   ‚ÑπÔ∏è EmailService –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç');

  // 3. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email
  console.log('\n2Ô∏è‚É£  –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email...');
  try {
    const emailData = JSON.stringify({
      to: 'test@example.com',
      subject: '–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –°–°–¢–û',
      text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      html: '<h1>–¢–µ—Å—Ç</h1><p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>'
    });

    const result = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/email/send',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(emailData)
      }
    }, emailData);

    if (result.status === 200 || result.status === 201) {
      console.log('‚úÖ Email endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
      try {
        const response = JSON.parse(result.data);
        console.log('   –û—Ç–≤–µ—Ç:', response);
      } catch {
        console.log('   –û—Ç–≤–µ—Ç:', result.data);
      }
    } else if (result.status === 404) {
      console.log('‚ùå Email endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (/api/email/send)');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ EmailModule –¥–æ–±–∞–≤–ª–µ–Ω –≤ app.module.ts');
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å ${result.status}`);
      console.log('   –û—Ç–≤–µ—Ç:', result.data);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
  }

  // 4. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º
  console.log('\n3Ô∏è‚É£  –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö email...');
  try {
    const result = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/email/check',
      method: 'GET'
    });

    if (result.status === 200) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
      const data = JSON.parse(result.data);
      console.log(`   –ó–∞—è–≤–æ–∫: ${data.requests?.length || 0}`);
      console.log(`   –°–∏–≥–Ω–∞–ª–æ–≤: ${data.signals?.length || 0}`);
      console.log(`   –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö: ${data.unrecognized?.length || 0}`);
    } else if (result.status === 404) {
      console.log('‚ùå Endpoint /api/email/check –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      console.log(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: ${result.status}`);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }

  // 5. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏
  console.log('\n4Ô∏è‚É£  –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏ –∏–∑ email...');
  const testEmailContent = `
    –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–°–¢–û
    –°—É–¥–Ω–æ: –ö–∞–ø–∏—Ç–∞–Ω –ò–≤–∞–Ω–æ–≤
    MMSI: 273456789
    –ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏: INM-C-123456
    –î–∞—Ç–∞ —Ç–µ—Å—Ç–∞: 10 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥.
    –ö–æ–Ω—Ç–∞–∫—Ç: –ü–µ—Ç—Ä–æ–≤ –ò.–°.
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (924) 123-45-67
    Email: petrov@shipping.ru
  `;

  try {
    const parseData = JSON.stringify({
      subject: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Å—Ç –°–°–¢–û',
      from: 'petrov@shipping.ru',
      text: testEmailContent
    });

    const result = await makeRequest({
      hostname: 'localhost',
      port: 3001,
      path: '/api/email/parse',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(parseData)
      }
    }, parseData);

    if (result.status === 200) {
      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      const parsed = JSON.parse(result.data);
      console.log('   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log(`   - –°—É–¥–Ω–æ: ${parsed.vessel || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
      console.log(`   - MMSI: ${parsed.mmsi || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
      console.log(`   - –¢–µ—Ä–º–∏–Ω–∞–ª: ${parsed.terminal || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    } else if (result.status === 404) {
      console.log('‚ö†Ô∏è Endpoint /api/email/parse –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
  }

  // –ò—Ç–æ–≥–∏
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n');
  console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –≤ .env:');
  console.log('   SMTP_HOST=smtp.gmail.com');
  console.log('   SMTP_PORT=587');
  console.log('   SMTP_USER=your-email@gmail.com');
  console.log('   SMTP_PASS=your-app-password');
  
  console.log('\nüí° –î–ª—è Gmail:');
  console.log('   1. –í–∫–ª—é—á–∏—Ç–µ 2FA –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Google');
  console.log('   2. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –≤ SMTP_PASS');
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);