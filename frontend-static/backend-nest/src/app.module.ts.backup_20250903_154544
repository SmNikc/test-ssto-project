import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { SequelizeModule } from '@nestjs/sequelize';
import { ScheduleModule } from '@nestjs/schedule';
import { SignalService } from './services/signal.service';
import { PdfService } from './services/pdf.service';

// Controllers
import { AppController } from './app.controller';
import { HealthController } from './controllers/health.controller';
import { RequestController } from './controllers/request.controller';
import { SignalController } from './controllers/signal.controller';
import { TestingController } from './controllers/testing.controller';
import { UserController } from './controllers/user.controller';
import { LogController } from './controllers/log.controller';
import { VesselController } from './controllers/vessel.controller';
import { TestRequestController } from './controllers/test-request.controller';
import { ConfirmationController } from './controllers/confirmation.controller';
import { ReportController } from './controllers/report.controller';
import { ConfirmationApiController } from './controllers/confirmation-api.controller';

// Services
import { AppService } from './app.service';
import { EmailSenderService } from './services/email-sender.service';
import { EmailService } from './services/email.service';
import { VesselService } from './services/vessel.service';
import { TestRequestService } from './services/test-request.service';
import { ConfirmationService } from './services/confirmation.service';
import { ReportService } from './services/report.service';
import { EnhancedConfirmationService } from './services/enhanced-confirmation.service';

// Models - Sequelize
import SSASRequest from './models/request.model';
import Signal from './models/signal.model';
import Log from './models/log.model';
import TestingScenario from './models/testingScenario.model';
import User from './models/user.model';
import Vessel from './models/vessel.model';
import TestRequest from './models/test-request.model';
import ConfirmationDocument from './models/confirmation-document.model';

// Entities
import { SystemSettings } from './entities/system-settings.entity';

@Module({
 imports: [
   // Глобально читаем .env
   ConfigModule.forRoot({ 
     isGlobal: true,
     envFilePath: '.env',
   }),
   
   // Database
   SequelizeModule.forRootAsync({
     inject: [ConfigService],
     useFactory: (cfg: ConfigService) => ({
       dialect: 'postgres',
       host: cfg.get<string>('DB_HOST', 'localhost'),
       port: Number(cfg.get<string>('DB_PORT', '5432')),
       username: cfg.get<string>('DB_USER', 'ssto'),
       password: cfg.get<string>('DB_PASSWORD', 'sstopass'),
       database: cfg.get<string>('DB_NAME', 'sstodb'),
       autoLoadModels: false,
       synchronize: false, // Отключено из-за циклической зависимости
       logging: console.log,
       models: [
          SSASRequest,
         Signal,
         Log,
         TestingScenario,
         User,
         Vessel,
         TestRequest,
         ConfirmationDocument,
         SystemSettings
       ],
     }),
   }),
   
   // Регистрация моделей для DI
   SequelizeModule.forFeature([
      SSASRequest,
     Signal,
     Log,
     TestingScenario,
     User,
     Vessel,
     TestRequest,
     ConfirmationDocument,
     SystemSettings
   ]),
   
   // Планировщик задач
   ScheduleModule.forRoot(),
 ],
 controllers: [
   AppController,
   HealthController,
   RequestController,
   SignalController,
   TestingController,
   UserController,
   LogController,
   VesselController,
   TestRequestController,
   ConfirmationController,
   ReportController,
   ConfirmationApiController,
 ],
 providers: [
   AppService,
   EmailSenderService,
   EmailService,
   VesselService,
   TestRequestService,
   ConfirmationService,
   ReportService,
   EnhancedConfirmationService,
   SignalService,
   PdfService,
 ],
})
export class AppModule {}

