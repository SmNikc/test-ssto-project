// fix-email-parser-id.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\fix-email-parser-id.js
// –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–ª–µ–º id –≤ email-parser.service.ts

const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = 'C:\\Projects\\test-ssto-project\\backend-nest';
const emailParserPath = path.join(PROJECT_ROOT, 'src', 'services', 'email-parser.service.ts');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è id –≤ email-parser.service.ts...\n');

if (fs.existsSync(emailParserPath)) {
  let content = fs.readFileSync(emailParserPath, 'utf8');
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  const backupPath = emailParserPath + '.backup_' + Date.now();
  fs.writeFileSync(backupPath, content, 'utf8');
  console.log(`üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${path.basename(backupPath)}`);
  
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≥–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è requestData –∏ —É–¥–∞–ª—è–µ–º –ø–æ–ª–µ id
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≥–¥–µ requestData –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
  const requestDataPattern = /const\s+requestData\s*=\s*{([^}]+)}/s;
  const match = content.match(requestDataPattern);
  
  if (match) {
    let objectContent = match[1];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å id
    objectContent = objectContent.replace(/^\s*id:\s*['"]?\w+['"]?,?\s*$/m, '');
    
    // –ï—Å–ª–∏ id –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    objectContent = objectContent.replace(/,?\s*id:\s*['"]?\w+['"]?\s*,?/g, ',');
    
    // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å
    objectContent = objectContent.replace(/,\s*,/g, ',');
    
    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    const newRequestData = `const requestData = {${objectContent}}`;
    content = content.replace(requestDataPattern, newRequestData);
    
    console.log('‚úÖ –ü–æ–ª–µ id —É–¥–∞–ª–µ–Ω–æ –∏–∑ requestData');
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è
  // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å id
  const lines = content.split('\n');
  let modified = false;
  
  for (let i = 0; i < lines.length; i++) {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 78 –≥–¥–µ –æ—à–∏–±–∫–∞
    if (i >= 70 && i <= 85) {
      if (lines[i].match(/^\s*id:\s*['"]?\w+['"]?,?\s*$/)) {
        lines[i] = '      // id: –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ë–î,';
        modified = true;
        console.log(`‚úÖ –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${i + 1}: id`);
      }
    }
  }
  
  if (modified) {
    content = lines.join('\n');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(emailParserPath, content, 'utf8');
  
  console.log('\nüìÑ –§–∞–π–ª C:\\Projects\\test-ssto-project\\backend-nest\\src\\services\\email-parser.service.ts –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏ 78 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const finalLines = content.split('\n');
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏ 78:');
  for (let i = 74; i <= 80 && i < finalLines.length; i++) {
    const marker = i === 77 ? ' ‚Üí ' : '   ';
    console.log(`${marker}${i + 1}: ${finalLines[i].substring(0, 80)}`);
  }
  
} else {
  console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', emailParserPath);
}

console.log('\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:');
console.log('  Ctrl+C –∏ npm run start:dev');