#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
adapt_day2_to_sequelize.py - –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ Day 2 –ø–æ–¥ Sequelize
–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤: C:\Projects\test-ssto-project\backend-nest\scripts\
–ó–∞–ø—É—Å–∫: python scripts\adapt_day2_to_sequelize.py
"""

import shutil
from pathlib import Path

PROJECT_PATH = Path("C:/Projects/test-ssto-project/backend-nest")
SRC_PATH = PROJECT_PATH / "src"

def main():
    print("=== –ê–¥–∞–ø—Ç–∞—Ü–∏—è Day 2 –ø–æ–¥ Sequelize ===\n")
    
    # 1. –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–∞—Ä—ã–µ TypeORM –º–æ–¥–µ–ª–∏ –≤ .old
    old_request_model = SRC_PATH / "models" / "request.model.ts"
    old_signal_model = SRC_PATH / "models" / "signal.model.ts"
    
    if old_request_model.exists():
        backup = old_request_model.with_suffix('.ts.typeorm')
        shutil.move(str(old_request_model), str(backup))
        print(f"üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±—ç–∫–∞–ø: {backup.name}")
    
    if old_signal_model.exists():
        backup = old_signal_model.with_suffix('.ts.typeorm')
        shutil.move(str(old_signal_model), str(backup))
        print(f"üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±—ç–∫–∞–ø: {backup.name}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Request –¥–ª—è Sequelize (–µ—Å–ª–∏ –Ω–µ—Ç request.ts)
    request_sequelize = SRC_PATH / "models" / "request.ts"
    if not request_sequelize.exists():
        print("‚ö†Ô∏è  models/request.ts —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    # 3. –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Signal –¥–ª—è Sequelize
    signal_model_content = '''import { Table, Column, Model, DataType, ForeignKey, BelongsTo } from 'sequelize-typescript';
import { SSASRequest } from './request';

@Table({ tableName: 'signals' })
export class Signal extends Model {
  @Column({ type: DataType.STRING, allowNull: false, primaryKey: true })
  id: string;

  @ForeignKey(() => SSASRequest)
  @Column({ type: DataType.STRING, allowNull: true })
  request_id: string;

  @Column({ type: DataType.STRING(15), allowNull: false })
  beacon_hex_id: string;

  @Column({ 
    type: DataType.ENUM('406', '121.5', 'both'),
    defaultValue: '406'
  })
  frequency: string;

  @Column({ type: DataType.DATE, allowNull: false })
  detection_time: Date;

  @Column({ type: DataType.STRING(255), allowNull: false })
  email_subject: string;

  @Column({ type: DataType.TEXT, allowNull: false })
  email_body: string;

  @Column({ type: DataType.STRING(255), allowNull: false })
  email_from: string;

  @Column({ type: DataType.DATE, allowNull: false })
  email_received_at: Date;

  @Column({ type: DataType.STRING(255), allowNull: true })
  email_message_id: string;

  @Column({ type: DataType.STRING(50), allowNull: true })
  latitude: string;

  @Column({ type: DataType.STRING(50), allowNull: true })
  longitude: string;

  @Column({ type: DataType.STRING(100), allowNull: true })
  satellite_name: string;

  @Column({ type: DataType.STRING(100), allowNull: true })
  lut_name: string;

  @Column({ type: DataType.STRING(10), allowNull: true })
  country_code: string;

  @Column({ type: DataType.STRING(50), allowNull: true })
  beacon_type: string;

  @Column({ type: DataType.STRING(20), allowNull: true })
  mmsi: string;

  @Column({ type: DataType.STRING(20), allowNull: true })
  call_sign: string;

  @Column({ type: DataType.STRING(50), allowNull: true })
  serial_number: string;

  @Column({
    type: DataType.ENUM('received', 'processed', 'confirmed', 'false_alarm'),
    defaultValue: 'received'
  })
  status: string;

  @Column({ type: DataType.DATE, allowNull: true })
  processed_at: Date;

  @Column({ type: DataType.STRING(100), allowNull: true })
  processed_by: string;

  @Column({ type: DataType.TEXT, allowNull: true })
  notes: string;

  @Column({ type: DataType.JSON, allowNull: true })
  metadata: any;

  @BelongsTo(() => SSASRequest)
  request: SSASRequest;
}'''
    
    signal_path = SRC_PATH / "models" / "signal.model.ts"
    signal_path.write_text(signal_model_content, encoding='utf-8')
    print("‚úÖ –°–æ–∑–¥–∞–Ω signal.model.ts –¥–ª—è Sequelize")
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º app.module.ts –¥–ª—è Sequelize
    app_module_content = '''import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { SequelizeModule } from '@nestjs/sequelize';
import { AppController } from './app.controller';
import { AppService } from './app.service';

// Import models
import { SSASRequest } from './models/request';
import { Signal } from './models/signal.model';
import { User } from './models/user.model';
import { Log } from './models/log.model';
import { TestingScenario } from './models/testingScenario.model';

// Import modules
import { RequestModule } from './request/request.module';
import { UserModule } from './user/user.module';
import { LogModule } from './log/log.module';
import { TestingModule } from './testing/testing.module';
import { SstoModule } from './ssto.module';

@Module({
  imports: [
    // Configuration
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: '.env',
    }),
    
    // Database - Sequelize
    SequelizeModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        dialect: 'postgres',
        host: configService.get('DB_HOST', 'localhost'),
        port: configService.get('DB_PORT', 5432),
        username: configService.get('DB_USER', 'postgres'),
        password: configService.get('DB_PASSWORD', 'postgres'),
        database: configService.get('DB_NAME', 'ssto_test'),
        models: [SSASRequest, Signal, User, Log, TestingScenario],
        autoLoadModels: true,
        synchronize: configService.get('NODE_ENV', 'development') === 'development',
        logging: configService.get('NODE_ENV', 'development') === 'development' ? console.log : false,
      }),
    }),
    
    // Feature modules
    RequestModule,
    UserModule,
    LogModule,
    TestingModule,
    SstoModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}'''
    
    app_module = SRC_PATH / "app.module.ts"
    if app_module.exists():
        backup = app_module.with_suffix('.ts.backup')
        shutil.copy2(app_module, backup)
        print(f"üìÑ –ë—ç–∫–∞–ø app.module.ts -> {backup.name}")
    
    app_module.write_text(app_module_content, encoding='utf-8')
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω app.module.ts –¥–ª—è Sequelize")
    
    # 5. –û–±–Ω–æ–≤–ª—è–µ–º ssto.module.ts –¥–ª—è Sequelize
    ssto_module_content = '''import { Module } from '@nestjs/common';
import { SequelizeModule } from '@nestjs/sequelize';
import { ConfigModule } from '@nestjs/config';

// Models
import { SSASRequest } from './models/request';
import { Signal } from './models/signal.model';

// Services
import { RequestService } from './services/request.service';
import { EmailService } from './services/email.service';

// Controllers
import { RequestController } from './controllers/request.controller';

@Module({
  imports: [
    ConfigModule,
    SequelizeModule.forFeature([SSASRequest, Signal]),
  ],
  controllers: [RequestController],
  providers: [RequestService, EmailService],
  exports: [RequestService, EmailService],
})
export class SstoModule {}'''
    
    ssto_module = SRC_PATH / "ssto.module.ts"
    ssto_module.write_text(ssto_module_content, encoding='utf-8')
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ssto.module.ts –¥–ª—è Sequelize")
    
    # 6. –û–±–Ω–æ–≤–ª—è–µ–º email.service.ts –¥–ª—è Sequelize
    email_service_content = '''import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectModel } from '@nestjs/sequelize';
import { Signal } from '../models/signal.model';

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);

  constructor(
    private configService: ConfigService,
    @InjectModel(Signal)
    private signalModel: typeof Signal,
  ) {}

  async checkEmails(): Promise<Signal[]> {
    this.logger.log('Checking emails (stub implementation)');
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è MVP
    return [];
  }

  async sendTestEmail(to: string, subject: string, body: string): Promise<void> {
    this.logger.log(`Test email would be sent to: ${to}`);
    this.logger.log(`Subject: ${subject}`);
    this.logger.log(`Body preview: ${body.substring(0, 100)}...`);
  }

  async testConnection(): Promise<boolean> {
    this.logger.log('Email connection test (stub)');
    return true;
  }

  private extractBeaconId(text: string): string {
    const hexPattern = /\\b[A-F0-9]{15}\\b/i;
    const match = text.match(hexPattern);
    return match ? match[0].toUpperCase() : 'UNKNOWN';
  }

  private detectFrequency(text: string): string {
    const text_lower = text.toLowerCase();
    
    if (text_lower.includes('406') && text_lower.includes('121')) {
      return 'both';
    } else if (text_lower.includes('406')) {
      return '406';
    } else if (text_lower.includes('121')) {
      return '121.5';
    }
    
    return '406';
  }
}'''
    
    email_service = SRC_PATH / "services" / "email.service.ts"
    email_service.write_text(email_service_content, encoding='utf-8')
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω email.service.ts –¥–ª—è Sequelize")
    
    # 7. –£–¥–∞–ª—è–µ–º TypeORM –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ package.json (–∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    print("\nüì¶ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å TypeORM –ø–∞–∫–µ—Ç—ã:")
    print("npm uninstall @nestjs/typeorm typeorm")
    print("\n‚úÖ –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –≤ –±—É–¥—É—â–µ–º")
    
    print("\n‚ú® –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API: node test-api.js")

if __name__ == "__main__":
    main()