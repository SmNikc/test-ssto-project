name: CI · Docker Debug Build + Compose Smoke

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-docker-debug-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-debug:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: "1"
      COMPOSE_DOCKER_CLI_BUILD: "1"
      API_URL: "http://localhost:3001"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker info
        run: |
          docker version
          docker info

      - name: Set up QEMU (multi-arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Buildx layers
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache
            /tmp/.buildx-cache-new
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Validate compose config
        run: |
          # Если есть override, compose сам его подхватит
          docker compose config >/dev/null

      - name: Build images via Compose (debug, no push)
        run: |
          # Явно тянем свежие базовые образы, прогресс в лог
          docker compose build --pull --progress=plain

      - name: Bring up stack (db + backend + frontend + mailhog if present)
        run: |
          docker compose up -d
          echo "Waiting for Postgres health (service: postgres)..."
          for i in {1..40}; do
            ID=$(docker compose ps -q postgres || true)
            if [ -n "$ID" ]; then
              HS=$(docker inspect --format='{{json .State.Health.Status}}' "$ID" 2>/dev/null || echo '"unknown"')
              echo "postgres health: $HS"
              echo "$HS" | grep -q healthy && break
            fi
            sleep 3
          done

          echo "Waiting for backend /health..."
          for i in {1..40}; do
            if curl -fsS "$API_URL/health" >/dev/null 2>&1; then
              echo "Backend is healthy"
              break
            fi
            sleep 3
          done

      - name: Install test tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Smoke test (login → create request → TEST signal → PDF)
        shell: bash
        run: |
          API="$API_URL"

          echo "[SMOKE] /health"
          curl -fsS "$API/health" | jq -r .

          echo "[SMOKE] login (operator)"
          TOK=$(curl -fsS -X POST "$API/api/auth/login" -H 'Content-Type: application/json' \
            -d '{"username":"operator","password":"operator"}' | jq -r '.access_token')
          test -n "$TOK"

          echo "[SMOKE] create request"
          REQ=$(curl -fsS -X POST "$API/api/requests" -H "Authorization: Bearer $TOK" -H 'Content-Type: application/json' \
            -d '{"terminal_number":"TST-0001","vessel_name":"M/V TESTER","mmsi":"273123456","owner_email":"owner@example.com"}' | jq -r '.id')
          echo "request id=$REQ"

          echo "[SMOKE] send TEST signal"
          SIG=$(curl -fsS -X POST "$API/api/signals" -H "Authorization: Bearer $TOK" -H 'Content-Type: application/json' \
            -d '{"signal_type":"TEST","terminal_number":"TST-0001","payload":{"source":"ci-debug"}}' | jq -r '.id')
          echo "signal id=$SIG"

          echo "[SMOKE] generate PDF"
          curl -fsS -X POST "$API/api/signals/generate-report/$SIG" -H "Authorization: Bearer $TOK" -o report.pdf
          test -s report.pdf

      - name: Collect Docker logs
        if: always()
        run: |
          {
            echo "=== docker compose ps ==="
            docker compose ps
            echo
            echo "=== logs: backend ==="
            docker compose logs --no-color --tail=500 backend || true
            echo
            echo "=== logs: postgres ==="
            docker compose logs --no-color --tail=200 postgres || true
            echo
            echo "=== logs: frontend ==="
            docker compose logs --no-color --tail=200 frontend || true
            echo
            echo "=== logs: mailhog (if any) ==="
            docker compose logs --no-color --tail=200 mailhog || true
          } > docker-debug-logs.txt

      - name: Upload artifacts (PDF + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-debug-artifacts
          path: |
            report.pdf
            docker-debug-logs.txt
          if-no-files-found: warn

      - name: Tear down
        if: always()
        run: |
          docker compose down -v || true

      - name: Rotate Buildx cache (optional)
        if: always()
        run: |
          # Смягчаем рост кеша: переносим в "new" и чистим "old"
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
