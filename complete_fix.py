#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ index.html - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç: –¥–≤–æ–π–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É, JS –≤–Ω–µ —Ç–µ–≥–æ–≤, –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
"""

import re
import sys
from pathlib import Path

def fix_mojibake(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–æ–π–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 -> Latin-1"""
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è mojibake
        return text.encode('latin-1', errors='ignore').decode('utf-8', errors='ignore')
    except:
        return text

def wrap_js_in_script_tags(html):
    """–ù–∞—Ö–æ–¥–∏—Ç JS –∫–æ–¥ –≤–Ω–µ —Ç–µ–≥–æ–≤ <script> –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JS –∫–æ–¥–∞
    js_patterns = [
        r'(class\s+\w+\s*\{)',
        r'(function\s+\w+\s*\([^)]*\)\s*\{)',
        r'(const\s+\w+\s*=)',
        r'(let\s+\w+\s*=)',
        r'(var\s+\w+\s*=)',
        r'(document\.addEventListener)',
        r'(window\.\w+\s*=)',
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JS –∫–æ–¥ –≤–Ω–µ —Ç–µ–≥–æ–≤ script
    for pattern in js_patterns:
        matches = list(re.finditer(pattern, html))
        for match in matches:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ script —Ç–µ–≥–∞
            before = html[:match.start()]
            open_scripts = before.count('<script')
            close_scripts = before.count('</script>')
            
            # –ï—Å–ª–∏ JS –≤–Ω–µ script —Ç–µ–≥–∞
            if open_scripts <= close_scripts:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ JS –±–ª–æ–∫–∞
                js_start = match.start()
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü JS –±–ª–æ–∫–∞ (–ø–µ—Ä–µ–¥ </body> –∏–ª–∏ </html>)
                js_end_patterns = ['</body>', '</html>', '<div', '<section']
                js_end = len(html)
                
                for end_pattern in js_end_patterns:
                    pos = html.find(end_pattern, js_start)
                    if pos != -1 and pos < js_end:
                        js_end = pos
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JS –∫–æ–¥
                js_code = html[js_start:js_end]
                
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ script —Ç–µ–≥
                wrapped = f'\n<script type="text/javascript">\n{js_code}\n</script>\n'
                
                # –ó–∞–º–µ–Ω—è–µ–º –≤ HTML
                html = html[:js_start] + wrapped + html[js_end:]
                
                print(f"  ‚úì –û–±–µ—Ä–Ω—É—Ç JS –±–ª–æ–∫ –≤ <script> —Ç–µ–≥–∏ (–ø–æ–∑–∏—Ü–∏—è {js_start})")
                break  # –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –æ–¥–∏–Ω –±–ª–æ–∫, –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∏—Å–∫
    
    return html

def fix_event_handlers(html):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º switchTab –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ event
    html = re.sub(
        r'onclick="switchTab\(\'([^\']+)\'\)"',
        r'onclick="switchTab(event, \'\1\')"',
        html
    )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é switchTab
    html = re.sub(
        r'function\s+switchTab\s*\(\s*tabName\s*\)',
        'function switchTab(event, tabName)',
        html
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º event.target –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    html = re.sub(
        r'event\.target',
        '(event && event.currentTarget ? event.currentTarget : event.target)',
        html
    )
    
    return html

def remove_duplicates(html):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã"""
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    func_pattern = r'function\s+(\w+)\s*\([^)]*\)\s*\{[^}]*\}'
    functions = {}
    
    for match in re.finditer(func_pattern, html, re.DOTALL):
        func_name = match.group(1)
        if func_name not in functions:
            functions[func_name] = match.group(0)
        else:
            # –î—É–±–ª–∏–∫–∞—Ç - —É–¥–∞–ª—è–µ–º
            html = html.replace(match.group(0), '')
            print(f"  ‚úì –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}")
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ DOMContentLoaded
    loaded_pattern = r'document\.addEventListener\([\'"]DOMContentLoaded[\'"][^}]+\}\);?'
    loaded_matches = list(re.finditer(loaded_pattern, html, re.DOTALL))
    
    if len(loaded_matches) > 1:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
        for match in loaded_matches[1:]:
            html = html.replace(match.group(0), '')
        print(f"  ‚úì –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ DOMContentLoaded listeners")
    
    return html

def fix_css_selectors(html):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã"""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç—ã
    html = re.sub(
        r'#map\s*\{\s*height:\s*\d+px;',
        '#map-container { height: 500px;',
        html
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è map-container –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if '#map-container' not in html and 'id="map-container"' in html:
        style_addition = """
        #map-container { 
            height: 500px; 
            width: 100%;
            position: relative;
        }"""
        html = html.replace('</style>', style_addition + '\n</style>')
    
    return html

def process_html_content(html):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML, –∏—Å–ø—Ä–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã"""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ç–µ–≥–∏ –∏ —Ç–µ–∫—Å—Ç
    parts = re.split(r'(<[^>]+>)', html)
    
    fixed_parts = []
    for part in parts:
        if part.startswith('<'):
            # –≠—Ç–æ —Ç–µ–≥ - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            fixed_parts.append(part)
        else:
            # –≠—Ç–æ —Ç–µ–∫—Å—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º mojibake
            fixed_text = fix_mojibake(part)
            fixed_parts.append(fixed_text)
    
    return ''.join(fixed_parts)

def ensure_meta_charset(html):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ meta charset UTF-8"""
    
    if '<meta charset="UTF-8">' not in html and '<meta charset="utf-8">' not in html:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ <head>
        html = html.replace('<head>', '<head>\n    <meta charset="UTF-8">')
    
    return html

def fix_structure_issues(html):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    # –£–±–∏—Ä–∞–µ–º onclick –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç
    html = html.replace('<style onclick=', '<style ')
    html = html.replace('</div onclick=', '</div><div onclick=')
    html = html.replace('<script onclick=', '<script ')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
    if html.count('<script') > html.count('</script>'):
        html += '\n</script>'
    
    return html

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    input_path = Path(r"C:\Projects\test-ssto-project\index.html")
    
    if not input_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return False
    
    print(f"üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {input_path}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(input_path, 'r', encoding='utf-8', errors='ignore') as f:
            html = f.read()
    except:
        with open(input_path, 'r', encoding='latin-1', errors='ignore') as f:
            html = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = input_path.with_suffix('.html.backup_complete')
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(html)
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    print("\nüîß –ü—Ä–∏–º–µ–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º mojibake (–¥–≤–æ–π–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É)
    print("1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏...")
    html = process_html_content(html)
    
    # 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º JS –≤ script —Ç–µ–≥–∏
    print("2. –û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ JS –∫–æ–¥–∞ –≤ <script> —Ç–µ–≥–∏...")
    html = wrap_js_in_script_tags(html)
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
    html = fix_event_handlers(html)
    
    # 4. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("4. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    html = remove_duplicates(html)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    print("5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CSS –¥–ª—è –∫–∞—Ä—Ç—ã...")
    html = fix_css_selectors(html)
    
    # 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    print("6. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...")
    html = fix_structure_issues(html)
    
    # 7. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º UTF-8
    print("7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ meta charset UTF-8...")
    html = ensure_meta_charset(html)
    
    # 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º title
    html = re.sub(
        r'<title>.*?</title>',
        '<title>–ú–æ–¥—É–ª—å –¢–ï–°–¢ –°–°–¢–û - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</title>',
        html,
        flags=re.DOTALL
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    with open(input_path, 'w', encoding='utf-8', errors='ignore') as f:
        f.write(html)
    
    print("\n" + "="*60)
    print("‚úÖ –§–ê–ô–õ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù!")
    print("="*60)
    
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    print("  ‚úì –î–≤–æ–π–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (mojibake)")
    print("  ‚úì JavaScript –æ–±–µ—Ä–Ω—É—Ç –≤ <script> —Ç–µ–≥–∏")
    print("  ‚úì –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä event)")
    print("  ‚úì –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("  ‚úì CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã")
    print("  ‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã HTML")
    print("  ‚úì Meta charset UTF-8")
    
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û:")
    print("  1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (Ctrl+F5)")
    print("  2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ JavaScript")
    print("  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)