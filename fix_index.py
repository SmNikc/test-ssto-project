#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è index.html
–í–µ—Ä—Å–∏—è: 1.0
"""

import re
import os
import shutil
from datetime import datetime

def backup_file(filepath):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = f"{filepath}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(filepath, backup_path)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def replace_function(content, func_name, new_code):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    pattern = rf'function {func_name}\(\)[^{{]*\{{(?:[^{{}}]|\{{[^{{}}]*\}})*\}}'
    
    matches = list(re.finditer(pattern, content, re.DOTALL))
    if matches:
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {func_name}")
        content = content[:matches[0].start()] + new_code + content[matches[0].end():]
    else:
        print(f"  ‚ö† –§—É–Ω–∫—Ü–∏—è {func_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return content

def replace_class(content, class_name, new_code):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∞—Å—Å–∞ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    pattern = rf'class {class_name}\s*\{{(?:[^{{}}]|\{{(?:[^{{}}]|\{{[^{{}}]*\}})*\}})*\}}'
    
    matches = list(re.finditer(pattern, content, re.DOTALL))
    if matches:
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å {class_name}")
        content = content[:matches[0].start()] + new_code + content[matches[0].end():]
    else:
        print(f"  ‚ö† –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return content

def update_table_headers(content):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è IMO"""
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
    pattern1 = r'(<div id="requests"[^>]*>.*?<thead>.*?<tr>)(.*?)(<\/tr>.*?<\/thead>)'
    
    def replace_requests_header(match):
        if 'IMO' in match.group(2):
            return match.group(0)
        
        new_headers = '''
                    <th>ID</th>
                    <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                    <th>–°—É–¥–Ω–æ</th>
                    <th>MMSI</th>
                    <th>IMO</th>
                    <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                '''
        return match.group(1) + new_headers + match.group(3)
    
    content = re.sub(pattern1, replace_requests_header, content, flags=re.DOTALL)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    pattern2 = r'(<div id="signals"[^>]*>.*?<thead>.*?<tr>)(.*?)(<\/tr>.*?<\/thead>)'
    
    def replace_signals_header(match):
        if 'IMO' in match.group(2):
            return match.group(0)
        
        new_headers = '''
                    <th>ID</th>
                    <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                    <th>–°—É–¥–Ω–æ</th>
                    <th>MMSI</th>
                    <th>IMO</th>
                    <th>–¢–∏–ø</th>
                    <th>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è</th>
                    <th>–¢–µ—Å—Ç/–¢—Ä–µ–≤–æ–≥–∞</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                '''
        return match.group(1) + new_headers + match.group(3)
    
    content = re.sub(pattern2, replace_signals_header, content, flags=re.DOTALL)
    
    print("  ‚úì –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    return content

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    filepath = 'index.html'
    
    if not os.path.exists(filepath):
        print(f"‚ùå –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filepath}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(filepath):,} –±–∞–π—Ç\n")
    
    backup_path = backup_file(filepath)
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:\n")
        
        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ loadRequests
        print("1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ loadRequests...")
        new_loadRequests = '''        function loadRequests() {
            const requests = JSON.parse(localStorage.getItem('testRequests') || '[]');
            const tbody = document.getElementById('requests-tbody');
            
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            requests.forEach(request => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${request.id}</td>
                    <td><strong>${request.stationNumber}</strong></td>
                    <td>${request.vesselName}</td>
                    <td>${request.mmsi}</td>
                    <td>${request.imo || '-'}</td>
                    <td>${formatDate(request.testDate)}</td>
                    <td><span class="status-badge status-${request.status}">${request.status}</span></td>
                    <td>
                        <button onclick="viewRequest('${request.id}')" class="btn btn-secondary">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                        ${request.status === 'pending' ? 
                            `<button onclick="confirmRequest('${request.id}')" class="btn btn-primary">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>` : 
                            `<button onclick="generateConfirmationPDF('${request.id}')" class="btn btn-primary">üìÑ PDF</button>`
                        }
                    </td>
                `;
                tbody.appendChild(row);
            });
        }'''
        content = replace_function(content, 'loadRequests', new_loadRequests)
        
        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ loadSignals
        print("\n2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ loadSignals...")
        new_loadSignals = '''        function loadSignals() {
            const signals = JSON.parse(localStorage.getItem('signals') || '[]');
            const tbody = document.getElementById('signals-tbody');
            
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            signals.forEach(signal => {
                const vessel = app.vesselDB.findByStationNumber(signal.stationNumber);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${signal.id}</td>
                    <td><strong>${signal.stationNumber}</strong></td>
                    <td>${vessel ? vessel.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                    <td>${signal.mmsi || '-'}</td>
                    <td>${vessel ? vessel.imo || '-' : '-'}</td>
                    <td>${signal.type}</td>
                    <td>${formatDate(signal.receivedAt)}</td>
                    <td>${signal.isTest ? '‚úÖ –¢–µ—Å—Ç' : 'üö® –¢—Ä–µ–≤–æ–≥–∞'}</td>
                    <td>
                        <button onclick="viewSignal('${signal.id}')" class="btn btn-secondary">–î–µ—Ç–∞–ª–∏</button>
                        ${!signal.isTest ? 
                            `<button onclick="sendToPoiskMore('${signal.id}')" class="btn btn-primary">–í –ü–æ–∏—Å–∫-–ú–æ—Ä–µ</button>` : 
                            ''
                        }
                    </td>
                `;
                tbody.appendChild(row);
            });
        }'''
        content = replace_function(content, 'loadSignals', new_loadSignals)
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ExcelDataLoader
        print("\n3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ExcelDataLoader...")
        new_ExcelDataLoader = '''class ExcelDataLoader {
            constructor() {
                this.setupHandlers();
            }

            setupHandlers() {
                const input = document.getElementById('excel-upload');
                if (input) {
                    input.addEventListener('change', (e) => {
                        const file = e.target.files[0];
                        if (file) {
                            this.loadExcelFile(file);
                        }
                    });
                }
            }

            async loadExcelFile(file) {
                showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel...', 'info');

                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = e.target.result;
                        const workbook = XLSX.read(data, { type: 'binary' });
                        
                        let vesselsLoaded = 0;
                        let requestsLoaded = 0;
                        let signalsLoaded = 0;

                        workbook.SheetNames.forEach(sheetName => {
                            const worksheet = workbook.Sheets[sheetName];
                            const jsonData = XLSX.utils.sheet_to_json(worksheet);
                            
                            const sheetNameLower = sheetName.toLowerCase();
                            
                            if (sheetNameLower.includes('—Å—É–¥') || sheetNameLower.includes('vessel') || 
                                sheetNameLower.includes('—Ç–µ—Ä–º–∏–Ω–∞–ª') || sheetNameLower.includes('terminal')) {
                                vesselsLoaded += this.loadVessels(jsonData);
                            } 
                            else if (sheetNameLower.includes('–∑–∞—è–≤–∫') || sheetNameLower.includes('request')) {
                                requestsLoaded += this.loadRequests(jsonData);
                            }
                            else if (sheetNameLower.includes('—Å–∏–≥–Ω–∞–ª') || sheetNameLower.includes('signal')) {
                                signalsLoaded += this.loadSignals(jsonData);
                            }
                            else {
                                this.autoDetectAndLoad(jsonData);
                            }
                        });

                        loadRequests();
                        loadSignals();
                        loadTerminals();
                        loadDashboardData();
                        
                        if (window.mapManager && window.mapManager.map) {
                            window.mapManager.loadSignalsToMap();
                        }

                        showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${vesselsLoaded} —Å—É–¥–æ–≤, ${requestsLoaded} –∑–∞—è–≤–æ–∫, ${signalsLoaded} —Å–∏–≥–Ω–∞–ª–æ–≤`, 'success');
                        
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel:', error);
                        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message, 'error');
                    }
                };
                reader.readAsBinaryString(file);
            }

            parseVesselName(value) {
                if (!value) return { name: '', mmsi: '', imo: '' };
                
                const str = String(value).trim();
                let name = str;
                let mmsi = '';
                let imo = '';
                
                const mmsiMatch = str.match(/\\b(\\d{9})\\b/);
                if (mmsiMatch) {
                    mmsi = mmsiMatch[1];
                    name = str.replace(mmsiMatch[0], '').trim();
                }
                
                const imoMatch = str.match(/\\b(\\d{7})\\b/);
                if (imoMatch) {
                    imo = imoMatch[1];
                    name = str.replace(imoMatch[0], '').trim();
                }
                
                name = name.replace(/[,;:\\-]+$/, '').trim();
                
                return { name, mmsi, imo };
            }

            loadVessels(data) {
                let loaded = 0;
                const vessels = app.vesselDB.vessels;
                
                data.forEach(row => {
                    try {
                        const stationNumber = String(
                            row['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏'] || 
                            row['–ù–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞'] || 
                            row['Station Number'] || 
                            row['Terminal'] || 
                            ''
                        ).trim();
                        
                        const vesselData = this.parseVesselName(
                            row['–°—É–¥–Ω–æ'] || 
                            row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞'] || 
                            row['Vessel'] || 
                            row['Vessel Name'] || 
                            ''
                        );
                        
                        const mmsi = row['MMSI'] || vesselData.mmsi || '';
                        const imo = row['IMO'] || vesselData.imo || '';
                        
                        if (stationNumber && stationNumber.match(/^\\d{9}$/)) {
                            let vessel = vessels.find(v => 
                                v.stationNumbers && v.stationNumbers.includes(stationNumber)
                            );
                            
                            if (!vessel) {
                                vessel = {
                                    id: `V${Date.now()}-${loaded}`,
                                    name: vesselData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å—É–¥–Ω–æ',
                                    mmsi: String(mmsi).padStart(9, '0'),
                                    imo: String(imo),
                                    stationNumbers: [stationNumber],
                                    owner: row['–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü'] || row['Owner'] || '',
                                    operator: row['–û–ø–µ—Ä–∞—Ç–æ—Ä'] || row['Operator'] || '',
                                    email: row['Email'] || row['–ü–æ—á—Ç–∞'] || '',
                                    satcomType: row['–¢–∏–ø'] || row['Type'] || 'INMARSAT',
                                    status: 'ACTIVE',
                                    lastTest: row['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç'] || null,
                                    nextTest: row['–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç'] || null
                                };
                                
                                vessels.push(vessel);
                                loaded++;
                            }
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Å—É–¥–Ω–∞:', error, row);
                    }
                });
                
                app.vesselDB.save();
                return loaded;
            }

            loadRequests(data) {
                let loaded = 0;
                const requests = JSON.parse(localStorage.getItem('testRequests') || '[]');
                
                data.forEach(row => {
                    try {
                        const stationNumber = String(
                            row['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏'] || 
                            row['Station Number'] || 
                            ''
                        ).trim();
                        
                        const vesselData = this.parseVesselName(
                            row['–°—É–¥–Ω–æ'] || row['Vessel'] || ''
                        );
                        
                        if (stationNumber && stationNumber.match(/^\\d{9}$/)) {
                            const request = {
                                id: row['ID'] || `REQ-${Date.now()}-${loaded}`,
                                stationNumber: stationNumber,
                                vesselName: vesselData.name,
                                mmsi: row['MMSI'] || vesselData.mmsi || '',
                                imo: row['IMO'] || vesselData.imo || '',
                                shipOwner: row['–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü'] || '',
                                email: row['Email'] || '',
                                testDate: this.parseDate(row['–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞'] || row['Test Date']),
                                testTime: row['–í—Ä–µ–º—è'] || '',
                                satcomType: row['–¢–∏–ø'] || 'INMARSAT',
                                status: this.parseStatus(row['–°—Ç–∞—Ç—É—Å'] || row['Status']),
                                createdAt: new Date().toISOString()
                            };
                            
                            if (!requests.find(r => r.stationNumber === request.stationNumber && 
                                                   r.testDate === request.testDate)) {
                                requests.push(request);
                                loaded++;
                            }
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∑–∞—è–≤–∫–∏:', error, row);
                    }
                });
                
                localStorage.setItem('testRequests', JSON.stringify(requests));
                return loaded;
            }

            loadSignals(data) {
                let loaded = 0;
                const signals = JSON.parse(localStorage.getItem('signals') || '[]');
                
                data.forEach(row => {
                    try {
                        const stationNumber = String(
                            row['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏'] || 
                            row['–¢–µ—Ä–º–∏–Ω–∞–ª'] || 
                            row['Station'] || 
                            ''
                        ).trim();
                        
                        if (stationNumber && stationNumber.match(/^\\d{9}$/)) {
                            const signal = {
                                id: row['ID'] || `SIG-${Date.now()}-${loaded}`,
                                stationNumber: stationNumber,
                                mmsi: String(row['MMSI'] || '').trim(),
                                type: row['–¢–∏–ø'] || row['Type'] || 'INMARSAT',
                                coordinates: this.parseCoordinates(
                                    row['–®–∏—Ä–æ—Ç–∞'] || row['Lat'],
                                    row['–î–æ–ª–≥–æ—Ç–∞'] || row['Lon']
                                ),
                                receivedAt: this.parseDate(row['–ü–æ–ª—É—á–µ–Ω'] || row['Received']) || new Date().toISOString(),
                                isTest: this.parseBoolean(row['–¢–µ—Å—Ç'] || row['Test']),
                                status: row['–°—Ç–∞—Ç—É—Å'] || 'received'
                            };
                            
                            const vessel = app.vesselDB.findByStationNumber(stationNumber);
                            if (vessel) {
                                signal.vesselName = vessel.name;
                                signal.mmsi = signal.mmsi || vessel.mmsi;
                            }
                            
                            signals.push(signal);
                            loaded++;
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Å–∏–≥–Ω–∞–ª–∞:', error, row);
                    }
                });
                
                localStorage.setItem('signals', JSON.stringify(signals));
                return loaded;
            }

            autoDetectAndLoad(data) {
                if (!data || data.length === 0) return;
                
                const firstRow = data[0];
                const keys = Object.keys(firstRow);
                
                if (keys.some(k => k.toLowerCase().includes('—Å—Ç–æ–π–∫') || k.toLowerCase().includes('terminal'))) {
                    if (keys.some(k => k.toLowerCase().includes('—à–∏—Ä–æ—Ç–∞') || k.toLowerCase().includes('lat'))) {
                        this.loadSignals(data);
                    } else if (keys.some(k => k.toLowerCase().includes('–¥–∞—Ç–∞ —Ç–µ—Å—Ç') || k.toLowerCase().includes('test date'))) {
                        this.loadRequests(data);
                    } else {
                        this.loadVessels(data);
                    }
                }
            }

            parseDate(value) {
                if (!value) return null;
                
                const date = new Date(value);
                if (!isNaN(date.getTime())) {
                    return date.toISOString().split('T')[0];
                }
                
                const parts = String(value).split(/[.\\-\\/]/);
                if (parts.length === 3) {
                    const day = parseInt(parts[0]);
                    const month = parseInt(parts[1]) - 1;
                    const year = parseInt(parts[2]);
                    
                    if (year > 1900 && year < 2100) {
                        return new Date(year, month, day).toISOString().split('T')[0];
                    }
                }
                
                return null;
            }

            parseCoordinates(lat, lon) {
                if (!lat || !lon) return null;
                
                const latitude = parseFloat(lat);
                const longitude = parseFloat(lon);
                
                if (!isNaN(latitude) && !isNaN(longitude)) {
                    return { lat: latitude, lon: longitude };
                }
                
                return null;
            }

            parseStatus(value) {
                if (!value) return 'pending';
                
                const status = String(value).toLowerCase();
                if (status.includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥') || status.includes('confirm')) return 'confirmed';
                if (status.includes('–æ—Ç–º–µ–Ω') || status.includes('cancel')) return 'cancelled';
                if (status.includes('–æ–∂–∏–¥') || status.includes('pending')) return 'pending';
                
                return 'pending';
            }

            parseBoolean(value) {
                if (typeof value === 'boolean') return value;
                const str = String(value).toLowerCase();
                return str === '–¥–∞' || str === 'yes' || str === 'true' || str === '1';
            }

            openFileDialog() {
                document.getElementById('excel-upload').click();
            }
        }'''
        content = replace_class(content, 'ExcelDataLoader', new_ExcelDataLoader)
        
        # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü
        print("\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü...")
        content = update_table_headers(content)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"\n‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        print(f"üìè –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"\nüíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        print(f"üîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞: cp {backup_path} {filepath}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        shutil.copy2(backup_path, filepath)
        print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()