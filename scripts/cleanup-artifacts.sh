#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<USAGE
Usage: $0 [-n] [-f]

Options:
  -n  Dry run (default). Only list files that would be removed.
  -f  Force deletion of matching artifacts.

This helper removes backup/apply artifacts generated by maintenance scripts:
  * apply-backup-*
  * backup-*
  * backup_*
  * index_14_36.html.* backups
  * *.before_* html snapshots
  * *.final_backup_* html snapshots

Example:
  $0          # list artifacts
  $0 -f       # delete artifacts
  $0 -n       # explicit dry-run
USAGE
}

force=false
while getopts ":nfh" opt; do
  case "$opt" in
    n) ;; # keep default dry-run
    f) force=true ;;
    h) usage; exit 0 ;;
    *) usage >&2; exit 1 ;;
  esac
done

shift $((OPTIND-1))

patterns=(
  "apply-backup-*"
  "backup-*"
  "backup_*"
  "index_14_36.html.*"
  "*.before_*"
  "*.final_backup_*"
)

find_cmd=(find . \( -path "./node_modules" -o -path "./.git" \) -prune -o \()
for pattern in "${patterns[@]}"; do
  find_cmd+=( -name "$pattern" -o )
done
unset 'find_cmd[-1]' # remove trailing -o
find_cmd+=( \) -print )

mapfile -t matches < <("${find_cmd[@]}")

if (( ${#matches[@]} == 0 )); then
  echo "No matching artifacts found."
  exit 0
fi

echo "Found ${#matches[@]} artifact(s):"
printf '  %s\n' "${matches[@]}"

if [[ "$force" == true ]]; then
  printf '\nDeleting artifacts...\n'
  rm -rf -- "${matches[@]}"
  echo "Cleanup completed."
else
  printf '\nDry run mode. Re-run with -f to delete these artifacts.\n'
fi
