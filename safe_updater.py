#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –°–°–¢–û
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
- –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript
–ü—É—Ç—å: C:\Projects\test-ssto-project\safe_updater.py
"""

import os
import re
import json
import shutil
from datetime import datetime
from pathlib import Path
import hashlib

class SafeUpdater:
    def __init__(self, project_dir=r'C:\Projects\test-ssto-project\frontend-static'):
        self.project_dir = Path(project_dir)
        self.target_file = self.project_dir / 'index_14_36.html'
        self.backup_dir = self.project_dir / 'backups'
        self.versions_file = self.project_dir / 'versions.json'
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
        self.versions = self.load_versions()
    
    def load_versions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π"""
        if self.versions_file.exists():
            with open(self.versions_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    
    def save_versions(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π"""
        with open(self.versions_file, 'w', encoding='utf-8') as f:
            json.dump(self.versions, f, indent=2, ensure_ascii=False)
    
    def get_file_hash(self, filepath):
        """–ü–æ–ª—É—á–∞–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        with open(filepath, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    
    def create_backup(self, description=""):
        """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        if not self.target_file.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.target_file}")
            return None
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        file_hash = self.get_file_hash(self.target_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
        if self.versions and self.versions[-1]['hash'] == file_hash:
            print("‚ÑπÔ∏è –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏")
            return self.versions[-1]['backup']
        
        backup_name = f"index_14_36_{timestamp}.html"
        backup_path = self.backup_dir / backup_name
        
        shutil.copy(self.target_file, backup_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
        version_info = {
            'timestamp': timestamp,
            'backup': str(backup_name),
            'hash': file_hash,
            'description': description
        }
        self.versions.append(version_info)
        self.save_versions()
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        return backup_path
    
    def list_versions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π"""
        print("\nüìã –ò–°–¢–û–†–ò–Ø –í–ï–†–°–ò–ô:")
        print("-" * 70)
        
        if not self.versions:
            print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
            return
        
        for i, version in enumerate(self.versions[-10:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤–µ—Ä—Å–∏–π
            timestamp = version['timestamp']
            desc = version['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
            print(f"{i}. {timestamp}: {desc}")
    
    def rollback(self, version_index=None):
        """–û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"""
        if not self.versions:
            print("‚ùå –ù–µ—Ç –≤–µ—Ä—Å–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            return False
        
        if version_index is None:
            # –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            version = self.versions[-2] if len(self.versions) > 1 else self.versions[-1]
        else:
            try:
                version = self.versions[version_index]
            except IndexError:
                print(f"‚ùå –í–µ—Ä—Å–∏—è {version_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
        backup_file = self.backup_dir / version['backup']
        if not backup_file.exists():
            print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º
        self.create_backup(f"–ü–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º –∫ {version['timestamp']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç
        shutil.copy(backup_file, self.target_file)
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏ {version['timestamp']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {version['description']}")
        return True
    
    def add_localstorage(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É LocalStorage"""
        print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ LocalStorage...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.create_backup("–ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º LocalStorage")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        content = self.target_file.read_text(encoding='utf-8')
        
        # –ö–æ–¥ –¥–ª—è LocalStorage
        localstorage_code = """
        // ===================== LocalStorage Support =====================
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        function saveToLocalStorage() {
            try {
                localStorage.setItem('ssto_requests', JSON.stringify(storage.requests));
                localStorage.setItem('ssto_signals', JSON.stringify(storage.signals));
                localStorage.setItem('ssto_terminals', JSON.stringify(storage.terminals));
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ LocalStorage');
            } catch(e) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        function loadFromLocalStorage() {
            try {
                const requests = localStorage.getItem('ssto_requests');
                const signals = localStorage.getItem('ssto_signals');
                const terminals = localStorage.getItem('ssto_terminals');
                
                if (requests) storage.requests = JSON.parse(requests);
                if (signals) storage.signals = JSON.parse(signals);
                if (terminals) storage.terminals = JSON.parse(terminals);
                
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ LocalStorage');
                console.log('  –ó–∞—è–≤–∫–∏:', storage.requests.length);
                console.log('  –°–∏–≥–Ω–∞–ª—ã:', storage.signals.length);
                console.log('  –¢–µ—Ä–º–∏–Ω–∞–ª—ã:', storage.terminals.length);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateDashboard();
                loadRequests();
                loadSignals();
                loadTerminals();
            } catch(e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
            }
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        function clearAllData() {
            if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
                localStorage.removeItem('ssto_requests');
                localStorage.removeItem('ssto_signals');
                localStorage.removeItem('ssto_terminals');
                storage.requests = [];
                storage.signals = [];
                storage.terminals = [];
                updateDashboard();
                loadRequests();
                loadSignals();
                loadTerminals();
                alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
            }
        }
"""
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è storage)
        insert_marker = "const storage = {"
        insert_pos = content.find(insert_marker)
        
        if insert_pos == -1:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –æ–±—ä–µ–∫—Ç–∞ storage
        insert_pos = content.find("};", insert_pos) + 2
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ LocalStorage
        content = content[:insert_pos] + "\n" + localstorage_code + content[insert_pos:]
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        modifications = [
            # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            ("storage.requests.push(request);", 
             "storage.requests.push(request);\n            saveToLocalStorage();"),
            
            # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ("alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');",
             "saveToLocalStorage();\n            alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');"),
            
            # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            ("request.status = 'confirmed';",
             "request.status = 'confirmed';\n                saveToLocalStorage();"),
            
            # –í DOMContentLoaded
            ("// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n            updateDashboard();",
             "// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è\n            loadFromLocalStorage();")
        ]
        
        for old, new in modifications:
            content = content.replace(old, new, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        clear_button = '<button class="btn btn-secondary" onclick="clearAllData()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</button>'
        content = content.replace(
            '<button class="btn btn-primary" onclick="systemCheck()">üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</button>',
            f'<button class="btn btn-primary" onclick="systemCheck()">üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</button>\n                {clear_button}'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        self.target_file.write_text(content, encoding='utf-8')
        
        print("‚úÖ LocalStorage –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
        print("  ‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
        print("  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("  ‚Ä¢ –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å")
        
        return True
    
    def add_excel_parser(self):
        """–î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel"""
        print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Excel...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.create_backup("–ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä—Å–µ—Ä–∞ Excel")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        content = self.target_file.read_text(encoding='utf-8')
        
        # –ö–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞ Excel
        excel_parser_code = """
        // ===================== Excel Parser =====================
        function uploadExcel() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.xlsx,.xls';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(event) {
                    try {
                        const data = event.target.result;
                        const workbook = XLSX.read(data, {type: 'binary'});
                        
                        let totalImported = 0;
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
                        workbook.SheetNames.forEach(sheetName => {
                            const sheet = workbook.Sheets[sheetName];
                            const jsonData = XLSX.utils.sheet_to_json(sheet);
                            
                            jsonData.forEach(row => {
                                // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (9 —Ü–∏—Ñ—Ä)
                                const terminalNumber = String(row['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏'] || row['Terminal'] || '').replace(/\\D/g, '').slice(-9);
                                
                                // –ü–∞—Ä—Å–∏–º MMSI (9 —Ü–∏—Ñ—Ä)
                                const mmsi = String(row['MMSI'] || '').replace(/\\D/g, '').slice(-9);
                                
                                if (terminalNumber || mmsi) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª
                                    const exists = storage.terminals.find(t => 
                                        t.terminal_number === terminalNumber || t.mmsi === mmsi
                                    );
                                    
                                    if (!exists) {
                                        storage.terminals.push({
                                            terminal_number: terminalNumber,
                                            vessel_name: row['–°—É–¥–Ω–æ'] || row['Vessel'] || '',
                                            mmsi: mmsi,
                                            type: (row['–¢–∏–ø'] || '–ò–ù–ú–ê–†–°–ê–¢').toUpperCase().includes('–ò–†–ò–î–ò–£–ú') ? '–ò–†–ò–î–ò–£–ú' : '–ò–ù–ú–ê–†–°–ê–¢',
                                            owner: row['–í–ª–∞–¥–µ–ª–µ—Ü'] || row['Owner'] || '',
                                            lastTest: row['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç'] || row['Last Test'] || '',
                                            status: 'active'
                                        });
                                        totalImported++;
                                    }
                                }
                            });
                        });
                        
                        if (totalImported > 0) {
                            saveToLocalStorage();
                            loadTerminals();
                            updateDashboard();
                        }
                        
                        alert('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\\n' +
                              '–ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ' + totalImported + '\\n' +
                              '–í—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: ' + storage.terminals.length);
                        
                    } catch(error) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel:', error);
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
                    }
                };
                reader.readAsBinaryString(file);
            };
            input.click();
        }
"""
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é uploadExcel
        pattern = r"function uploadExcel\(\) \{ alert\('–ó–∞–≥—Ä—É–∑–∫–∞ Excel –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'\); \}"
        content = re.sub(pattern, excel_parser_code.strip(), content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        self.target_file.write_text(content, encoding='utf-8')
        
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä Excel –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞:")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤")
        print("  ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ MMSI –∏ IMO")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        print("  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏—Å—Ç–æ–≤")
        
        return True
    
    def test_javascript(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript...")
        
        content = self.target_file.read_text(encoding='utf-8')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JavaScript
        script_match = re.search(r'<script[^>]*>(.*?)</script>', content, re.DOTALL)
        if not script_match:
            print("‚ùå JavaScript –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        js_code = script_match.group(1)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            (js_code.count('{') == js_code.count('}'), "–°–∫–æ–±–∫–∏ {} —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã"),
            (js_code.count('(') == js_code.count(')'), "–°–∫–æ–±–∫–∏ () —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã"),
            (js_code.count('[') == js_code.count(']'), "–°–∫–æ–±–∫–∏ [] —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã"),
            ('function uploadExcel' in js_code, "–§—É–Ω–∫—Ü–∏—è uploadExcel –Ω–∞–π–¥–µ–Ω–∞"),
            ('function saveToLocalStorage' in js_code or 'saveToLocalStorage' not in js_code, "LocalStorage —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"),
        ]
        
        all_ok = True
        for check, description in checks:
            if check:
                print(f"  ‚úÖ {description}")
            else:
                print(f"  ‚ùå {description}")
                all_ok = False
        
        return all_ok

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    updater = SafeUpdater()
    
    while True:
        print("\n" + "=" * 70)
        print("–ë–ï–ó–û–ü–ê–°–ù–´–ô –û–ë–ù–û–í–õ–Ø–¢–û–† –°–°–¢–û")
        print("=" * 70)
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏–∏")
        print("2. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        print("3. –î–æ–±–∞–≤–∏—Ç—å LocalStorage")
        print("4. –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä Excel")
        print("5. –û—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏")
        print("6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JavaScript")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == '1':
            updater.list_versions()
        
        elif choice == '2':
            desc = input("–û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: ").strip()
            updater.create_backup(desc)
        
        elif choice == '3':
            updater.add_localstorage()
        
        elif choice == '4':
            updater.add_excel_parser()
        
        elif choice == '5':
            updater.list_versions()
            version = input("–ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ (Enter –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π): ").strip()
            if version:
                updater.rollback(int(version) - 1)
            else:
                updater.rollback()
        
        elif choice == '6':
            updater.test_javascript()
        
        elif choice == '0':
            break

if __name__ == "__main__":
    main()