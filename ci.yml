name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install root deps
        run: npm ci

      - name: Install backend deps
        run: npm --prefix backend-nest ci

      - name: Run contract tests (includes new signals.*)
        run: npm run test:contracts

  functional:
    needs: contracts
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ssto
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mailhog:
        image: mailhog/mailhog:latest
        ports: ["8025:8025", "1025:1025"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install root deps
        run: npm ci

      - name: Install backend deps
        run: npm --prefix backend-nest ci

      - name: Build backend (if build script available)
        run: |
          if npm --prefix backend-nest run | grep -q " build"; then
            npm --prefix backend-nest run build
          else
            echo "No backend build script found, continuingâ€¦"
          fi

      - name: Start backend (docker-compose if present, else Node)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ssto
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASS: postgres
          DB_NAME: ssto
          NODE_ENV: test
        run: |
          if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ]; then
            docker compose up -d --quiet-pull
          else
            if npm --prefix backend-nest run | grep -q " start:prod"; then
              nohup npm --prefix backend-nest run start:prod >/tmp/backend.log 2>&1 &
            elif [ -f backend-nest/dist/main.js ]; then
              nohup node backend-nest/dist/main.js >/tmp/backend.log 2>&1 &
            else
              echo "WARN: cannot find backend start command or dist/main.js. Smoke may fail."
            fi
          fi
          sleep 5

      - name: Wait for /health
        env:
          API_BASE: http://localhost:3001/api
        run: bash tests/smoke/wait-for.sh "$API_BASE/health" 90

      - name: DB seed (E2E unmatched)
        env:
          PGPASSWORD: postgres
          DB_HOST: localhost
          DB_USER: postgres
          DB_NAME: ssto
        run: npm run seed:e2e:unmatched:sql

      - name: Smoke /health + /signals/unmatched
        env:
          API_BASE: http://localhost:3001/api
          MAILHOG: http://localhost:8025
        run: |
          bash tests/smoke/api-health.sh
          bash tests/smoke/api-unmatched.sh

      - name: Upload smoke artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: tests/artifacts/**/*
          if-no-files-found: warn

      - name: Run functional bundle (contracts+negative+pdf)
        run: npm run test:functional

  e2e:
    needs: functional
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ssto
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports: ["5432:5432"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install root deps
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

- name: Start backend for E2E
  env:
    DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ssto
    DB_HOST: localhost
    DB_PORT: 5432
    DB_USER: postgres
    DB_PASS: postgres
    DB_NAME: ssto
    NODE_ENV: test
    ENABLE_TEST_SEED: '1'
  run: |
    if npm --prefix backend-nest run | grep -q " start:prod"; then
      nohup npm --prefix backend-nest run start:prod >/tmp/backend.log 2>&1 &
    elif [ -f backend-nest/dist/main.js ]; then
      nohup node backend-nest/dist/main.js >/tmp/backend.log 2>&1 &
    else
      echo "WARN: cannot find backend start command or dist/main.js."
    fi
    sleep 5

- name: Seed test data (UNMATCHED) for E2E
  env:
    API_BASE: http://localhost:3001/api
    ENABLE_TEST_SEED: '1'
  run: bash tests/fixtures/seed-unmatched.sh

- name: Ensure /health before UI
  env:
    API_BASE: http://localhost:3001/api
  run: bash tests/smoke/wait-for.sh "$API_BASE/health" 90

- name: Run Playwright tests
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
        run: |
          # If your Playwright config defines webServer, this will auto-start UI.
          # Otherwise, start your frontend dev server here before running tests.
          npx playwright test --config=tests/e2e/playwright.config.ts
