#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ updateDashboardData is not defined –≤ index_14_36.html
–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: C:\Projects\test-ssto-project\fix_updateDashboardData_error.py
"""

import re
import os
from datetime import datetime

def fix_dashboard_error():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π updateDashboardData"""
    
    file_path = r'C:\Projects\test-ssto-project\index_14_36.html'
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è updateDashboardData
    if 'function updateDashboardData' not in content:
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è updateDashboardData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤–ª—è–µ–º...")
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã updateDashboardData –Ω–∞ loadDashboard
        replacements_made = 0
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã updateDashboardData –Ω–∞ loadDashboard
        pattern = r'updateDashboardData\(\)'
        matches = re.findall(pattern, content)
        if matches:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(matches)} –≤—ã–∑–æ–≤–æ–≤ updateDashboardData")
            content = re.sub(pattern, 'loadDashboard()', content)
            replacements_made += len(matches)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏
        if replacements_made == 0:
            print("  –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏ updateDashboardData")
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è loadDashboard
            dashboard_pattern = r'(function loadDashboard\(\)[^}]+\})'
            match = re.search(dashboard_pattern, content, re.DOTALL)
            if match:
                insert_pos = match.end()
                alias_function = """

// –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function updateDashboardData() {
    loadDashboard();
}
"""
                content = content[:insert_pos] + alias_function + content[insert_pos:]
                print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–ª–∏–∞—Å updateDashboardData")
    else:
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è updateDashboardData —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadDashboard –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadDashboard...")
    
    if 'function loadDashboard' not in content:
        print("  ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è loadDashboard –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è app
        app_pattern = r'const app = \{[^}]+\};\s*'
        app_match = re.search(app_pattern, content)
        
        if app_match:
            dashboard_function = """

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
function loadDashboard() {
    const requests = JSON.parse(localStorage.getItem('testRequests') || '[]');
    const signals = JSON.parse(localStorage.getItem('signals') || '[]');
    const terminals = JSON.parse(localStorage.getItem('ssasTerminals') || localStorage.getItem('terminals') || '[]');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    const totalRequestsEl = document.getElementById('total-requests');
    const pendingRequestsEl = document.getElementById('pending-requests');
    const confirmedRequestsEl = document.getElementById('confirmed-requests');
    const totalSignalsEl = document.getElementById('total-signals');
    
    if (totalRequestsEl) totalRequestsEl.textContent = requests.length;
    if (pendingRequestsEl) pendingRequestsEl.textContent = requests.filter(r => r.status === 'pending').length;
    if (confirmedRequestsEl) confirmedRequestsEl.textContent = requests.filter(r => r.status === 'confirmed').length;
    if (totalSignalsEl) totalSignalsEl.textContent = signals.length;
}

// –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function updateDashboardData() {
    loadDashboard();
}

// –ï—â–µ –æ–¥–∏–Ω –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function updateStats() {
    loadDashboard();
}
"""
            insert_pos = app_match.end()
            content = content[:insert_pos] + dashboard_function + content[insert_pos:]
            print("  ‚úÖ –§—É–Ω–∫—Ü–∏—è loadDashboard –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å –∞–ª–∏–∞—Å updateDashboardData
    if 'function updateDashboardData' not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–µ—Ä–µ–¥ </script>
        script_end = content.rfind('</script>')
        if script_end > 0:
            alias = """

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
if (typeof updateDashboardData === 'undefined') {
    window.updateDashboardData = function() {
        if (typeof loadDashboard !== 'undefined') {
            loadDashboard();
        } else {
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...');
            const requests = JSON.parse(localStorage.getItem('testRequests') || '[]');
            const signals = JSON.parse(localStorage.getItem('signals') || '[]');
            
            const totalRequestsEl = document.getElementById('total-requests');
            const pendingRequestsEl = document.getElementById('pending-requests');
            const confirmedRequestsEl = document.getElementById('confirmed-requests');
            const totalSignalsEl = document.getElementById('total-signals');
            
            if (totalRequestsEl) totalRequestsEl.textContent = requests.length;
            if (pendingRequestsEl) pendingRequestsEl.textContent = requests.filter(r => r.status === 'pending').length;
            if (confirmedRequestsEl) confirmedRequestsEl.textContent = requests.filter(r => r.status === 'confirmed').length;
            if (totalSignalsEl) totalSignalsEl.textContent = signals.length;
        }
    };
}

if (typeof updateStats === 'undefined') {
    window.updateStats = window.updateDashboardData;
}
"""
            content = content[:script_end] + alias + '\n' + content[script_end:]
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"\n‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
    print("\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ updateDashboardData is not defined")
    print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω—ã –∞–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    print("  ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è loadDashboard")
    print("\nüéØ –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å:")
    print("  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ Excel –±–µ–∑ –æ—à–∏–±–æ–∫")
    print("  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ")
    print("  ‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("\n‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: Ctrl+F5")

if __name__ == "__main__":
    fix_dashboard_error()
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.")