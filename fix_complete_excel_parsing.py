#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–°–ï–• –ø–æ–ª–µ–π –∏–∑ Excel –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: C:\Projects\test-ssto-project\fix_complete_excel_parsing.py
"""

import re
import os
from datetime import datetime

def fix_complete_excel_parsing():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ Excel –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –í–°–ï–• –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    file_path = r'C:\Projects\test-ssto-project\index_14_36.html'
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # 1. –†–ê–°–®–ò–†–Ø–ï–ú –¢–ê–ë–õ–ò–¶–£ –ó–ê–Ø–í–û–ö - –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
    requests_table_pattern = r'(<div id="requests"[^>]*>.*?<thead>.*?<tr>)(.*?)(</tr>.*?</thead>)'
    
    new_requests_headers = """
                        <th>ID</th>
                        <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                        <th>–°—É–¥–Ω–æ</th>
                        <th>MMSI</th>
                        <th>IMO</th>
                        <th>–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü</th>
                        <th>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</th>
                        <th>Email</th>
                        <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                        <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>"""
    
    content = re.sub(
        requests_table_pattern,
        r'\1' + new_requests_headers + r'\3',
        content,
        flags=re.DOTALL
    )
    
    # 2. –†–ê–°–®–ò–†–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ loadRequests –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    new_load_requests = """function loadRequests() {
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    const requests = JSON.parse(localStorage.getItem('testRequests') || '[]');
    const tbody = document.getElementById('requests-tbody');
    
    if (tbody) {
        tbody.innerHTML = '';
        
        if (requests.length === 0) {
            tbody.innerHTML = '<tr><td colspan="12" style="text-align: center; padding: 20px;">–ù–µ—Ç –∑–∞—è–≤–æ–∫</td></tr>';
        } else {
            requests.forEach(request => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td style="font-size: 11px;">${request.id || 'N/A'}</td>
                    <td><strong>${request.stationNumber || ''}</strong></td>
                    <td>${request.vesselName || ''}</td>
                    <td>${request.mmsi || ''}</td>
                    <td>${request.imo || ''}</td>
                    <td>${request.shipOwner || request.owner || ''}</td>
                    <td>${request.contactPerson || ''}</td>
                    <td style="font-size: 11px;">${request.email || ''}</td>
                    <td>${request.phone || request.contactPhone || ''}</td>
                    <td>${request.testDate || ''}</td>
                    <td><span class="status-badge status-${request.status}">${
                        request.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : 
                        request.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : 
                        '–ù–æ–≤–∞—è'
                    }</span></td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewRequest('${request.id}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                        ${request.status === 'pending' ? 
                            `<button class="btn btn-success btn-sm" onclick="confirmRequest('${request.id}')">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>` : ''}
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
    }
    
    if (typeof loadDashboard !== 'undefined') loadDashboard();
}"""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadRequests
    old_load_requests = r'function loadRequests\(\)[^}]+\{[^}]+\}'
    content = re.sub(old_load_requests, new_load_requests, content, flags=re.DOTALL)
    
    # 3. –£–õ–£–ß–®–ê–ï–ú –ü–ê–†–°–ò–ù–ì EXCEL - –∏–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
    new_excel_parser = """
    processExcelData(data) {
        console.log('üîç –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–∏—Å–µ–π:', data.length);
        
        if (!data || data.length === 0) {
            console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
        }
        
        // –°–ª–æ–≤–∞—Ä—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        const columnMapping = {
            stationNumber: ['–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏', '–ù–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞', 'Terminal Number', 'Station Number', 'Mobile Terminal No', '–°—Ç–æ–π–∫–∞'],
            vesselName: ['–°—É–¥–Ω–æ', '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞', 'Vessel', 'Ship Name', 'Vessel Name', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞'],
            mmsi: ['MMSI', '–ú–ú–°', '–ú–ú–°–ò'],
            imo: ['IMO', '–ò–ú–û'],
            shipOwner: ['–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü', '–í–ª–∞–¥–µ–ª–µ—Ü', 'Owner', 'Ship Owner', '–ö–æ–º–ø–∞–Ω–∏—è'],
            contactPerson: ['–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ', '–§–ò–û', 'Contact Person', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ö–æ–Ω—Ç–∞–∫—Ç'],
            email: ['Email', 'E-mail', '–ü–æ—á—Ç–∞', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', 'Contact Email'],
            phone: ['–¢–µ–ª–µ—Ñ–æ–Ω', 'Phone', 'Tel', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', '–¢–µ–ª'],
            address: ['–ê–¥—Ä–µ—Å', 'Address', '–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏'],
            testDate: ['–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞', '–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞', 'Test Date', '–î–∞—Ç–∞', '–ü–ª–∞–Ω —Ç–µ—Å—Ç'],
            terminalType: ['–¢–∏–ø —Å–≤—è–∑–∏', 'Terminal Type', '–¢–∏–ø —Ç–µ—Ä–º–∏–Ω–∞–ª–∞', '–¢–∏–ø'],
            lastTest: ['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç', 'Last Test', '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞'],
            nextTest: ['–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç', 'Next Test', '–ü–ª–∞–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞'],
            status: ['–°—Ç–∞—Ç—É—Å', 'Status', '–°–æ—Å—Ç–æ—è–Ω–∏–µ'],
            notes: ['–ü—Ä–∏–º–µ—á–∞–Ω–∏—è', 'Notes', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ó–∞–º–µ—Ç–∫–∏']
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
        function findValue(row, possibleKeys) {
            for (let key of possibleKeys) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if (row[key] !== undefined && row[key] !== null && row[key] !== '') {
                    return row[key];
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                for (let rowKey in row) {
                    if (rowKey.toLowerCase().includes(key.toLowerCase())) {
                        if (row[rowKey] !== undefined && row[rowKey] !== null && row[rowKey] !== '') {
                            return row[rowKey];
                        }
                    }
                }
            }
            return '';
        }
        
        // –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –ª—é–±–æ–≥–æ –ø–æ–ª—è
        function extractStationNumber(row) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            const stationValue = findValue(row, columnMapping.stationNumber);
            if (stationValue) {
                const match = String(stationValue).match(/\\d{9}/);
                if (match) return match[0];
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö
            for (let key in row) {
                const value = String(row[key] || '');
                const match = value.match(/\\d{9}/);
                if (match) return match[0];
            }
            return '';
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        const headers = Object.keys(data[0]);
        console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', headers);
        
        const hasTestDate = headers.some(h => 
            columnMapping.testDate.some(key => h.toLowerCase().includes(key.toLowerCase()))
        );
        
        const hasSignalType = headers.some(h => 
            h.toLowerCase().includes('—Å–∏–≥–Ω–∞–ª') || h.toLowerCase().includes('signal')
        );
        
        let requests = [];
        let terminals = [];
        let signals = [];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        data.forEach((row, index) => {
            const stationNumber = extractStationNumber(row);
            
            if (!stationNumber) {
                console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏:', row);
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
            if (hasTestDate && !hasSignalType) {
                // –≠—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                const request = {
                    id: 'REQ-' + Date.now() + '-' + index,
                    stationNumber: stationNumber,
                    vesselName: findValue(row, columnMapping.vesselName),
                    mmsi: findValue(row, columnMapping.mmsi),
                    imo: findValue(row, columnMapping.imo),
                    shipOwner: findValue(row, columnMapping.shipOwner),
                    contactPerson: findValue(row, columnMapping.contactPerson),
                    email: findValue(row, columnMapping.email),
                    phone: findValue(row, columnMapping.phone),
                    address: findValue(row, columnMapping.address),
                    testDate: findValue(row, columnMapping.testDate),
                    notes: findValue(row, columnMapping.notes),
                    status: 'pending',
                    createdAt: new Date().toISOString()
                };
                
                // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
                Object.keys(request).forEach(key => {
                    if (request[key] === '') delete request[key];
                });
                
                requests.push(request);
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', request);
                
            } else if (hasSignalType) {
                // –≠—Ç–æ —Å–∏–≥–Ω–∞–ª
                const signal = {
                    id: 'SIG-' + Date.now() + '-' + index,
                    stationNumber: stationNumber,
                    vesselName: findValue(row, columnMapping.vesselName),
                    mmsi: findValue(row, columnMapping.mmsi),
                    signalType: findValue(row, columnMapping.terminalType) || 'TEST',
                    receivedAt: new Date().toISOString(),
                    status: 'new'
                };
                signals.push(signal);
                console.log('–î–æ–±–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª:', signal);
                
            } else {
                // –≠—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª
                const terminal = {
                    id: 'T-' + Date.now() + '-' + index,
                    terminal_number: stationNumber,
                    vessel_name: findValue(row, columnMapping.vesselName),
                    mmsi: findValue(row, columnMapping.mmsi),
                    terminal_type: findValue(row, columnMapping.terminalType) || 'INMARSAT',
                    owner: findValue(row, columnMapping.shipOwner),
                    contact_person: findValue(row, columnMapping.contactPerson),
                    email: findValue(row, columnMapping.email),
                    phone: findValue(row, columnMapping.phone),
                    address: findValue(row, columnMapping.address),
                    lastTest: findValue(row, columnMapping.lastTest),
                    nextTest: findValue(row, columnMapping.nextTest),
                    status: findValue(row, columnMapping.status) || 'active',
                    notes: findValue(row, columnMapping.notes)
                };
                
                // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
                Object.keys(terminal).forEach(key => {
                    if (terminal[key] === '') delete terminal[key];
                });
                
                terminals.push(terminal);
                console.log('–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª:', terminal);
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if (requests.length > 0) {
            const existingRequests = JSON.parse(localStorage.getItem('testRequests') || '[]');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –¥–∞—Ç–µ
            const newRequests = requests.filter(newReq => 
                !existingRequests.some(existReq => 
                    existReq.stationNumber === newReq.stationNumber && 
                    existReq.testDate === newReq.testDate
                )
            );
            localStorage.setItem('testRequests', JSON.stringify([...existingRequests, ...newRequests]));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:', newRequests.length, '–∏–∑', requests.length);
        }
        
        if (terminals.length > 0) {
            const existingTerminals = JSON.parse(localStorage.getItem('ssasTerminals') || '[]');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            const newTerminals = terminals.filter(newTerm => 
                !existingTerminals.some(existTerm => 
                    existTerm.terminal_number === newTerm.terminal_number
                )
            );
            localStorage.setItem('ssasTerminals', JSON.stringify([...existingTerminals, ...newTerminals]));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤:', newTerminals.length, '–∏–∑', terminals.length);
        }
        
        if (signals.length > 0) {
            const existingSignals = JSON.parse(localStorage.getItem('signals') || '[]');
            localStorage.setItem('signals', JSON.stringify([...existingSignals, ...signals]));
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤:', signals.length);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        if (typeof loadRequests !== 'undefined') loadRequests();
        if (typeof loadTerminals !== 'undefined') loadTerminals();
        if (typeof loadSignals !== 'undefined') loadSignals();
        if (typeof loadDashboard !== 'undefined') loadDashboard();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (typeof showNotification !== 'undefined') {
            showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${requests.length} –∑–∞—è–≤–æ–∫, ${terminals.length} —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤, ${signals.length} —Å–∏–≥–Ω–∞–ª–æ–≤`, 'success');
        }
    }"""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é processExcelData
    excel_process_pattern = r'processExcelData\(data\)[^}]+\{(?:[^{}]|\{[^}]*\})*\}'
    content = re.sub(excel_process_pattern, new_excel_parser, content, flags=re.DOTALL)
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    confirm_function = """
function confirmRequest(requestId) {
    console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:', requestId);
    const requests = JSON.parse(localStorage.getItem('testRequests') || '[]');
    const request = requests.find(r => r.id === requestId);
    
    if (request) {
        request.status = 'confirmed';
        request.confirmedAt = new Date().toISOString();
        localStorage.setItem('testRequests', JSON.stringify(requests));
        
        loadRequests();
        loadDashboard();
        
        if (typeof showNotification !== 'undefined') {
            showNotification('–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'success');
        }
    }
}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'function confirmRequest' not in content:
        last_script = content.rfind('</script>')
        if last_script > 0:
            content = content[:last_script] + confirm_function + '\n' + content[last_script:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"\n‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
    print("\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("  ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ - –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚úì –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Excel —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –í–°–ï–• –ø–æ–ª–µ–π:")
    print("    ‚Ä¢ –ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏ (9 —Ü–∏—Ñ—Ä)")
    print("    ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞")
    print("    ‚Ä¢ MMSI –∏ IMO")
    print("    ‚Ä¢ –°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü")
    print("    ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ (–§–ò–û)")
    print("    ‚Ä¢ Email")
    print("    ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω")
    print("    ‚Ä¢ –ê–¥—Ä–µ—Å")
    print("    ‚Ä¢ –î–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
    print("    ‚Ä¢ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
    print("  ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
    print("  ‚úì –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫")
    print("\n‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5) –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ")

if __name__ == "__main__":
    fix_complete_excel_parsing()
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ!")