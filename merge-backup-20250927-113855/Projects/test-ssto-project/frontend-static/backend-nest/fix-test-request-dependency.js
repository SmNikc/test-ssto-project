// fix-test-request-dependency.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\fix-test-request-dependency.js

const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = 'C:\\Projects\\test-ssto-project\\backend-nest';
const appModulePath = path.join(PROJECT_ROOT, 'src', 'app.module.ts');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ TestRequest...\n');

let content = fs.readFileSync(appModulePath, 'utf8');

// –ù–∞—Ö–æ–¥–∏–º SequelizeModule.forFeature –∏ –¥–æ–±–∞–≤–ª—è–µ–º TestRequest
const forFeatureMatch = content.match(/SequelizeModule\.forFeature\(\[\s*([^]]*?)\s*\]\)/);

if (forFeatureMatch) {
  const currentModels = forFeatureMatch[1];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ TestRequest
  if (!currentModels.includes('TestRequest')) {
    // –î–æ–±–∞–≤–ª—è–µ–º TestRequest –≤ —Å–ø–∏—Å–æ–∫
    const newModels = currentModels.trim() + ',\n      TestRequest';
    const newForFeature = `SequelizeModule.forFeature([\n      ${newModels}\n    ])`;
    
    content = content.replace(/SequelizeModule\.forFeature\(\[[^]]*?\]\)/, newForFeature);
    
    console.log('‚úÖ TestRequest –¥–æ–±–∞–≤–ª–µ–Ω –≤ SequelizeModule.forFeature');
  } else {
    console.log('‚úÖ TestRequest —É–∂–µ –µ—Å—Ç—å –≤ SequelizeModule.forFeature');
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º
fs.writeFileSync(appModulePath, content, 'utf8');

console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ SequelizeModule.forFeature:');
const updatedContent = fs.readFileSync(appModulePath, 'utf8');
const checkForFeature = updatedContent.match(/SequelizeModule\.forFeature\(\[\s*([^]]*?)\s*\]\)/);
if (checkForFeature) {
  console.log(checkForFeature[0]);
}

console.log('\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:');
console.log('  cd C:\\Projects\\test-ssto-project\\backend-nest');
console.log('  Ctrl+C –∏ npm run start:dev');