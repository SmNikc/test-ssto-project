// update-db-columns.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\update-db-columns.js
// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î —á–µ—Ä–µ–∑ Node.js

const { Client } = require('pg');
require('dotenv').config();

const client = new Client({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'ssto',
  password: process.env.DB_PASSWORD || 'sstopass',
  database: process.env.DB_NAME || 'sstodb'
});

async function updateDatabase() {
  try {
    await client.connect();
    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...\n');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É signals
    const alterCommands = [
      { name: 'detection_time', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS detection_time TIMESTAMP' },
      { name: 'received_at', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP' },
      { name: 'status', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS status VARCHAR(50) DEFAULT \'UNMATCHED\'' },
      { name: 'mmsi', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS mmsi VARCHAR(9)' },
      { name: 'call_sign', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS call_sign VARCHAR(20)' },
      { name: 'coordinates', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS coordinates JSONB' },
      { name: 'metadata', sql: 'ALTER TABLE signals ADD COLUMN IF NOT EXISTS metadata JSONB' }
    ];
    
    for (const cmd of alterCommands) {
      try {
        await client.query(cmd.sql);
        console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${cmd.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ ${cmd.name}: ${err.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã signals:');
    const result = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'signals'
      ORDER BY ordinal_position
    `);
    
    result.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type}`);
    });
    
    console.log('\n‚ú® –ë–î —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    console.log('\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env:');
    console.log('  DB_HOST=' + (process.env.DB_HOST || 'localhost'));
    console.log('  DB_PORT=' + (process.env.DB_PORT || 5432));
    console.log('  DB_USER=' + (process.env.DB_USER || 'ssto'));
    console.log('  DB_NAME=' + (process.env.DB_NAME || 'sstodb'));
  } finally {
    await client.end();
  }
}

updateDatabase();