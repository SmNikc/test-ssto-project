// check-request-model.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\check-request-model.js

const fs = require('fs');
const path = require('path');

console.log('üîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ Request...\n');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥–µ–ª–µ–π
const modelPaths = [
  'src/models/request.model.ts',
  'src/models/request.ts',
  'src/entities/request.entity.ts',
  'src/entities/ssas-request.entity.ts'
];

// –ò—â–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
let modelFile = null;
for (const modelPath of modelPaths) {
  const fullPath = path.join(__dirname, modelPath);
  if (fs.existsSync(fullPath)) {
    modelFile = fullPath;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: ${modelPath}`);
    break;
  }
}

if (modelFile) {
  const content = fs.readFileSync(modelFile, 'utf8');
  
  // –ò—â–µ–º –ø–æ–ª—è —Å @Column
  console.log('\nüìã –ü–æ–ª—è –º–æ–¥–µ–ª–∏ Request:');
  const columnMatches = content.match(/@Column[^}]*}/g) || [];
  columnMatches.forEach(match => {
    const fieldName = match.match(/(\w+)(?:\?)?:/);
    if (fieldName) {
      console.log(`  - ${fieldName[1]}`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ terminal_number
  if (content.includes('terminal_number')) {
    console.log('\n‚úÖ –ü–æ–ª–µ terminal_number –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏');
  } else {
    console.log('\n‚ö†Ô∏è  –ü–æ–ª–µ terminal_number –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏!');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  console.log('\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫):');
  const lines = content.split('\n').slice(0, 100);
  lines.forEach((line, index) => {
    if (line.includes('@Column') || line.includes('terminal_number') || line.includes('class')) {
      console.log(`${index + 1}: ${line}`);
    }
  });
  
} else {
  console.log('‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞:');
  
  const srcPath = path.join(__dirname, 'src');
  if (fs.existsSync(srcPath)) {
    const dirs = fs.readdirSync(srcPath, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);
    
    console.log('–ü–∞–ø–∫–∏ –≤ src:');
    dirs.forEach(dir => console.log(`  - ${dir}/`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
    dirs.forEach(dir => {
      const dirPath = path.join(srcPath, dir);
      const files = fs.readdirSync(dirPath)
        .filter(file => file.includes('request'));
      
      if (files.length > 0) {
        console.log(`\n–§–∞–π–ª—ã —Å 'request' –≤ ${dir}/:`)
        files.forEach(file => console.log(`  - ${file}`));
      }
    });
  }
}

console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
console.log('–ï—Å–ª–∏ terminal_number –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏, –Ω—É–∂–Ω–æ:');
console.log('1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª—å Request');
console.log('2. –ò–ª–∏ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ');
console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π');