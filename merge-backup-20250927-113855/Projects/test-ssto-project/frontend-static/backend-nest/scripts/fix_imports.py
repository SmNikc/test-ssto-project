#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
fix_imports.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è Sequelize –º–æ–¥–µ–ª–µ–π
–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤: C:\Projects\test-ssto-project\backend-nest\scripts\
–ó–∞–ø—É—Å–∫: python scripts\fix_imports.py
"""

import shutil
from pathlib import Path

PROJECT_PATH = Path("C:/Projects/test-ssto-project/backend-nest")
SRC_PATH = PROJECT_PATH / "src"

def check_export_style(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∏–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª–µ"""
    if not file_path.exists():
        return None
    content = file_path.read_text(encoding='utf-8')
    if 'export default class' in content:
        return 'default'
    elif 'export class' in content:
        return 'named'
    return None

def main():
    print("=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Sequelize ===\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –º–æ–¥–µ–ª—è—Ö
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –º–æ–¥–µ–ª—è—Ö:")
    models_info = {}
    
    model_files = [
        ('request.ts', 'SSASRequest'),
        ('user.model.ts', 'User'),
        ('log.model.ts', 'Log'),
        ('testingScenario.model.ts', 'TestingScenario'),
        ('signal.model.ts', 'Signal')
    ]
    
    for filename, classname in model_files:
        file_path = SRC_PATH / "models" / filename
        export_style = check_export_style(file_path)
        models_info[filename] = export_style
        print(f"  {filename}: {export_style or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ - –¥–æ–±–∞–≤–ª—è–µ–º named export
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ named exports –≤ –º–æ–¥–µ–ª–∏...")
    
    for filename, classname in model_files:
        file_path = SRC_PATH / "models" / filename
        if not file_path.exists():
            print(f"  ‚ö†Ô∏è {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        content = file_path.read_text(encoding='utf-8')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å export default class, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ named export
        if 'export default class' in content and f'export {{ {classname} }}' not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            content += f'\nexport {{ default as {classname} }} from "./{filename.replace(".ts", "")}";\n'
            file_path.write_text(content, encoding='utf-8')
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω named export –¥–ª—è {classname}")
    
    # 3. –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π request.model.ts –∫–∞–∫ –∞–ª–∏–∞—Å
    request_model = SRC_PATH / "models" / "request.model.ts"
    if not request_model.exists():
        content = '''// –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { SSASRequest as Request } from './request';
export { SSASRequest } from './request';

// Enum –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å DTO
export enum RequestStatus {
  DRAFT = 'draft',
  PENDING = 'pending',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled'
}

export enum RequestType {
  TEST_406 = 'test_406',
  TEST_121 = 'test_121',
  COMBINED = 'combined'
}'''
        request_model.write_text(content, encoding='utf-8')
        print("‚úÖ –°–æ–∑–¥–∞–Ω request.model.ts –∫–∞–∫ –∞–ª–∏–∞—Å")
    
    # 4. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π signal.controller.ts
    signal_controller = SRC_PATH / "controllers" / "signal.controller.ts"
    if signal_controller.exists():
        backup = signal_controller.with_suffix('.ts.disabled')
        shutil.move(str(signal_controller), str(backup))
        print(f"üóëÔ∏è –û—Ç–∫–ª—é—á–µ–Ω signal.controller.ts -> {backup.name}")
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º request.service.ts
    request_service = SRC_PATH / "services" / "request.service.ts"
    if request_service.exists():
        content = request_service.read_text(encoding='utf-8')
        
        # –ú–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
        content = content.replace(
            "import { Request } from '../models/request.model';",
            "import { Request } from '../models/request.model';\nimport { SSASRequest } from '../models/request';"
        )
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è @InjectModel(Request)
        if '@InjectModel(Request)' in content:
            content = content.replace('@InjectModel(Request)', '@InjectModel(SSASRequest)')
            content = content.replace('private requestModel: typeof Request', 'private requestModel: typeof SSASRequest')
        
        request_service.write_text(content, encoding='utf-8')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω request.service.ts")
    
    # 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ app.module.ts
    app_module = SRC_PATH / "app.module.ts"
    if app_module.exists():
        content = app_module.read_text(encoding='utf-8')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ default imports
        fixes = [
            ("import { SSASRequest } from './models/request';", 
             "import SSASRequest from './models/request';"),
            ("import { User } from './models/user.model';", 
             "import User from './models/user.model';"),
            ("import { Log } from './models/log.model';", 
             "import Log from './models/log.model';"),
            ("import { TestingScenario } from './models/testingScenario.model';", 
             "import TestingScenario from './models/testingScenario.model';"),
            ("import { Signal } from './models/signal.model';", 
             "import Signal from './models/signal.model';")
        ]
        
        for old, new in fixes:
            content = content.replace(old, new)
        
        app_module.write_text(content, encoding='utf-8')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ app.module.ts")
    
    # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ssto.module.ts
    ssto_module = SRC_PATH / "ssto.module.ts"
    if ssto_module.exists():
        content = ssto_module.read_text(encoding='utf-8')
        content = content.replace(
            "import { SSASRequest } from './models/request';",
            "import SSASRequest from './models/request';"
        )
        content = content.replace(
            "import { Signal } from './models/signal.model';",
            "import Signal from './models/signal.model';"
        )
        ssto_module.write_text(content, encoding='utf-8')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ssto.module.ts")
    
    # 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º signal.model.ts
    signal_model = SRC_PATH / "models" / "signal.model.ts"
    if signal_model.exists():
        content = signal_model.read_text(encoding='utf-8')
        content = content.replace(
            "import { SSASRequest } from './request';",
            "import SSASRequest from './request';"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º export default –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'export default' not in content:
            content = content.replace('export class Signal', 'export default class Signal')
        
        signal_model.write_text(content, encoding='utf-8')
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω signal.model.ts")
    
    print("\n‚ú® –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
    print("npm run start:dev")

if __name__ == "__main__":
    main()