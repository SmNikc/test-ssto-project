#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
setup_day2_complete.py - –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Day 2 –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –°–°–¢–û
–í–∫–ª—é—á–∞–µ—Ç: –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î, –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤

–ó–∞–ø—É—Å–∫: python setup_day2_complete.py
"""

import os
import sys
import json
import subprocess
import shutil
from pathlib import Path
from typing import List, Dict, Tuple

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    BLUE = '\033[94m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

def print_header(text):
    print(f"\n{Colors.CYAN}{Colors.BOLD}{'='*60}{Colors.RESET}")
    print(f"{Colors.CYAN}{Colors.BOLD}{text.center(60)}{Colors.RESET}")
    print(f"{Colors.CYAN}{Colors.BOLD}{'='*60}{Colors.RESET}")

def print_success(text):
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.RESET}")

def print_warning(text):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.RESET}")

def print_error(text):
    print(f"{Colors.RED}‚ùå {text}{Colors.RESET}")

def print_info(text):
    print(f"{Colors.CYAN}üìù {text}{Colors.RESET}")

def print_clean(text):
    print(f"{Colors.BLUE}üßπ {text}{Colors.RESET}")

# –ü—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ scripts, –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
SCRIPT_PATH = Path(__file__).resolve().parent
PROJECT_PATH = SCRIPT_PATH.parent if SCRIPT_PATH.name == 'scripts' else Path("C:/Projects/test-ssto-project/backend-nest")
SRC_PATH = PROJECT_PATH / "src"

# ===================== –ß–ê–°–¢–¨ 1: –ü–†–û–í–ï–†–ö–ò –ò –û–ß–ò–°–¢–ö–ê =====================

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ test-db.js"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î")
    
    test_db_file = PROJECT_PATH / "test-db.js"
    
    # –°–æ–∑–¥–∞–µ–º test-db.js –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not test_db_file.exists():
        print_warning("test-db.js –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
        test_db_content = '''// test-db.js - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const { Client } = require('pg');
require('dotenv').config();

const client = new Client({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
  database: process.env.DB_NAME || 'ssto_test'
});

async function testConnection() {
  try {
    await client.connect();
    const result = await client.query('SELECT version()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].version);
    await client.end();
    process.exit(0);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ:');
    console.log('  DB_USER=' + (process.env.DB_USER || 'postgres'));
    console.log('  DB_PASSWORD=***');
    console.log('  DB_NAME=' + (process.env.DB_NAME || 'ssto_test'));
    process.exit(1);
  }
}

testConnection();'''
        
        with open(test_db_file, 'w', encoding='utf-8') as f:
            f.write(test_db_content)
        print_success("test-db.js —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    os.chdir(PROJECT_PATH)
    result = subprocess.run(
        "node test-db.js",
        shell=True,
        capture_output=True,
        text=True
    )
    
    if result.returncode == 0:
        print_success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print_error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        print_warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª:")
        print("  DB_USER=postgres")
        print("  DB_PASSWORD=–≤–∞—à_–ø–∞—Ä–æ–ª—å_–æ—Ç_postgresql")
        print("  DB_NAME=ssto_test")
        return False

def clean_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö/–ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print_header("–û–ß–ò–°–¢–ö–ê –õ–ò–®–ù–ò–• –§–ê–ô–õ–û–í")
    
    files_to_remove = [
        SRC_PATH / "report" / "report.service.ts",
        SRC_PATH / "signal" / "signal.module.ts",
        SRC_PATH / "controllers" / "requestController.ts",  # —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
        SRC_PATH / "controllers" / "signalController.ts",   # —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
    ]
    
    for file_path in files_to_remove:
        if file_path.exists():
            try:
                file_path.unlink()
                print_clean(f"–£–¥–∞–ª–µ–Ω –ª–∏—à–Ω–∏–π —Ñ–∞–π–ª: {file_path.name}")
            except Exception as e:
                print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path.name}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
    empty_dirs = ["report", "signal"]
    for dir_name in empty_dirs:
        dir_path = SRC_PATH / dir_name
        if dir_path.exists() and not any(dir_path.iterdir()):
            try:
                dir_path.rmdir()
                print_clean(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {dir_name}")
            except:
                pass

def create_folder_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
    print_header("–°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö")
    
    folders = ["models", "services", "controllers", "dto"]
    for folder in folders:
        folder_path = SRC_PATH / folder
        folder_path.mkdir(parents=True, exist_ok=True)
        if folder_path.exists():
            print_success(f"–ü–∞–ø–∫–∞ {folder} –≥–æ—Ç–æ–≤–∞")
        else:
            print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {folder}")

def check_existing_files() -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ Day 2"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –§–ê–ô–õ–û–í")
    
    required_files = [
        "models/request.model.ts",
        "models/signal.model.ts",
        "dto/request.dto.ts",
        "services/request.service.ts",
        "services/email.service.ts",
        "controllers/request.controller.ts",
        "ssto.module.ts",
        "app.module.ts",
        "app.controller.ts",
        "app.service.ts"
    ]
    
    files_status = {}
    missing_count = 0
    
    for file_path in required_files:
        full_path = SRC_PATH / file_path
        exists = full_path.exists()
        files_status[file_path] = exists
        
        if exists:
            size = full_path.stat().st_size
            print_success(f"{file_path} ({size} bytes)")
        else:
            print_error(f"{file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_count += 1
    
    if missing_count > 0:
        print_warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª–æ–≤: {missing_count}")
    else:
        print_success("–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")
    
    return files_status

# ===================== –ß–ê–°–¢–¨ 2: –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í =====================

# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ Day 2
FILES_CONTENT = {
    "models/request.model.ts": '''import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToMany } from 'typeorm';

export enum RequestStatus {
  DRAFT = 'draft',
  PENDING = 'pending',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled'
}

export enum RequestType {
  TEST_406 = 'test_406',
  TEST_121 = 'test_121',
  COMBINED = 'combined'
}

@Entity('requests')
export class Request {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ name: 'vessel_name' })
  vesselName: string;

  @Column({ name: 'vessel_imo', nullable: true })
  vesselIMO: string;

  @Column({ name: 'vessel_type', nullable: true })
  vesselType: string;

  @Column({ name: 'vessel_flag', nullable: true })
  vesselFlag: string;

  @Column({ name: 'requester_name' })
  requesterName: string;

  @Column({ name: 'requester_email' })
  requesterEmail: string;

  @Column({ name: 'requester_phone', nullable: true })
  requesterPhone: string;

  @Column({ name: 'requester_company', nullable: true })
  requesterCompany: string;

  @Column({
    type: 'enum',
    enum: RequestType,
    default: RequestType.COMBINED
  })
  testType: RequestType;

  @Column({ type: 'date', name: 'test_date' })
  testDate: Date;

  @Column({ type: 'time', name: 'test_time', nullable: true })
  testTime: string;

  @Column({ name: 'test_location', nullable: true })
  testLocation: string;

  @Column({ name: 'test_coordinator', nullable: true })
  testCoordinator: string;

  @Column({
    type: 'enum',
    enum: RequestStatus,
    default: RequestStatus.DRAFT
  })
  status: RequestStatus;

  @Column({ type: 'text', nullable: true })
  notes: string;

  @Column({ name: 'report_url', nullable: true })
  reportUrl: string;

  @Column({ name: 'beacon_id', nullable: true })
  beaconId: string;

  @Column({ name: 'beacon_manufacturer', nullable: true })
  beaconManufacturer: string;

  @Column({ name: 'beacon_model', nullable: true })
  beaconModel: string;

  @Column({ name: 'last_email_check', type: 'timestamp', nullable: true })
  lastEmailCheck: Date;

  @Column({ name: 'email_count', default: 0 })
  emailCount: number;

  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;

  @UpdateDateColumn({ name: 'updated_at' })
  updatedAt: Date;
}''',

    "models/signal.model.ts": '''import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, ManyToOne, JoinColumn } from 'typeorm';
import { Request } from './request.model';

export enum SignalFrequency {
  F_406_MHZ = '406',
  F_121_5_MHZ = '121.5',
  BOTH = 'both'
}

export enum SignalStatus {
  RECEIVED = 'received',
  PROCESSED = 'processed',
  CONFIRMED = 'confirmed',
  FALSE_ALARM = 'false_alarm'
}

@Entity('signals')
export class Signal {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ name: 'request_id', nullable: true })
  requestId: number;

  @ManyToOne(() => Request, { nullable: true })
  @JoinColumn({ name: 'request_id' })
  request: Request;

  @Column({ name: 'beacon_hex_id' })
  beaconHexId: string;

  @Column({
    type: 'enum',
    enum: SignalFrequency,
    default: SignalFrequency.F_406_MHZ
  })
  frequency: SignalFrequency;

  @Column({ name: 'detection_time', type: 'timestamp' })
  detectionTime: Date;

  @Column({ name: 'email_subject' })
  emailSubject: string;

  @Column({ name: 'email_body', type: 'text' })
  emailBody: string;

  @Column({ name: 'email_from' })
  emailFrom: string;

  @Column({ name: 'email_received_at', type: 'timestamp' })
  emailReceivedAt: Date;

  @Column({ name: 'email_message_id', nullable: true })
  emailMessageId: string;

  @Column({ nullable: true })
  latitude: string;

  @Column({ nullable: true })
  longitude: string;

  @Column({ name: 'satellite_name', nullable: true })
  satelliteName: string;

  @Column({ name: 'lut_name', nullable: true })
  lutName: string;

  @Column({ name: 'country_code', nullable: true })
  countryCode: string;

  @Column({ name: 'beacon_type', nullable: true })
  beaconType: string;

  @Column({ name: 'mmsi', nullable: true })
  mmsi: string;

  @Column({ name: 'call_sign', nullable: true })
  callSign: string;

  @Column({ name: 'serial_number', nullable: true })
  serialNumber: string;

  @Column({
    type: 'enum',
    enum: SignalStatus,
    default: SignalStatus.RECEIVED
  })
  status: SignalStatus;

  @Column({ name: 'processed_at', type: 'timestamp', nullable: true })
  processedAt: Date;

  @Column({ name: 'processed_by', nullable: true })
  processedBy: string;

  @Column({ type: 'text', nullable: true })
  notes: string;

  @Column({ type: 'jsonb', nullable: true })
  metadata: Record<string, any>;

  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;
}''',

    "dto/request.dto.ts": '''import { IsEmail, IsNotEmpty, IsOptional, IsEnum, IsDateString, IsString } from 'class-validator';
import { RequestStatus, RequestType } from '../models/request.model';

export class CreateRequestDto {
  @IsNotEmpty()
  @IsString()
  vesselName: string;

  @IsOptional()
  @IsString()
  vesselIMO?: string;

  @IsOptional()
  @IsString()
  vesselType?: string;

  @IsOptional()
  @IsString()
  vesselFlag?: string;

  @IsNotEmpty()
  @IsString()
  requesterName: string;

  @IsNotEmpty()
  @IsEmail()
  requesterEmail: string;

  @IsOptional()
  @IsString()
  requesterPhone?: string;

  @IsOptional()
  @IsString()
  requesterCompany?: string;

  @IsOptional()
  @IsEnum(RequestType)
  testType?: RequestType;

  @IsNotEmpty()
  @IsDateString()
  testDate: string;

  @IsOptional()
  @IsString()
  testTime?: string;

  @IsOptional()
  @IsString()
  testLocation?: string;

  @IsOptional()
  @IsString()
  testCoordinator?: string;

  @IsOptional()
  @IsString()
  beaconId?: string;

  @IsOptional()
  @IsString()
  beaconManufacturer?: string;

  @IsOptional()
  @IsString()
  beaconModel?: string;

  @IsOptional()
  @IsString()
  notes?: string;
}

export class UpdateRequestDto {
  @IsOptional()
  @IsString()
  vesselName?: string;

  @IsOptional()
  @IsString()
  vesselIMO?: string;

  @IsOptional()
  @IsString()
  vesselType?: string;

  @IsOptional()
  @IsString()
  vesselFlag?: string;

  @IsOptional()
  @IsString()
  requesterName?: string;

  @IsOptional()
  @IsEmail()
  requesterEmail?: string;

  @IsOptional()
  @IsString()
  requesterPhone?: string;

  @IsOptional()
  @IsString()
  requesterCompany?: string;

  @IsOptional()
  @IsEnum(RequestType)
  testType?: RequestType;

  @IsOptional()
  @IsDateString()
  testDate?: string;

  @IsOptional()
  @IsString()
  testTime?: string;

  @IsOptional()
  @IsString()
  testLocation?: string;

  @IsOptional()
  @IsString()
  testCoordinator?: string;

  @IsOptional()
  @IsEnum(RequestStatus)
  status?: RequestStatus;

  @IsOptional()
  @IsString()
  beaconId?: string;

  @IsOptional()
  @IsString()
  beaconManufacturer?: string;

  @IsOptional()
  @IsString()
  beaconModel?: string;

  @IsOptional()
  @IsString()
  notes?: string;

  @IsOptional()
  @IsString()
  reportUrl?: string;
}

export class UpdateRequestStatusDto {
  @IsNotEmpty()
  @IsEnum(RequestStatus)
  status: RequestStatus;

  @IsOptional()
  @IsString()
  notes?: string;
}''',

    "services/request.service.ts": '''import { Injectable, NotFoundException, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Request, RequestStatus } from '../models/request.model';
import { CreateRequestDto, UpdateRequestDto, UpdateRequestStatusDto } from '../dto/request.dto';

@Injectable()
export class RequestService {
  private readonly logger = new Logger(RequestService.name);

  constructor(
    @InjectRepository(Request)
    private requestRepository: Repository<Request>,
  ) {}

  async create(createRequestDto: CreateRequestDto): Promise<Request> {
    this.logger.log(`Creating new request for vessel: ${createRequestDto.vesselName}`);
    
    const request = this.requestRepository.create({
      ...createRequestDto,
      status: RequestStatus.DRAFT,
      emailCount: 0,
    });

    const savedRequest = await this.requestRepository.save(request);
    this.logger.log(`Request created with ID: ${savedRequest.id}`);
    
    return savedRequest;
  }

  async findAll(status?: RequestStatus): Promise<Request[]> {
    const query = this.requestRepository.createQueryBuilder('request');
    
    if (status) {
      query.where('request.status = :status', { status });
    }
    
    query.orderBy('request.createdAt', 'DESC');
    
    return query.getMany();
  }

  async findOne(id: number): Promise<Request> {
    const request = await this.requestRepository.findOne({ 
      where: { id } 
    });

    if (!request) {
      throw new NotFoundException(`Request with ID ${id} not found`);
    }

    return request;
  }

  async findByEmail(email: string): Promise<Request[]> {
    return this.requestRepository.find({
      where: { requesterEmail: email },
      order: { createdAt: 'DESC' }
    });
  }

  async findActiveRequests(): Promise<Request[]> {
    return this.requestRepository.find({
      where: [
        { status: RequestStatus.PENDING },
        { status: RequestStatus.IN_PROGRESS }
      ],
      order: { testDate: 'ASC' }
    });
  }

  async update(id: number, updateRequestDto: UpdateRequestDto): Promise<Request> {
    const request = await this.findOne(id);
    
    Object.assign(request, updateRequestDto);
    request.updatedAt = new Date();
    
    const updatedRequest = await this.requestRepository.save(request);
    this.logger.log(`Request ${id} updated`);
    
    return updatedRequest;
  }

  async updateStatus(id: number, updateStatusDto: UpdateRequestStatusDto): Promise<Request> {
    const request = await this.findOne(id);
    
    const oldStatus = request.status;
    request.status = updateStatusDto.status;
    
    if (updateStatusDto.notes) {
      request.notes = request.notes 
        ? `${request.notes}\\n\\n[${new Date().toISOString()}] Status changed from ${oldStatus} to ${updateStatusDto.status}: ${updateStatusDto.notes}`
        : `[${new Date().toISOString()}] Status changed from ${oldStatus} to ${updateStatusDto.status}: ${updateStatusDto.notes}`;
    }
    
    const updatedRequest = await this.requestRepository.save(request);
    this.logger.log(`Request ${id} status changed from ${oldStatus} to ${updateStatusDto.status}`);
    
    return updatedRequest;
  }

  async remove(id: number): Promise<void> {
    const request = await this.findOne(id);
    
    await this.requestRepository.remove(request);
    this.logger.log(`Request ${id} deleted`);
  }

  async incrementEmailCount(id: number): Promise<void> {
    await this.requestRepository
      .createQueryBuilder()
      .update(Request)
      .set({ 
        emailCount: () => 'email_count + 1',
        lastEmailCheck: new Date()
      })
      .where('id = :id', { id })
      .execute();
  }

  async getStatistics(): Promise<any> {
    const total = await this.requestRepository.count();
    
    const byStatus = await this.requestRepository
      .createQueryBuilder('request')
      .select('request.status', 'status')
      .addSelect('COUNT(*)', 'count')
      .groupBy('request.status')
      .getRawMany();
    
    const byTestType = await this.requestRepository
      .createQueryBuilder('request')
      .select('request.testType', 'testType')
      .addSelect('COUNT(*)', 'count')
      .groupBy('request.testType')
      .getRawMany();
    
    return {
      total,
      byStatus,
      byTestType,
      lastUpdated: new Date()
    };
  }
}''',

    "services/email.service.ts": '''import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Signal, SignalStatus, SignalFrequency } from '../models/signal.model';

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);

  constructor(
    private configService: ConfigService,
    @InjectRepository(Signal)
    private signalRepository: Repository<Signal>,
  ) {}

  async checkEmails(): Promise<Signal[]> {
    this.logger.log('Checking emails (stub implementation)');
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è MVP
    return [];
  }

  async sendTestEmail(to: string, subject: string, body: string): Promise<void> {
    this.logger.log(`Test email would be sent to: ${to}`);
    this.logger.log(`Subject: ${subject}`);
    this.logger.log(`Body preview: ${body.substring(0, 100)}...`);
  }

  async testConnection(): Promise<boolean> {
    this.logger.log('Email connection test (stub)');
    return true;
  }

  private extractBeaconId(text: string): string {
    const hexPattern = /\\b[A-F0-9]{15}\\b/i;
    const match = text.match(hexPattern);
    return match ? match[0].toUpperCase() : 'UNKNOWN';
  }

  private detectFrequency(text: string): SignalFrequency {
    const text_lower = text.toLowerCase();
    
    if (text_lower.includes('406') && text_lower.includes('121')) {
      return SignalFrequency.BOTH;
    } else if (text_lower.includes('406')) {
      return SignalFrequency.F_406_MHZ;
    } else if (text_lower.includes('121')) {
      return SignalFrequency.F_121_5_MHZ;
    }
    
    return SignalFrequency.F_406_MHZ;
  }
}''',

    "controllers/request.controller.ts": '''import { 
  Controller, 
  Get, 
  Post, 
  Put, 
  Delete, 
  Body, 
  Param, 
  Query, 
  ParseIntPipe,
  ValidationPipe,
  HttpStatus,
  HttpCode
} from '@nestjs/common';
import { RequestService } from '../services/request.service';
import { CreateRequestDto, UpdateRequestDto, UpdateRequestStatusDto } from '../dto/request.dto';
import { Request, RequestStatus } from '../models/request.model';

@Controller('api/requests')
export class RequestController {
  constructor(private readonly requestService: RequestService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  async create(
    @Body(new ValidationPipe({ transform: true })) 
    createRequestDto: CreateRequestDto
  ): Promise<Request> {
    return this.requestService.create(createRequestDto);
  }

  @Get()
  async findAll(
    @Query('status') status?: RequestStatus
  ): Promise<Request[]> {
    return this.requestService.findAll(status);
  }

  @Get('statistics')
  async getStatistics() {
    return this.requestService.getStatistics();
  }

  @Get('active')
  async findActive(): Promise<Request[]> {
    return this.requestService.findActiveRequests();
  }

  @Get('by-email/:email')
  async findByEmail(@Param('email') email: string): Promise<Request[]> {
    return this.requestService.findByEmail(email);
  }

  @Get(':id')
  async findOne(@Param('id', ParseIntPipe) id: number): Promise<Request> {
    return this.requestService.findOne(id);
  }

  @Put(':id')
  async update(
    @Param('id', ParseIntPipe) id: number,
    @Body(new ValidationPipe({ transform: true })) 
    updateRequestDto: UpdateRequestDto
  ): Promise<Request> {
    return this.requestService.update(id, updateRequestDto);
  }

  @Put(':id/status')
  async updateStatus(
    @Param('id', ParseIntPipe) id: number,
    @Body(new ValidationPipe({ transform: true })) 
    updateStatusDto: UpdateRequestStatusDto
  ): Promise<Request> {
    return this.requestService.updateStatus(id, updateStatusDto);
  }

  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  async remove(@Param('id', ParseIntPipe) id: number): Promise<void> {
    return this.requestService.remove(id);
  }
}''',

    "ssto.module.ts": '''import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ConfigModule } from '@nestjs/config';

// Models
import { Request } from './models/request.model';
import { Signal } from './models/signal.model';

// Services
import { RequestService } from './services/request.service';
import { EmailService } from './services/email.service';

// Controllers
import { RequestController } from './controllers/request.controller';

@Module({
  imports: [
    ConfigModule,
    TypeOrmModule.forFeature([Request, Signal]),
  ],
  controllers: [RequestController],
  providers: [RequestService, EmailService],
  exports: [RequestService, EmailService],
})
export class SstoModule {}''',

    "app.module.ts": '''import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { SstoModule } from './ssto.module';

// Import models for TypeORM
import { Request } from './models/request.model';
import { Signal } from './models/signal.model';

@Module({
  imports: [
    // Configuration
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: '.env',
    }),
    
    // Database
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        type: 'postgres',
        host: configService.get('DB_HOST', 'localhost'),
        port: configService.get('DB_PORT', 5432),
        username: configService.get('DB_USER', 'postgres'),
        password: configService.get('DB_PASSWORD', 'postgres'),
        database: configService.get('DB_NAME', 'ssto_test'),
        entities: [Request, Signal],
        synchronize: configService.get('NODE_ENV', 'development') === 'development',
        logging: configService.get('NODE_ENV', 'development') === 'development',
      }),
    }),
    
    // Feature modules
    SstoModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}''',

    "app.controller.ts": '''import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }

  @Get('health')
  getHealth(): any {
    return {
      status: 'ok',
      timestamp: new Date().toISOString(),
      service: 'SSTO Test API',
      version: '1.0.0'
    };
  }
}''',

    "app.service.ts": '''import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'SSTO Test API - Day 2 Ready!';
  }
}'''
}

def create_all_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print_header("–°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    
    created_count = 0
    skipped_count = 0
    error_count = 0
    
    for relative_path, content in FILES_CONTENT.items():
        file_path = SRC_PATH / relative_path
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if file_path.exists():
                print_warning(f"–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {relative_path}")
                skipped_count += 1
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            if file_path.exists():
                size = file_path.stat().st_size
                print_success(f"–°–æ–∑–¥–∞–Ω: {relative_path} ({size} bytes)")
                created_count += 1
            else:
                print_error(f"–ù–µ —Å–æ–∑–¥–∞–Ω: {relative_path}")
                error_count += 1
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {relative_path}: {e}")
            error_count += 1
    
    # –ò—Ç–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–æ–∑–¥–∞–Ω–æ: {created_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}, –û—à–∏–±–æ–∫: {error_count}")
    return created_count > 0 or skipped_count > 0

def check_and_update_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    print_header("–ü–†–û–í–ï–†–ö–ê .ENV –§–ê–ô–õ–ê")
    
    env_path = PROJECT_PATH / ".env"
    
    if not env_path.exists():
        print_warning(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º...")
        
        env_content = """# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=–í–í–ï–î–ò–¢–ï_–í–ê–®_–ü–ê–†–û–õ–¨_–ó–î–ï–°–¨
DB_NAME=ssto_test

# Node
NODE_ENV=development

# Email Configuration (Gmail)
EMAIL_USER=your-test-email@gmail.com
EMAIL_PASSWORD=your-app-password
EMAIL_HOST=imap.gmail.com
EMAIL_PORT=993"""
        
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print_warning("‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç PostgreSQL!")
        return False
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(env_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if '–í–í–ï–î–ò–¢–ï_–í–ê–®_–ü–ê–†–û–õ–¨_–ó–î–ï–°–¨' in content:
            print_error("–í .env —Ñ–∞–π–ª–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å PostgreSQL!")
            print_warning("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É DB_PASSWORD –≤ —Ñ–∞–π–ª–µ .env")
            return False
        elif 'sstopass' in content:
            print_warning("–í .env –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å 'sstopass'")
            print_warning("–ò–∑–º–µ–Ω–∏—Ç–µ DB_PASSWORD –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å PostgreSQL")
            return False
        else:
            print_success(".env —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True

def install_npm_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö npm –ø–∞–∫–µ—Ç–æ–≤"""
    print_header("–£–°–¢–ê–ù–û–í–ö–ê NPM –ü–ê–ö–ï–¢–û–í")
    
    packages = [
        "class-validator",
        "class-transformer",
        "imap",
        "mailparser",
        "@types/imap"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
    package_json_path = PROJECT_PATH / "package.json"
    if not package_json_path.exists():
        print_error("package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(package_json_path, 'r', encoding='utf-8') as f:
        package_content = f.read()
    
    packages_to_install = []
    for package in packages:
        if package not in package_content:
            packages_to_install.append(package)
    
    if not packages_to_install:
        print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    print_info(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {', '.join(packages_to_install)}")
    
    os.chdir(PROJECT_PATH)
    
    for package in packages_to_install:
        print_info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
        result = subprocess.run(
            f"npm install {package} --save",
            shell=True,
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            print_success(f"{package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print_warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å {package}: {result.stderr[:100]}")
    
    return True

def create_test_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print_header("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–ö–†–ò–ü–¢–û–í")
    
    # test-api.js
    test_api_content = '''// test-api.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π Day 2
const http = require('http');

const API_URL = 'http://localhost:3000';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
function checkHealth() {
    return new Promise((resolve) => {
        http.get(`${API_URL}/health`, (res) => {
            let data = '';
            res.on('data', (chunk) => { data += chunk; });
            res.on('end', () => {
                if (res.statusCode === 200) {
                    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', data);
                    resolve(true);
                } else {
                    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    resolve(false);
                }
            });
        }).on('error', (err) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
            resolve(false);
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
function createTestRequest() {
    return new Promise((resolve) => {
        const postData = JSON.stringify({
            vesselName: 'Test Vessel Day 2',
            requesterName: 'Test User',
            requesterEmail: 'test@example.com',
            testDate: '2025-01-20',
            testType: 'combined'
        });

        const options = {
            hostname: 'localhost',
            port: 3000,
            path: '/api/requests',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': postData.length
            }
        };

        const req = http.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => { data += chunk; });
            res.on('end', () => {
                if (res.statusCode === 201 || res.statusCode === 200) {
                    console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
                    resolve(true);
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', res.statusCode, data);
                    resolve(false);
                }
            });
        });

        req.on('error', (err) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
            resolve(false);
        });

        req.write(postData);
        req.end();
    });
}

async function runTests() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Day 2 API...\\n');
    
    const healthOk = await checkHealth();
    if (!healthOk) {
        console.log('\\n‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run start:dev');
        process.exit(1);
    }

    const requestCreated = await createTestRequest();
    
    if (requestCreated) {
        console.log('\\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('\\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã.');
    }
}

runTests();'''
    
    test_api_path = PROJECT_PATH / "test-api.js"
    with open(test_api_path, 'w', encoding='utf-8') as f:
        f.write(test_api_content)
    print_success("test-api.js —Å–æ–∑–¥–∞–Ω")
    
    return True

def check_nest_process():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ NestJS —Å–µ—Ä–≤–µ—Ä"""
    try:
        result = subprocess.run(
            'tasklist /FI "IMAGENAME eq node.exe" /FO CSV',
            shell=True,
            capture_output=True,
            text=True
        )
        if "node.exe" in result.stdout:
            print_info("Node.js –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
            return True
    except:
        pass
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header("–ü–û–õ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê DAY 2")
    print(f"{Colors.CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ + –û—á–∏—Å—Ç–∫–∞ + –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤{Colors.RESET}\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not PROJECT_PATH.exists():
        print_error(f"–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {PROJECT_PATH}")
        print_warning("–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å")
        sys.exit(1)
    
    os.chdir(PROJECT_PATH)
    print_success(f"–†–∞–±–æ—Ç–∞–µ–º –≤: {PROJECT_PATH}")
    
    # –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ò –ò –û–ß–ò–°–¢–ö–ê
    print(f"\n{Colors.BOLD}{'='*60}{Colors.RESET}")
    print(f"{Colors.BOLD}–≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ò –ò –û–ß–ò–°–¢–ö–ê{Colors.RESET}")
    print(f"{Colors.BOLD}{'='*60}{Colors.RESET}")
    
    # 1.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    db_ok = check_database_connection()
    if not db_ok:
        print_warning("–ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
    
    # 1.2 –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    clean_old_files()
    
    # 1.3 –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    create_folder_structure()
    
    # 1.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    files_status = check_existing_files()
    
    # –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í
    print(f"\n{Colors.BOLD}{'='*60}{Colors.RESET}")
    print(f"{Colors.BOLD}–≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í –ò –£–°–¢–ê–ù–û–í–ö–ê –ü–ê–ö–ï–¢–û–í{Colors.RESET}")
    print(f"{Colors.BOLD}{'='*60}{Colors.RESET}")
    
    # 2.1 –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    files_created = create_all_files()
    
    # 2.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env
    env_ok = check_and_update_env()
    
    # 2.3 –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –ø–∞–∫–µ—Ç–æ–≤
    packages_ok = install_npm_packages()
    
    # 2.4 –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    tests_created = create_test_scripts()
    
    # 2.5 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    check_nest_process()
    
    # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
    print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    print(f"\n{Colors.BOLD}–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:{Colors.RESET}")
    print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:    {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if db_ok else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}")
    print(f"  .env —Ñ–∞–π–ª:      {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if env_ok else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è'}")
    print(f"  –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:  {'‚úÖ –°–æ–∑–¥–∞–Ω—ã' if files_created else '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏'}")
    print(f"  NPM –ø–∞–∫–µ—Ç—ã:     {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' if packages_ok else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞'}")
    print(f"  –¢–µ—Å—Ç—ã:          {'‚úÖ –ì–æ—Ç–æ–≤—ã' if tests_created else '‚ö†Ô∏è –ù–µ —Å–æ–∑–¥–∞–Ω—ã'}")
    
    print(f"\n{Colors.CYAN}üìä –ü—Ä–æ–≥—Ä–µ—Å—Å MVP: 40% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë{Colors.RESET}")
    
    print(f"\n{Colors.YELLOW}{Colors.BOLD}üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:{Colors.RESET}")
    
    if not env_ok:
        print(f"{Colors.RED}1. –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª!{Colors.RESET}")
        print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ: {PROJECT_PATH / '.env'}")
        print(f"   –ò–∑–º–µ–Ω–∏—Ç–µ DB_PASSWORD –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç PostgreSQL")
    
    print(f"\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
    print(f"   {Colors.CYAN}cd {PROJECT_PATH}{Colors.RESET}")
    print(f"   {Colors.CYAN}npm run start:dev{Colors.RESET}")
    
    print(f"\n3. –í –Ω–æ–≤–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API:")
    print(f"   {Colors.CYAN}cd {PROJECT_PATH}{Colors.RESET}")
    print(f"   {Colors.CYAN}node test-api.js{Colors.RESET}")
    
    print(f"\n{Colors.GREEN}{Colors.BOLD}‚ú® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Day 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.RESET}")
    
    if not db_ok or not env_ok:
        print(f"\n{Colors.RED}‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –∏/–∏–ª–∏ .env —Ñ–∞–π–ª–∞!{Colors.RESET}")

if __name__ == "__main__":
    main()