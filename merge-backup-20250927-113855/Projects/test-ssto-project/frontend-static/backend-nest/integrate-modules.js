// integrate-modules.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\integrate-modules.js

const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = 'C:\\Projects\\test-ssto-project\\backend-nest';
const appModulePath = path.join(PROJECT_ROOT, 'src', 'app.module.ts');

console.log('üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...\n');
console.log(`üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: ${PROJECT_ROOT}\n`);

// –ù–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π app.module.ts
const newAppModule = `import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { SequelizeModule } from '@nestjs/sequelize';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ú–û–î–£–õ–ò, –∞ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
import { RequestModule } from './request/request.module';
import { SignalModule } from './signal/signal.module';

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–æ–¥—É–ª—è—Ö
import { AppController } from './app.controller';
import { EmailController } from './controllers/email.controller';
import { TestingController } from './controllers/testing.controller';
import { UserController } from './controllers/user.controller';
import { LogController } from './controllers/log.controller';
import { HealthController } from './controllers/health.controller';

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –≤–Ω–µ –º–æ–¥—É–ª–µ–π
import { AppService } from './app.service';
import { EmailSenderService } from './services/email-sender.service';
import { EmailParserService } from './services/email-parser.service';
import { EmailTaskService } from './services/email-task.service';
import { TestingService } from './testing/testing.service';
import { UserService } from './user/user.service';
import { LogService } from './log/log.service';

// –ú–æ–¥–µ–ª–∏
import SSASRequest from './models/request.model';
import Signal from './models/signal.model';
import User from './models/user.model';
import Log from './models/log.model';
import TestingScenario from './models/testingScenario.model';
import Vessel from './models/vessel.model';

@Module({
  imports: [
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: '.env',
    }),
    
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    SequelizeModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        dialect: 'postgres',
        host: configService.get('DB_HOST', 'localhost'),
        port: configService.get('DB_PORT', 5432),
        username: configService.get('DB_USER', 'ssto'),
        password: configService.get('DB_PASSWORD', 'sstopass'),
        database: configService.get('DB_NAME', 'sstodb'),
        models: [SSASRequest, Signal, User, Log, TestingScenario, Vessel],
        autoLoadModels: true,
        synchronize: false,
        logging: false,
      }),
    }),
    
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–π –≤ —Å–µ—Ä–≤–∏—Å—ã –≤–Ω–µ –º–æ–¥—É–ª–µ–π
    SequelizeModule.forFeature([User, Log, TestingScenario]),
    
    // –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ú–û–î–£–õ–ò, –ê –ù–ï –ö–û–ù–¢–†–û–õ–õ–ï–†–´
    RequestModule,  // –°–æ–¥–µ—Ä–∂–∏—Ç RequestController –∏ ConfirmationController
    SignalModule,   // –°–æ–¥–µ—Ä–∂–∏—Ç SignalController
  ],
  controllers: [
    AppController,
    EmailController,
    TestingController,
    UserController,
    LogController,
    HealthController,
  ],
  providers: [
    AppService,
    EmailSenderService,
    EmailParserService,
    EmailTaskService,
    TestingService,
    UserService,
    LogService,
  ],
})
export class AppModule {}`;

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
const backupPath = appModulePath + '.backup_' + Date.now();
const currentContent = fs.readFileSync(appModulePath, 'utf8');
fs.writeFileSync(backupPath, currentContent, 'utf8');
console.log(`üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${path.basename(backupPath)}\n`);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π app.module.ts
fs.writeFileSync(appModulePath, newAppModule, 'utf8');

console.log('‚úÖ app.module.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –º–æ–¥—É–ª–µ–π');
console.log('\nüìã –ß—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ:');
console.log('  ‚Ä¢ RequestModule –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–æ–¥—É–ª—å (—Å–æ–¥–µ—Ä–∂–∏—Ç RequestController)');
console.log('  ‚Ä¢ SignalModule –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–æ–¥—É–ª—å (—Å–æ–¥–µ—Ä–∂–∏—Ç SignalController)');
console.log('  ‚Ä¢ –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤');
console.log('  ‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–æ–¥—É–ª—è—Ö');

console.log('\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:');
console.log('  cd C:\\Projects\\test-ssto-project\\backend-nest');
console.log('  Ctrl+C (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)');
console.log('  npm run start:dev');

console.log('\n‚úÖ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å:');
console.log('  ‚Ä¢ http://localhost:3001/requests - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫');
console.log('  ‚Ä¢ http://localhost:3001/signals - —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤');
console.log('  ‚Ä¢ http://localhost:5173/requests - frontend —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞—è–≤–æ–∫');