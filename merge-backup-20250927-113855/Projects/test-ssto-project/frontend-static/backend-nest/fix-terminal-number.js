// fix-terminal-number.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\fix-terminal-number.js

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è terminal_number –≤ –º–æ–¥–µ–ª–∏...\n');

const modelPath = path.join(__dirname, 'src/models/request.model.ts');

if (fs.existsSync(modelPath)) {
  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
  let content = fs.readFileSync(modelPath, 'utf8');
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  const backupPath = modelPath + '.backup_' + Date.now();
  fs.writeFileSync(backupPath, content);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${path.basename(backupPath)}`);
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å terminal_number –±–µ–∑ @Column
  const lines = content.split('\n');
  let fixed = false;
  
  for (let i = 0; i < lines.length; i++) {
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ terminal_number –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @Column –ø–µ—Ä–µ–¥ –Ω–∏–º
    if (lines[i].includes('terminal_number:') && !lines[i].includes('@Column')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –Ω–µ—Ç @Column
      if (i > 0 && !lines[i-1].includes('@Column')) {
        console.log(`üìç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i+1}: ${lines[i].trim()}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Column –ø–µ—Ä–µ–¥ –ø–æ–ª–µ–º
        const indent = lines[i].match(/^\s*/)[0]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø
        const columnDecorator = `${indent}@Column({
${indent}  field: 'terminal_number',
${indent}  type: DataType.STRING
${indent}})`;
        
        lines[i] = columnDecorator + '\n' + lines[i];
        fixed = true;
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Column');
        break;
      }
    }
  }
  
  if (fixed) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    content = lines.join('\n');
    fs.writeFileSync(modelPath, content);
    console.log('‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
  } else {
    console.log('‚ö†Ô∏è  –ü–æ–ª–µ terminal_number —É–∂–µ –∏–º–µ–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
  console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  const newContent = fs.readFileSync(modelPath, 'utf8');
  const newLines = newContent.split('\n');
  
  for (let i = 0; i < newLines.length; i++) {
    if (newLines[i].includes('terminal_number')) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 —Å—Ç—Ä–æ–∫–∏ –¥–æ –∏ 1 –ø–æ—Å–ª–µ
      const start = Math.max(0, i - 3);
      const end = Math.min(newLines.length, i + 2);
      
      console.log('\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ terminal_number:');
      for (let j = start; j < end; j++) {
        const marker = j === i ? ' ‚Üí ' : '   ';
        console.log(`${marker}${j+1}: ${newLines[j]}`);
      }
      break;
    }
  }
  
} else {
  console.log('‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:');
console.log('   Ctrl+C (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)');
console.log('   npm run start:dev (–∑–∞–ø—É—Å—Ç–∏—Ç—å)');
console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞');
console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ http://localhost:3001/requests');