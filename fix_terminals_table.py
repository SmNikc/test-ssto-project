#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Ä—É—Å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã
–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: C:\Projects\test-ssto-project\fix_terminals_table.py
"""

import re
import os
from datetime import datetime

def fix_terminals_table():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤"""
    
    file_path = r'C:\Projects\test-ssto-project\index_14_36.html'
    
    print("=" * 70)
    print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –¢–ï–†–ú–ò–ù–ê–õ–û–í")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.before_terminals_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    print("\nüìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω")
        print(f"   üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(backup_path)}")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)}")
        return False
    
    # 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ loadTerminals
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ loadTerminals...")
    
    new_load_terminals = """function loadTerminals() {
    console.log('üö¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤...');
    
    const terminals = JSON.parse(localStorage.getItem('ssasTerminals') || 
                                localStorage.getItem('terminals') || 
                                localStorage.getItem('vessels') || '[]');
    const tbody = document.getElementById('terminals-tbody');
    
    if (tbody) {
        tbody.innerHTML = '';
        
        if (terminals.length === 0) {
            tbody.innerHTML = '<tr><td colspan="9" style="text-align: center; padding: 20px;">–ù–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤</td></tr>';
        } else {
            terminals.forEach(terminal => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                let status = '–ê–∫—Ç–∏–≤–µ–Ω';
                if (terminal.status === 'inactive') status = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                if (terminal.status === 'tested') status = '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω';
                if (terminal.status === 'pending') status = '–û–∂–∏–¥–∞–µ—Ç —Ç–µ—Å—Ç–∞';
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç + 1 –≥–æ–¥)
                let nextTestDate = '';
                if (terminal.lastTest || terminal.last_test) {
                    const lastDate = new Date(terminal.lastTest || terminal.last_test);
                    if (!isNaN(lastDate)) {
                        const nextDate = new Date(lastDate);
                        nextDate.setFullYear(nextDate.getFullYear() + 1);
                        nextTestDate = nextDate.toISOString().split('T')[0];
                    }
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${terminal.terminal_number || terminal.stationNumber || ''}</td>
                    <td>${terminal.vessel_name || terminal.vesselName || terminal.name || ''}</td>
                    <td>${terminal.mmsi || ''}</td>
                    <td>${terminal.terminal_type || terminal.terminalType || terminal.type || 'INMARSAT'}</td>
                    <td>${terminal.owner || terminal.shipOwner || ''}</td>
                    <td>${terminal.lastTest || terminal.last_test || ''}</td>
                    <td>${nextTestDate}</td>
                    <td><span class="status-badge status-${terminal.status || 'active'}">${status}</span></td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewTerminal('${terminal.id || terminal.terminal_number}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                        <button class="btn btn-success btn-sm" onclick="testTerminal('${terminal.terminal_number}')">–¢–µ—Å—Ç</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
    }
    
    if (typeof loadDashboard !== 'undefined') loadDashboard();
}"""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
    old_func_pattern = r'function loadTerminals\(\)\s*\{[^}]*(?:\{[^}]*\}[^}]*)*\}'
    if re.search(old_func_pattern, content):
        content = re.sub(old_func_pattern, new_load_terminals, content)
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è loadTerminals –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    # 2. –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ viewTerminal –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'function viewTerminal' not in content:
        print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ viewTerminal...")
        
        view_terminal_func = """
// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
function viewTerminal(terminalId) {
    const terminals = JSON.parse(localStorage.getItem('ssasTerminals') || 
                                  localStorage.getItem('terminals') || '[]');
    const terminal = terminals.find(t => 
        t.id === terminalId || 
        t.terminal_number === terminalId ||
        t.stationNumber === terminalId
    );
    
    if (!terminal) {
        alert('–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    let nextTestDate = '';
    if (terminal.lastTest || terminal.last_test) {
        const lastDate = new Date(terminal.lastTest || terminal.last_test);
        if (!isNaN(lastDate)) {
            const nextDate = new Date(lastDate);
            nextDate.setFullYear(nextDate.getFullYear() + 1);
            nextTestDate = nextDate.toLocaleDateString('ru-RU');
        }
    }
    
    const info = `–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–†–ú–ò–ù–ê–õ–ï –°–°–¢–û
    
–ù–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: ${terminal.terminal_number || terminal.stationNumber || ''}
–°—É–¥–Ω–æ: ${terminal.vessel_name || terminal.vesselName || terminal.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
MMSI: ${terminal.mmsi || '–ù–µ —É–∫–∞–∑–∞–Ω'}
IMO: ${terminal.imo || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–¢–∏–ø —Å–≤—è–∑–∏: ${terminal.terminal_type || terminal.type || 'INMARSAT'}
–í–ª–∞–¥–µ–ª–µ—Ü: ${terminal.owner || terminal.shipOwner || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: ${terminal.lastTest || terminal.last_test || '–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è'}
–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç: ${nextTestDate || '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}
–°—Ç–∞—Ç—É—Å: ${terminal.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`;
    
    alert(info);
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
function testTerminal(terminalNumber) {
    if (confirm('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ' + terminalNumber + '?')) {
        const signal = {
            id: 'SIG-TEST-' + Date.now(),
            stationNumber: terminalNumber,
            signalType: 'TEST',
            receivedAt: new Date().toISOString(),
            status: 'new',
            isTest: true
        };
        
        const signals = JSON.parse(localStorage.getItem('signals') || '[]');
        signals.push(signal);
        localStorage.setItem('signals', JSON.stringify(signals));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        const terminals = JSON.parse(localStorage.getItem('ssasTerminals') || '[]');
        const terminal = terminals.find(t => t.terminal_number === terminalNumber);
        if (terminal) {
            terminal.lastTest = new Date().toISOString().split('T')[0];
            terminal.status = 'tested';
            localStorage.setItem('ssasTerminals', JSON.stringify(terminals));
        }
        
        if (typeof loadSignals !== 'undefined') loadSignals();
        if (typeof loadTerminals !== 'undefined') loadTerminals();
        
        alert('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω');
    }
}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </script>
        last_script = content.rfind('</script>')
        if last_script > 0:
            content = content[:last_script] + view_terminal_func + '\n' + content[last_script:]
            print("   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ viewTerminal –∏ testTerminal –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # 3. –£–õ–£–ß–®–ê–ï–ú –ü–ê–†–°–ò–ù–ì –î–ê–¢–¨ –í ExcelLoader
    print("\nüîß –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –≤ ExcelLoader...")
    
    # –ù–∞—Ö–æ–¥–∏–º processExcelData –≤ ExcelLoader
    excel_process_pattern = r'(processExcelData\(data\)\s*\{[^}]*terminal[^}]*\})'
    excel_match = re.search(excel_process_pattern, content, re.DOTALL | re.IGNORECASE)
    
    if excel_match:
        old_process = excel_match.group(0)
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç
        terminal_creation = """
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
                const terminal = {
                    id: 'T-' + Date.now() + '-' + index,
                    terminal_number: stationNumber,
                    vessel_name: row['–°—É–¥–Ω–æ'] || row['Vessel'] || '',
                    mmsi: row['MMSI'] || '',
                    terminal_type: row['–¢–∏–ø —Å–≤—è–∑–∏'] || row['Type'] || 'INMARSAT',
                    owner: row['–í–ª–∞–¥–µ–ª–µ—Ü'] || row['Owner'] || '',
                    lastTest: row['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç'] || row['Last Test'] || '',
                    status: 'active'
                };
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –ª—é–±–æ–º –ø–æ–ª–µ
                for (let key in row) {
                    if ((key.toLowerCase().includes('–ø–æ—Å–ª–µ–¥') && key.toLowerCase().includes('—Ç–µ—Å—Ç')) ||
                        key.toLowerCase().includes('last') && key.toLowerCase().includes('test')) {
                        const dateValue = row[key];
                        if (dateValue) {
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∞—Ç—É
                            const date = new Date(dateValue);
                            if (!isNaN(date)) {
                                terminal.lastTest = date.toISOString().split('T')[0];
                                terminal.status = 'tested';
                            } else {
                                terminal.lastTest = String(dateValue);
                            }
                        }
                    }
                }"""
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–∞ –Ω–æ–≤–æ–µ
        if '// –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª' in old_process:
            new_process = re.sub(
                r'//\s*–°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª[^}]+\};',
                terminal_creation,
                old_process
            )
            content = content.replace(old_process, new_process)
            print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –≤ ExcelLoader —É–ª—É—á—à–µ–Ω")
    
    # 4. –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ò–õ–ò –î–õ–Ø –°–¢–ê–¢–£–°–û–í
    if '.status-tested' not in content:
        print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤...")
        
        status_styles = """
        .status-tested {
            background: #c7f3c7;
            color: #0d5f0d;
        }
        
        .status-inactive {
            background: #f3c7c7;
            color: #5f0d0d;
        }
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø–µ—Ä–µ–¥ </style>
        style_end = content.find('</style>')
        if style_end > 0:
            content = content[:style_end] + status_styles + content[style_end:]
            print("   ‚úÖ –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        return False
    
    print("\n" + "=" * 70)
    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!")
    print("\nüìã –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    print("  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤")
    print("  ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞ (+1 –≥–æ–¥)")
    print("  ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ '–î–µ–π—Å—Ç–≤–∏—è'")
    print("  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –∏–∑ Excel")
    print("\n‚ö†Ô∏è –¢–µ–ø–µ—Ä—å:")
    print("  1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5)")
    print("  2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤")
    
    return True

if __name__ == "__main__":
    fix_terminals_table()
    print("\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")