#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8 –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –≤ index.html
–ü—É—Ç—å: C:\\Projects\\test-ssto-project\\fix_pdf_encoding.py
–ó–∞–ø—É—Å–∫: python fix_pdf_encoding.py
"""

import os
import re
import sys
from pathlib import Path

def fix_pdf_encoding():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É index.html
    index_path = Path(r"C:\Projects\test-ssto-project\index.html")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not index_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_path}")
        return False
    
    print(f"üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {index_path}")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    try:
        with open(index_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except UnicodeDecodeError:
        # –ï—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å UTF-8, –ø—Ä–æ–±—É—é windows-1251...")
        try:
            with open(index_path, 'r', encoding='windows-1251') as f:
                content = f.read()
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
            return False
    
    print("‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    backup_path = index_path.with_suffix('.html.backup')
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –°—á–µ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    changes_made = 0
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –≤ PDF –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ jsPDF
    jspdf_script = r'<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>'
    
    if jspdf_script in content:
        print("üîß –î–æ–±–∞–≤–ª—è—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è jsPDF...")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        cyrillic_support = '''
    <!-- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è PDF -->
    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
        function cyrillicToTranslit(text) {
            const converter = {
                '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
                '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i',
                '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
                '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
                '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch',
                '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '',
                '—ç': 'e', '—é': 'yu', '—è': 'ya',
                '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D',
                '–ï': 'E', '–Å': 'E', '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I',
                '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N',
                '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T',
                '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch',
                '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '',
                '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
                ' ': ' ', '.': '.', ',': ',', '!': '!', '?': '?',
                '-': '-', ':': ':', ';': ';', '"': '"', "'": "'",
                '(': '(', ')': ')', '[': '[', ']': ']', '/': '/',
                '¬´': '"', '¬ª': '"', '‚Äî': '-', '‚Äì': '-'
            };
            
            if (!text) return '';
            return text.split('').map(char => converter[char] || char).join('');
        }
        
        // –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ PDF
        function addTextToPDF(doc, text, x, y, options) {
            try {
                // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è PDF
                const translitText = cyrillicToTranslit(String(text));
                doc.text(translitText, x, y, options);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ PDF:', e);
                // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø—Ü–∏–π
                try {
                    doc.text(String(text), x, y);
                } catch (e2) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç:', text);
                }
            }
        }
    </script>'''
        
        content = content.replace(jspdf_script, jspdf_script + cyrillic_support)
        changes_made += 1
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é generateConfirmationPDF
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é generateConfirmationPDF...")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é generateConfirmationPDF –∏ –∑–∞–º–µ–Ω—è–µ–º doc.text –Ω–∞ addTextToPDF
    def replace_in_function(content, func_name):
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        pattern = rf'(function {func_name}\([^)]*\)\s*{{)'
        match = re.search(pattern, content)
        
        if match:
            start = match.end()
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏)
            brace_count = 1
            i = start
            while i < len(content) and brace_count > 0:
                if content[i] == '{':
                    brace_count += 1
                elif content[i] == '}':
                    brace_count -= 1
                i += 1
            
            if brace_count == 0:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
                func_body = content[start:i-1]
                # –ó–∞–º–µ–Ω—è–µ–º doc.text –Ω–∞ addTextToPDF
                new_func_body = re.sub(
                    r'doc\.text\(',
                    r'addTextToPDF(doc, ',
                    func_body
                )
                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                new_content = content[:start] + new_func_body + content[i-1:]
                return new_content, True
        
        return content, False
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É –¥–ª—è generateConfirmationPDF
    content, changed = replace_in_function(content, 'generateConfirmationPDF')
    if changed:
        changes_made += 1
        print("  ‚úì –§—É–Ω–∫—Ü–∏—è generateConfirmationPDF –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é exportReportToPDF
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é exportReportToPDF...")
    content, changed = replace_in_function(content, 'exportReportToPDF')
    if changed:
        changes_made += 1
        print("  ‚úì –§—É–Ω–∫—Ü–∏—è exportReportToPDF –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã...")
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω (–±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
    replacements = [
        ('√ê¬¢√ê‚Ä¢√ê¬°√ê¬¢ √ê¬°√ê¬°√ê¬¢√ê≈æ', '–¢–ï–°–¢ –°–°–¢–û'),
        ('√ê≈æ√ë‚Äö√ë‚Ä°√ê¬µ√ë‚Äö', '–û—Ç—á–µ—Ç'),
        ('√ê‚Äî√ê¬∞√ë√ê¬≤√ê¬∫√ê¬∞', '–ó–∞—è–≤–∫–∞'),
        ('√ê¬°√ê¬∏√ê¬≥√ê¬Ω√ê¬∞√ê¬ª', '–°–∏–≥–Ω–∞–ª'),
        ('√ê¬¢√ë‚Ç¨√ê¬µ√ê¬≤√ê¬æ√ê¬≥', '–¢—Ä–µ–≤–æ–≥'),
        ('√ë√ê¬æ√ê¬∑√ê¬¥√ê¬∞√ê¬Ω√ê¬∞', '—Å–æ–∑–¥–∞–Ω–∞'),
        ('√ê¬ø√ê¬æ√ê¬¥√ë‚Äö√ê¬≤√ê¬µ√ë‚Ç¨√ê¬∂√ê¬¥√ê¬µ√ê¬Ω', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'),
    ]
    
    for old_text, new_text in replacements:
        if old_text in content:
            content = content.replace(old_text, new_text)
            changes_made += 1
            print(f"  ‚úì –ó–∞–º–µ–Ω–µ–Ω–æ: {old_text[:20]}... ‚Üí {new_text}")
    
    # 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è title –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –º–µ—Ç–∞-—Ç–µ–≥–∏...")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º title
    content = re.sub(
        r'<title>[^<]*</title>',
        '<title>–ú–æ–¥—É–ª—å –¢–ï–°–¢ –°–°–¢–û - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</title>',
        content
    )
    changes_made += 1
    
    # 6. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'charset="UTF-8"' not in content and 'charset=UTF-8' not in content:
        content = content.replace('<head>', '<head>\n    <meta charset="UTF-8">')
        changes_made += 1
        print("  ‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8")
    
    # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    with open(index_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changes_made}")
    print(f"üìù –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup_path}")
    
    return True

if __name__ == "__main__":
    try:
        success = fix_pdf_encoding()
        if success:
            print("\nüéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("‚ÑπÔ∏è  –¢–µ–ø–µ—Ä—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.")
            print("    –í—Å–µ —Ç–µ–∫—Å—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF.")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)