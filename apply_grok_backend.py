#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è GROK —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π backend –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
–ü—É—Ç—å: C:\Projects\test-ssto-project\apply_grok_backend.py
"""

import shutil
from pathlib import Path
from datetime import datetime
import re

def fix_encoding_and_apply():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ GROK —Å backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    project_dir = Path(r'C:\Projects\test-ssto-project\frontend-static')
    current_file = project_dir / 'index_fixed.html'
    
    print("=" * 70)
    print("–ü–†–ò–ú–ï–ù–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø GROK –° BACKEND –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô")
    print("=" * 70)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if current_file.exists():
        backup_name = f"index_fixed.html.backup_before_backend_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        backup_file = project_dir / backup_name
        shutil.copy2(current_file, backup_file)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML —Å backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    
    html_content = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ú–æ–¥—É–ª—å –¢–µ—Å—Ç –°–°–¢–û</title>
    <link rel="stylesheet" href="https://unpkg.com/openlayers@7.3.0/dist/ol.css">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        header { display: flex; justify-content: space-between; align-items: center; position: relative; }
        .logo { font-size: 24px; }
        .logo span { font-weight: bold; }
        .actions { display: flex; gap: 10px; align-items: center; }
        
        /* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API */
        #api-status { 
            font-size: 20px; 
            margin-right: 10px;
            cursor: help;
            transition: color 0.3s;
        }
        
        .btn { padding: 8px 16px; border: none; cursor: pointer; border-radius: 4px; }
        .btn-primary { background: #007bff; color: white; }
        .btn-secondary { background: #6c757d; color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-sm { padding: 4px 8px; font-size: 0.875em; }
        
        nav { margin: 20px 0; }
        .tab { padding: 10px 20px; margin-right: 5px; background: #f0f0f0; cursor: pointer; border-radius: 4px 4px 0 0; }
        .tab.active { background: white; border: 1px solid #ddd; border-bottom: none; }
        .content { display: none; padding: 20px; border: 1px solid #ddd; border-radius: 0 4px 4px 4px; }
        .content.active { display: block; }
        
        .stats { display: flex; gap: 20px; }
        .stat { flex: 1; padding: 20px; background: #f8f9fa; border-radius: 4px; }
        .stat h3 { margin: 0 0 10px; }
        .stat p { font-size: 24px; margin: 0; }
        .stat small { display: block; color: #6c757d; }
        
        .status { margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 4px; }
        .quick-actions { display: flex; gap: 10px; margin-top: 20px; }
        
        form { display: grid; gap: 15px; }
        input, select { padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 10px; border: 1px solid #ddd; text-align: left; }
        th { background: #f0f0f0; }
        
        #map { height: 400px; }
        
        .status-badge { padding: 4px 8px; border-radius: 4px; font-size: 0.8em; }
        .status-active { background: #d4edda; color: #155724; }
        .status-inactive { background: #f8d7da; color: #721c24; }
        .status-tested { background: #c7f3c7; color: #0d5f0d; }
        .status-pending { background: #fff3cd; color: #856404; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                üö¢ <span>–ú–û–î–£–õ–¨ –¢–ï–°–¢ –°–°–¢–û</span>
                <div style="font-size: 14px; color: #6c757d;">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –°–°–¢–û</div>
            </div>
            <div class="actions">
                <span id="api-status" title="–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è">‚óè</span>
                <button class="btn btn-primary" onclick="uploadExcel()">üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel</button>
                <button class="btn btn-secondary" onclick="configureEmail()">‚úâÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email</button>
                <button class="btn btn-secondary" onclick="syncWithBackend()">üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</button>
            </div>
        </header>
        
        <nav>
            <button class="tab active" data-tab="dashboard">üìä –ì–ª–∞–≤–Ω–∞—è</button>
            <button class="tab" data-tab="new-request">‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</button>
            <button class="tab" data-tab="requests">üìã –ó–∞—è–≤–∫–∏</button>
            <button class="tab" data-tab="signals">üì° –°–∏–≥–Ω–∞–ª—ã</button>
            <button class="tab" data-tab="terminals">üñ•Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª—ã</button>
            <button class="tab" data-tab="map">üó∫Ô∏è –ö–∞—Ä—Ç–∞</button>
            <button class="tab" data-tab="reports">üìà –û—Ç—á—ë—Ç—ã</button>
        </nav>
        
        <div id="dashboard" class="content active">
            <div class="stats">
                <div class="stat">
                    <h3>–ê–ö–¢–ò–í–ù–´–ï –ó–ê–Ø–í–ö–ò</h3>
                    <p id="active-requests">0</p>
                    <small>‚Üë +2 –∑–∞ —Å–µ–≥–æ–¥–Ω—è</small>
                </div>
                <div class="stat">
                    <h3>–û–ñ–ò–î–ê–Æ–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø</h3>
                    <p id="pending-confirm">0</p>
                    <small>–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</small>
                </div>
                <div class="stat">
                    <h3>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û</h3>
                    <p id="confirmed">0</p>
                    <small>‚Üë +5 –∑–∞ –Ω–µ–¥–µ–ª—é</small>
                </div>
                <div class="stat">
                    <h3>–í–°–ï–ì–û –°–ò–ì–ù–ê–õ–û–í</h3>
                    <p id="total-signals">0</p>
                    <small>–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</small>
                </div>
            </div>
            
            <div class="status">
                <h3>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
                <p>–†–µ–∂–∏–º: <span id="auto-confirm-status">–û–¢–ö–õ–Æ–ß–ï–ù</span></p>
                <button class="btn btn-primary" onclick="toggleAutoConfirm()">–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º</button>
            </div>
            
            <div class="quick-actions">
                <button class="btn btn-primary" onclick="processEmailQueue()">üìß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å email –æ—á–µ—Ä–µ–¥—å</button>
                <button class="btn btn-primary" onclick="syncSearchSea()">üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ü–æ–∏—Å–∫-–ú–æ—Ä–µ</button>
                <button class="btn btn-primary" onclick="generateTestData()">üé≤ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</button>
                <button class="btn btn-primary" onclick="systemCheck()">üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</button>
            </div>
        </div>
        
        <div id="new-request" class="content">
            <h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–°–¢–û</h2>
            <form id="new-request-form">
                <div>
                    <label>‚ö†Ô∏è –ù–û–ú–ï–† –°–¢–û–ô–ö–ò –°–°–¢–û (–ì–õ–ê–í–ù–´–ô –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†) *</label>
                    <small>–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞</small>
                    <input type="text" id="terminal-number" required>
                </div>
                <div>
                    <label>–¢–∏–ø —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–≤—è–∑–∏ *</label>
                    <select id="sat-type" required>
                        <option>–ò–ù–ú–ê–†–°–ê–¢</option>
                        <option>–ò–†–ò–î–ò–£–ú</option>
                    </select>
                </div>
                <div>
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞ *</label>
                    <input type="text" id="vessel-name" required>
                </div>
                <div>
                    <label>MMSI *</label>
                    <input type="text" id="mmsi" required>
                </div>
                <div>
                    <label>IMO</label>
                    <input type="text" id="imo">
                </div>
                <div>
                    <label>–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü *</label>
                    <input type="text" id="owner" required>
                </div>
                <div>
                    <label>Email *</label>
                    <input type="email" id="email" required>
                </div>
                <div>
                    <label>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞ *</label>
                    <input type="date" id="test-date" required>
                </div>
                <div>
                    <label>–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞</label>
                    <input type="time" id="test-time">
                </div>
                <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É</button>
            </form>
        </div>
        
        <div id="requests" class="content">
            <h2>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                        <th>–°—É–¥–Ω–æ</th>
                        <th>MMSI</th>
                        <th>IMO</th>
                        <th>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="requests-tbody">
                    <tr><td colspan="8" style="text-align: center;">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>
                </tbody>
            </table>
        </div>
        
        <div id="signals" class="content">
            <h2>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –°–°–¢–û</h2>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                        <th>–°—É–¥–Ω–æ</th>
                        <th>MMSI</th>
                        <th>IMO</th>
                        <th>–¢–∏–ø</th>
                        <th>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è</th>
                        <th>–¢–µ—Å—Ç/–¢—Ä–µ–≤–æ–≥–∞</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="signals-tbody">
                    <tr><td colspan="9" style="text-align: center;">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>
                </tbody>
            </table>
        </div>
        
        <div id="terminals" class="content">
            <h2>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –°–°–¢–û</h2>
            <div style="margin-bottom: 20px;">
                <button class="btn btn-primary" onclick="addTerminal()">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª</button>
                <button class="btn btn-secondary" onclick="exportTerminalsCSV()">üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>–ù–æ–º–µ—Ä —Å—Ç–æ–π–∫–∏</th>
                        <th>–°—É–¥–Ω–æ</th>
                        <th>MMSI</th>
                        <th>–¢–∏–ø —Å–≤—è–∑–∏</th>
                        <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
                        <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç</th>
                        <th>–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="terminals-tbody">
                    <tr><td colspan="9" style="text-align: center;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>
                </tbody>
            </table>
        </div>
        
        <div id="map" class="content">
            <h2>–ö–∞—Ä—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –°–°–¢–û</h2>
            <div id="map-container" style="height: 400px; border: 1px solid #ddd;"></div>
            <div style="margin-top: 10px;">
                <button class="btn btn-primary" onclick="showAllSignals()">üéØ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ</button>
                <button class="btn btn-secondary" onclick="measureDistance()">üìè –ò–∑–º–µ—Ä–∏—Ç—å</button>
                <button class="btn btn-secondary" onclick="takeScreenshot()">üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç</button>
                <button class="btn btn-secondary" onclick="clearMap()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
        </div>
        
        <div id="reports" class="content">
            <h2>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤</h2>
            <div style="margin-bottom: 20px;">
                <label>–¢–∏–ø –æ—Ç—á—ë—Ç–∞</label>
                <select id="report-type">
                    <option>–°—É—Ç–æ—á–Ω—ã–π</option>
                    <option>–ù–µ–¥–µ–ª—å–Ω—ã–π</option>
                    <option>–ú–µ—Å—è—á–Ω—ã–π</option>
                    <option>–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥</option>
                </select>
            </div>
            <div id="report-period" style="display: none;">
                <label>–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞</label>
                <input type="date" id="report-start">
                <label>–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞</label>
                <input type="date" id="report-end">
            </div>
            <button class="btn btn-primary" onclick="generateReport()">üìä –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç</button>
            <button class="btn btn-secondary" onclick="exportPDF()">üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF</button>
        </div>
    </div>
    
    <script src="https://unpkg.com/openlayers@7.3.0/dist/ol.js"></script>
    <script src="https://unpkg.com/xlsx@latest/dist/xlsx.full.min.js"></script>
    <script>
        // ===================== Backend API –∫–ª–∞—Å—Å =====================
        class BackendAPI {
            constructor() {
                this.baseURL = 'http://localhost:3001';
                this.headers = {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer test-token'
                };
                this.isOnline = false;
            }
            
            async request(method, endpoint, data = null) {
                try {
                    const url = this.baseURL + endpoint;
                    console.log(`API ${method} ${url}`, data);
                    
                    const response = await fetch(url, {
                        method,
                        headers: this.headers,
                        body: data ? JSON.stringify(data) : null
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    
                    const result = await response.json();
                    this.setOnlineStatus(true);
                    return result;
                } catch (error) {
                    console.error('API Error:', error);
                    this.setOnlineStatus(false);
                    // Fallback –Ω–∞ LocalStorage
                    return this.fallbackToLocalStorage(method, endpoint, data);
                }
            }
            
            setOnlineStatus(isOnline) {
                this.isOnline = isOnline;
                const indicator = document.getElementById('api-status');
                if (indicator) {
                    if (isOnline) {
                        indicator.style.color = 'green';
                        indicator.title = 'Backend –ø–æ–¥–∫–ª—é—á–µ–Ω';
                    } else {
                        indicator.style.color = 'orange';
                        indicator.title = '–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ';
                    }
                }
            }
            
            fallbackToLocalStorage(method, endpoint, data) {
                console.log('Fallback to LocalStorage:', method, endpoint);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è localStorage
                const parts = endpoint.split('/').filter(p => p);
                const entity = parts[0]; // 'requests', 'signals', 'terminals'
                const id = parts[1];
                
                const storageKey = `ssto_${entity}`;
                let store = JSON.parse(localStorage.getItem(storageKey) || '[]');
                
                if (method === 'GET') {
                    if (id) {
                        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                        return store.find(item => item.id == id) || null;
                    }
                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    return store;
                    
                } else if (method === 'POST') {
                    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    const newItem = {
                        ...data,
                        id: `${entity.toUpperCase()}-${Date.now()}`,
                        created_at: new Date().toISOString()
                    };
                    store.push(newItem);
                    localStorage.setItem(storageKey, JSON.stringify(store));
                    return newItem;
                    
                } else if (method === 'PUT' || method === 'PATCH') {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                    const index = store.findIndex(item => item.id == id);
                    if (index !== -1) {
                        store[index] = { ...store[index], ...data };
                        localStorage.setItem(storageKey, JSON.stringify(store));
                        return store[index];
                    }
                    return null;
                    
                } else if (method === 'DELETE') {
                    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                    store = store.filter(item => item.id != id);
                    localStorage.setItem(storageKey, JSON.stringify(store));
                    return { success: true };
                }
                
                return null;
            }
        }

        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
        const api = new BackendAPI();

        // ===================== –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ =====================
        document.addEventListener('click', (e) => {
            const btn = e.target.closest('.tab[data-tab]');
            if (!btn) return;
            e.preventDefault();
            
            const targetId = btn.dataset.tab;
            
            // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.content').forEach(c => c.classList.remove('active'));
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é
            const target = document.getElementById(targetId);
            if (target) target.classList.add('active');
            
            // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            btn.classList.add('active');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
            if (targetId === 'map' && !window.mapInitialized) {
                setTimeout(initMap, 100);
                window.mapInitialized = true;
            }
        });

        // ===================== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====================
        async function loadDashboard() {
            try {
                const requests = await api.request('GET', '/requests');
                const signals = await api.request('GET', '/signals');
                
                document.getElementById('active-requests').textContent = requests.length;
                document.getElementById('pending-confirm').textContent = 
                    requests.filter(r => r.status === 'pending').length;
                document.getElementById('confirmed').textContent = 
                    requests.filter(r => r.status === 'confirmed').length;
                document.getElementById('total-signals').textContent = signals.length;
                
                const autoConfirm = localStorage.getItem('autoConfirm') === 'true';
                document.getElementById('auto-confirm-status').textContent = 
                    autoConfirm ? '–í–ö–õ–Æ–ß–ï–ù' : '–û–¢–ö–õ–Æ–ß–ï–ù';
            } catch (error) {
                console.error('Dashboard load error:', error);
            }
        }

        async function loadRequests() {
            try {
                const data = await api.request('GET', '/requests');
                const tbody = document.getElementById('requests-tbody');
                
                if (!tbody) return;
                
                tbody.innerHTML = '';
                
                if (!data || data.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="8" style="text-align: center;">–ù–µ—Ç –∑–∞—è–≤–æ–∫</td></tr>';
                    return;
                }
                
                data.forEach(req => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${req.id}</td>
                        <td>${req.terminal_number || ''}</td>
                        <td>${req.vessel_name || ''}</td>
                        <td>${req.mmsi || ''}</td>
                        <td>${req.imo_number || ''}</td>
                        <td>${req.planned_test_date || ''}</td>
                        <td><span class="status-badge status-${req.status || 'pending'}">${(req.status || 'pending').toUpperCase()}</span></td>
                        <td>
                            <button class="btn btn-primary btn-sm" onclick="confirmRequest('${req.id}')">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Requests load error:', error);
            }
        }

        async function loadSignals() {
            try {
                const data = await api.request('GET', '/signals');
                const tbody = document.getElementById('signals-tbody');
                
                if (!tbody) return;
                
                tbody.innerHTML = '';
                
                if (!data || data.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="9" style="text-align: center;">–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤</td></tr>';
                    return;
                }
                
                data.forEach(sig => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${sig.signal_number || sig.id}</td>
                        <td>${sig.terminal_number || ''}</td>
                        <td>${sig.vessel_name || ''}</td>
                        <td>${sig.mmsi || ''}</td>
                        <td>${sig.imo_number || ''}</td>
                        <td>${sig.signal_type || ''}</td>
                        <td>${sig.received_at || ''}</td>
                        <td>${sig.is_test ? '–¢–µ—Å—Ç' : '–¢—Ä–µ–≤–æ–≥–∞'}</td>
                        <td>
                            <button class="btn btn-primary btn-sm" onclick="matchSignal('${sig.id}')">–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å</button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Signals load error:', error);
            }
        }

        async function loadTerminals() {
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º LocalStorage –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
            const terminals = JSON.parse(localStorage.getItem('ssto_terminals') || '[]');
            const tbody = document.getElementById('terminals-tbody');
            
            if (!tbody) return;
            
            tbody.innerHTML = '';
            
            if (terminals.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" style="text-align: center;">–ù–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤</td></tr>';
                return;
            }
            
            terminals.forEach(terminal => {
                let status = '–ê–∫—Ç–∏–≤–µ–Ω';
                if (terminal.status === 'inactive') status = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                if (terminal.status === 'tested') status = '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω';
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${terminal.terminal_number || ''}</td>
                    <td>${terminal.vessel_name || ''}</td>
                    <td>${terminal.mmsi || ''}</td>
                    <td>${terminal.type || '–ò–ù–ú–ê–†–°–ê–¢'}</td>
                    <td>${terminal.owner || ''}</td>
                    <td>${terminal.lastTest || ''}</td>
                    <td>${terminal.nextTest || ''}</td>
                    <td><span class="status-badge status-${terminal.status}">${status}</span></td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewTerminal('${terminal.id}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                        <button class="btn btn-success btn-sm" onclick="testTerminal('${terminal.terminal_number}')">–¢–µ—Å—Ç</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // ===================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º =====================
        document.getElementById('new-request-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const requestData = {
                terminal_number: document.getElementById('terminal-number').value,
                vessel_name: document.getElementById('vessel-name').value,
                mmsi: document.getElementById('mmsi').value,
                imo_number: document.getElementById('imo').value,
                owner_name: document.getElementById('owner').value,
                owner_email: document.getElementById('email').value,
                planned_test_date: document.getElementById('test-date').value,
                status: 'pending'
            };
            
            try {
                await api.request('POST', '/requests', requestData);
                alert('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                e.target.reset();
                loadRequests();
                loadDashboard();
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
                console.error(error);
            }
        });

        // ===================== –§—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π =====================
        async function confirmRequest(id) {
            try {
                await api.request('PATCH', `/requests/${id}`, { status: 'confirmed' });
                loadRequests();
                loadDashboard();
            } catch (error) {
                console.error('Confirm error:', error);
            }
        }

        async function testTerminal(terminalNumber) {
            const signal = {
                terminal_number: terminalNumber,
                signal_type: 'TEST',
                received_at: new Date().toISOString(),
                is_test: true
            };
            
            try {
                await api.request('POST', '/signals', signal);
                alert('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
                loadSignals();
                loadDashboard();
            } catch (error) {
                console.error('Test signal error:', error);
            }
        }

        function generateTestData() {
            const testData = {
                requests: [
                    {
                        id: 'REQ-' + Date.now(),
                        terminal_number: 'TERM001',
                        vessel_name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
                        mmsi: '123456789',
                        imo_number: '9876543',
                        owner_name: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü',
                        owner_email: 'test@example.com',
                        planned_test_date: new Date().toISOString().split('T')[0],
                        status: 'pending'
                    }
                ],
                signals: [
                    {
                        id: 'SIG-' + Date.now(),
                        signal_number: 'SIG001',
                        terminal_number: 'TERM001',
                        vessel_name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å—É–¥–Ω–æ',
                        mmsi: '123456789',
                        signal_type: 'TEST',
                        received_at: new Date().toISOString(),
                        is_test: true
                    }
                ]
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('ssto_requests', JSON.stringify(testData.requests));
            localStorage.setItem('ssto_signals', JSON.stringify(testData.signals));
            
            alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
            loadDashboard();
            loadRequests();
            loadSignals();
        }

        async function syncWithBackend() {
            alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å backend...');
            await checkBackendStatus();
            await loadDashboard();
            await loadRequests();
            await loadSignals();
        }

        // ===================== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ backend =====================
        async function checkBackendStatus() {
            try {
                const response = await fetch('http://localhost:3001/health');
                const data = await response.json();
                
                if (data.status === 'ok') {
                    api.setOnlineStatus(true);
                    console.log('Backend connected:', data);
                } else {
                    api.setOnlineStatus(false);
                }
            } catch (error) {
                api.setOnlineStatus(false);
                console.log('Backend offline, using LocalStorage');
            }
        }

        // ===================== –ó–∞–≥–ª—É—à–∫–∏ =====================
        function toggleAutoConfirm() {
            const current = localStorage.getItem('autoConfirm') === 'true';
            localStorage.setItem('autoConfirm', !current);
            loadDashboard();
        }

        function uploadExcel() { alert('–ó–∞–≥—Ä—É–∑–∫–∞ Excel –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function configureEmail() { alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function processEmailQueue() { alert('–û–±—Ä–∞–±–æ—Ç–∫–∞ email –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function syncSearchSea() { alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ü–æ–∏—Å–∫-–ú–æ—Ä–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function systemCheck() { alert('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function addTerminal() { alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function exportTerminalsCSV() { alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function viewTerminal(id) { alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ${id} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`); }
        function matchSignal(id) { alert(`–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ ${id} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`); }
        function showAllSignals() { alert('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function measureDistance() { alert('–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function takeScreenshot() { alert('–°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞—Ä—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function clearMap() { alert('–û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function generateReport() { alert('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
        function exportPDF() { alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }

        // ===================== –ö–∞—Ä—Ç–∞ OpenLayers =====================
        let olMap;
        function initMap() {
            if (!olMap && document.getElementById('map-container')) {
                olMap = new ol.Map({
                    target: 'map-container',
                    layers: [
                        new ol.layer.Tile({
                            source: new ol.source.OSM()
                        })
                    ],
                    view: new ol.View({
                        center: ol.proj.fromLonLat([37.6173, 55.7558]),
                        zoom: 4
                    })
                });
            }
        }

        // ===================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ =====================
        document.addEventListener('DOMContentLoaded', async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å backend
            await checkBackendStatus();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await loadDashboard();
            await loadRequests();
            await loadSignals();
            await loadTerminals();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(checkBackendStatus, 30000);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
            document.getElementById('report-type').addEventListener('change', (e) => {
                document.getElementById('report-period').style.display = 
                    e.target.value === '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥' ? 'block' : 'none';
            });
        });
    </script>
</body>
</html>'''
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    backend_file = project_dir / 'index_backend.html'
    backend_file.write_text(html_content, encoding='utf-8')
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: index_backend.html")
    
    # 3. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\n" + "=" * 70)
    print("–ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
    print(f"1. index_fixed.html - –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")
    print(f"2. index_backend.html - —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π backend")
    
    print("\n" + "=" * 70)
    print("–ö–ê–ö –¢–ï–°–¢–ò–†–û–í–ê–¢–¨:")
    print("\n1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend:")
    print("   cd C:\\Projects\\test-ssto-project\\backend-nest")
    print("   npm run start:dev")
    print("\n2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
    print("   C:\\Projects\\test-ssto-project\\frontend-static\\index_backend.html")
    print("\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API:")
    print("   üü¢ –ó–µ–ª–µ–Ω—ã–π = Backend —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π = –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º (LocalStorage)")
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
    
    return True

if __name__ == "__main__":
    fix_encoding_and_apply()