// fix-signal-model-fields.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\fix-signal-model-fields.js
// –î–æ–±–∞–≤–ª—è–µ—Ç –í–°–ï –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ –º–æ–¥–µ–ª—å Signal

const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = 'C:\\Projects\\test-ssto-project\\backend-nest';

console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –≤ –º–æ–¥–µ–ª—å Signal...\n');

// 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º C:\Projects\test-ssto-project\backend-nest\src\models\signal.model.ts
console.log('1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º signal.model.ts —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π...');
const signalModelPath = path.join(PROJECT_ROOT, 'src', 'models', 'signal.model.ts');

// –ü–æ–ª–Ω–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Signal —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
const signalModelContent = `import { Table, Column, Model, DataType } from 'sequelize-typescript';

@Table({
  tableName: 'signals',
  timestamps: true,
  underscored: true
})
export default class Signal extends Model {
  @Column({
    type: DataType.INTEGER,
    primaryKey: true,
    autoIncrement: true
  })
  id: number;

  @Column({
    type: DataType.STRING(50),
    allowNull: true
  })
  terminal_number: string;

  @Column({
    type: DataType.STRING(9),
    allowNull: false
  })
  mmsi: string;

  @Column({
    type: DataType.STRING(20),
    allowNull: true
  })
  call_sign: string;

  @Column({
    type: DataType.STRING,
    defaultValue: 'TEST'
  })
  signal_type: string;

  @Column({
    type: DataType.DATE,
    allowNull: false,
    defaultValue: DataType.NOW
  })
  received_at: Date;

  @Column({
    type: DataType.DATE,
    allowNull: true
  })
  detection_time: Date;

  @Column({
    type: DataType.STRING,
    defaultValue: 'UNMATCHED'
  })
  status: string;

  @Column({
    type: DataType.INTEGER,
    allowNull: true
  })
  request_id: number;

  @Column({
    type: DataType.JSONB,
    allowNull: true
  })
  coordinates: any;

  @Column({
    type: DataType.JSONB,
    allowNull: true
  })
  metadata: any;

  @Column({
    type: DataType.DATE
  })
  created_at: Date;

  @Column({
    type: DataType.DATE
  })
  updated_at: Date;
}

export { Signal };`;

fs.writeFileSync(signalModelPath, signalModelContent, 'utf8');
console.log('  ‚úÖ Signal –º–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏');

// 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º C:\Projects\test-ssto-project\backend-nest\src\services\email-parser.service.ts
console.log('\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º email-parser.service.ts - —É–¥–∞–ª—è–µ–º id –∏–∑ requestData...');
const emailParserPath = path.join(PROJECT_ROOT, 'src', 'services', 'email-parser.service.ts');
if (fs.existsSync(emailParserPath)) {
  let emailContent = fs.readFileSync(emailParserPath, 'utf8');
  
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É 78 –∏ –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –Ω–µ—ë –≥–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è requestData
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ requestData –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º create
  const lines = emailContent.split('\n');
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å requestService.create
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].includes('requestService.create(requestData)')) {
      // –ò—â–µ–º –Ω–∞–∑–∞–¥ –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è requestData
      for (let j = i - 1; j >= Math.max(0, i - 30); j--) {
        if (lines[j].includes('const requestData') || lines[j].includes('let requestData')) {
          // –ù–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –æ–±—ä–µ–∫—Ç–∞, —Ç–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ–ª–µ id
          for (let k = j; k < i; k++) {
            if (lines[k].match(/^\s*id:\s*['"]?\w+['"]?,?\s*$/)) {
              // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å id
              lines[k] = '      // id —É–¥–∞–ª–µ–Ω - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
              break;
            }
          }
          break;
        }
      }
      break;
    }
  }
  
  emailContent = lines.join('\n');
  fs.writeFileSync(emailParserPath, emailContent, 'utf8');
  console.log('  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω email-parser.service.ts');
}

// 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º C:\Projects\test-ssto-project\backend-nest\src\signal\signal.service.ts
console.log('\n3Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º signal.service.ts - —É–±–∏—Ä–∞–µ–º terminal_number –∏–∑ create...');
const signalServicePath = path.join(PROJECT_ROOT, 'src', 'signal', 'signal.service.ts');
if (fs.existsSync(signalServicePath)) {
  let serviceContent = fs.readFileSync(signalServicePath, 'utf8');
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É 120 –≥–¥–µ terminal_number –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
  serviceContent = serviceContent.replace(
    /terminal_number: signalData\.terminal_number \|\| signalData\.terminalNumber,/g,
    '// terminal_number –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
  );
  
  fs.writeFileSync(signalServicePath, serviceContent, 'utf8');
  console.log('  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω signal.service.ts');
}

// 4. –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ë–î —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î...');
const migrationScript = `-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É signals
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ PostgreSQL

ALTER TABLE signals ADD COLUMN IF NOT EXISTS detection_time TIMESTAMP;
ALTER TABLE signals ADD COLUMN IF NOT EXISTS received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE signals ADD COLUMN IF NOT EXISTS status VARCHAR(50) DEFAULT 'UNMATCHED';
ALTER TABLE signals ADD COLUMN IF NOT EXISTS mmsi VARCHAR(9);
ALTER TABLE signals ADD COLUMN IF NOT EXISTS call_sign VARCHAR(20);
ALTER TABLE signals ADD COLUMN IF NOT EXISTS coordinates JSONB;
ALTER TABLE signals ADD COLUMN IF NOT EXISTS metadata JSONB;
`;

const migrationPath = path.join(PROJECT_ROOT, 'add-signal-columns.sql');
fs.writeFileSync(migrationPath, migrationScript, 'utf8');
console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç add-signal-columns.sql');

console.log('\n‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã:');
console.log('  ‚Ä¢ C:\\Projects\\test-ssto-project\\backend-nest\\src\\models\\signal.model.ts');
console.log('  ‚Ä¢ C:\\Projects\\test-ssto-project\\backend-nest\\src\\services\\email-parser.service.ts');
console.log('  ‚Ä¢ C:\\Projects\\test-ssto-project\\backend-nest\\src\\signal\\signal.service.ts');
console.log('  ‚Ä¢ C:\\Projects\\test-ssto-project\\backend-nest\\add-signal-columns.sql');

console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:');
console.log('  psql -U ssto -d sstodb -f add-signal-columns.sql');
console.log('\n  –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –≤ pgAdmin/DBeaver');

console.log('\nüöÄ –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:');
console.log('  Ctrl+C –∏ npm run start:dev');