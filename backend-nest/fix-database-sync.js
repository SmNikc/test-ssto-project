// fix-database-sync.js
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ C:\Projects\test-ssto-project\backend-nest\fix-database-sync.js

const { Client } = require('pg');
require('dotenv').config();

const client = new Client({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'ssto',
  password: process.env.DB_PASSWORD || 'sstopass',
  database: process.env.DB_NAME || 'sstodb'
});

async function fixDatabase() {
  try {
    await client.connect();
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ terminal_number
    const checkColumn = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'requests' 
      AND column_name = 'terminal_number';
    `);
    
    if (checkColumn.rowCount === 0) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ terminal_number –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è–µ–º...');
      
      // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
      await client.query(`
        ALTER TABLE requests 
        ADD COLUMN IF NOT EXISTS terminal_number VARCHAR(50);
      `);
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ terminal_number –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      
      // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
      await client.query(`
        UPDATE requests 
        SET terminal_number = 'TERM-' || id::text 
        WHERE terminal_number IS NULL;
      `);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ terminal_number —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    const columnsToAdd = [
      { name: 'email', type: 'VARCHAR(255)', default: "''" },
      { name: 'phone', type: 'VARCHAR(50)', default: "''" },
      { name: 'test_date', type: 'DATE', default: 'CURRENT_DATE' },
      { name: 'test_time', type: 'TIME', default: "'12:00:00'" },
      { name: 'confirmation_status', type: 'VARCHAR(50)', default: "'pending'" }
    ];
    
    for (const col of columnsToAdd) {
      const checkCol = await client.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'requests' 
        AND column_name = '${col.name}';
      `);
      
      if (checkCol.rowCount === 0) {
        await client.query(`
          ALTER TABLE requests 
          ADD COLUMN IF NOT EXISTS ${col.name} ${col.type} DEFAULT ${col.default};
        `);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ${col.name}`);
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã requests:');
    const finalStructure = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'requests'
      ORDER BY ordinal_position
      LIMIT 10;
    `);
    
    finalStructure.rows.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type}`);
    });
    
    console.log('\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend:');
    console.log('   Ctrl+C (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)');
    console.log('   npm run start:dev (–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ)');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  } finally {
    await client.end();
  }
}

fixDatabase();