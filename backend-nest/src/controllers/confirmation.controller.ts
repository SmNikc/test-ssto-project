// backend-nest/src/controllers/confirmation.controller.ts
// –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
import { 
  Controller, 
  Post, 
  Get, 
  Param, 
  Body, 
  Logger,
  HttpStatus,
  HttpCode,
  BadRequestException,
  NotFoundException
} from '@nestjs/common';
import { RequestService } from '../request/request.service';
import { SignalService } from '../signal/signal.service';
import { EmailSenderService } from '../services/email-sender.service';
import { ReportService } from '../services/report.service';
import * as fs from 'fs';
import * as path from 'path';

@Controller('api')
export class ConfirmationController {
  private readonly logger = new Logger(ConfirmationController.name);

  constructor(
    private requestService: RequestService,
    private signalService: SignalService,
    private emailSenderService: EmailSenderService,
    private reportService: ReportService,
  ) {}

  // ===================================
  // –û–¢–ü–†–ê–í–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ô
  // ===================================

  @Post('requests/:id/send-confirmation')
  @HttpCode(HttpStatus.OK)
  async sendConfirmation(
    @Param('id') id: string,
    @Body() options: {
      send_email?: boolean; 
      generate_pdf?: boolean;
      test_mode?: boolean;
    } = {},
  ) {
    this.logger.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ ID: ${id}`);
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
      const request = await this.requestService.findOne(id);
      if (!request) {
        throw new NotFoundException(`–ó–∞—è–≤–∫–∞ #${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      this.logger.log(`–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${request.vessel_name} (MMSI: ${request.mmsi})`);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      if (request.status !== 'approved' && request.status !== 'completed') {
        this.logger.warn(`–ó–∞—è–≤–∫–∞ #${id} –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${request.status}`);
        if (!options.test_mode) {
          throw new BadRequestException(
            `–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`
          );
        }
      }

      // 3. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const tempDir = path.join(process.cwd(), 'temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
        this.logger.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${tempDir}`);
      }

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
      let pdfPath = null;
      if (options.generate_pdf !== false) {
        this.logger.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
        
        // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        const signal = request.signal_id 
          ? await this.signalService.findOne(request.signal_id)
          : null;
        
        pdfPath = await this.reportService.generateTestConfirmation(request, signal);
        this.logger.log(`‚úÖ PDF —Å–æ–∑–¥–∞–Ω: ${pdfPath}`);
      }

      // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
      let emailSent = false;
      if (options.send_email !== false) {
        this.logger.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞: ${request.contact_email}`);
        
        if (pdfPath && fs.existsSync(pdfPath)) {
          // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å PDF –≤–ª–æ–∂–µ–Ω–∏–µ–º
          await this.emailSenderService.sendConfirmation(
            request.contact_email,
            pdfPath,
            request
          );
          emailSent = true;
        } else {
          // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∏—Å—å–º–∞ –±–µ–∑ PDF
          const subject = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–°–¢–û - ${request.vessel_name}`;
          const html = this.generateEmailHtml(request);
          
          await this.emailSenderService.sendEmail(
            request.contact_email,
            subject,
            this.generateEmailText(request),
            html
          );
          emailSent = true;
        }
        
        this.logger.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      }

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      if (request.status === 'approved') {
        await this.requestService.updateStatus(id, 'completed');
        this.logger.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "completed"');
      }

      // 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        success: true,
        message: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
        data: {
          request_id: id,
          vessel_name: request.vessel_name,
          mmsi: request.mmsi,
          email_sent: emailSent,
          email_sent_to: request.contact_email,
          pdf_generated: !!pdfPath,
          pdf_path: pdfPath,
          status: 'completed'
        },
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${error.message}`);
      throw error;
    }
  }

  // ===================================
  // –ú–ê–°–°–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê
  // ===================================

  @Post('send-all-confirmations')
  @HttpCode(HttpStatus.OK)
  async sendAllConfirmations() {
    this.logger.log('üìß –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
      const allRequests = await this.requestService.findAll();
      const requests = allRequests.filter(r => r.status === 'approved');
      
      if (!requests || requests.length === 0) {
        return {
          success: true,
          message: '–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
          total_processed: 0,
          results: [],
        };
      }

      const results = [];
      let successCount = 0;
      let errorCount = 0;

      for (const request of requests) {
        try {
          this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ ${request.id}: ${request.vessel_name}`);
          
          const result = await this.sendConfirmation(request.id, {
            send_email: true,
            generate_pdf: true,
          });
          
          results.push({
            request_id: request.id,
            vessel: request.vessel_name,
            status: 'sent',
            details: result.data,
          });
          successCount++;
        } catch (error) {
          results.push({
            request_id: request.id,
            vessel: request.vessel_name,
            status: 'failed',
            error: error.message,
          });
          errorCount++;
        }
      }

      return {
        success: true,
        message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: ${requests.length}`,
        total_processed: requests.length,
        successful: successCount,
        failed: errorCount,
        results,
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
      throw error;
    }
  }

  // ===================================
  // –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
  // ===================================

  @Get('test/smtp')
  async testSmtp() {
    this.logger.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    
    try {
      const result = await this.emailSenderService.testConnection();
      return {
        success: result,
        message: result 
          ? '‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' 
          : '‚ùå SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å',
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMTP',
        error: error.message,
      };
    }
  }

  @Post('test/email')
  async testEmail(@Body() data: { to: string; subject?: string; text?: string }) {
    this.logger.log(`üìß –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞: ${data.to}`);
    
    if (!data.to) {
      throw new BadRequestException('Email –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    try {
      const subject = data.subject || '–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –°–°–¢–û';
      const text = data.text || '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –°–°–¢–û';
      const html = `
        <div style="font-family: Arial, sans-serif; padding: 20px;">
          <h2>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
          <p>${text}</p>
          <hr>
          <p style="color: #666; font-size: 12px;">
            –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}<br>
            –°–∏—Å—Ç–µ–º–∞: –°–°–¢–û Test API v1.0.0
          </p>
        </div>
      `;

      await this.emailSenderService.sendEmail(data.to, subject, text, html);
      
      return {
        success: true,
        message: `Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${data.to}`,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email: ${error.message}`);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email',
        error: error.message,
      };
    }
  }

  // ===================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ===================================

  private generateEmailText(request: any): string {
    return `
–§–ì–ë–£ ¬´–ú–û–†–°–ü–ê–°–°–õ–£–ñ–ë–ê¬ª
–ì–ª–∞–≤–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –°–°–¢–û

–°—É–¥–Ω–æ: ${request.vessel_name}
MMSI: ${request.mmsi}
IMO: ${request.imo || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü: ${request.ship_owner}
–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞: ${new Date(request.test_date).toLocaleString('ru-RU')}

–°—Ç–∞—Ç—É—Å: –£–°–ü–ï–®–ù–û

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–µ–∂—É—Ä–Ω—ã–π –ì–ú–°–ö–¶
—Ç–µ–ª.: +7 (495) 626-10-52
email: od.smrcc@morspas.ru
    `.trim();
  }

  private generateEmailHtml(request: any): string {
    return `
<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  <!-- –®–∞–ø–∫–∞ -->
  <div style="background: #003d7a; color: white; padding: 20px;">
    <h2 style="margin: 0;">–§–ì–ë–£ ¬´–ú–û–†–°–ü–ê–°–°–õ–£–ñ–ë–ê¬ª</h2>
    <p style="margin: 5px 0;">–ì–ª–∞–≤–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä</p>
  </div>
  
  <!-- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ -->
  <div style="padding: 20px; background: #f5f5f5;">
    <h3 style="color: #003d7a;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–°–¢–û</h3>
    
    <div style="background: white; padding: 15px; border-radius: 5px; margin: 15px 0;">
      <p style="margin: 10px 0;"><strong>–°—É–¥–Ω–æ:</strong> ${request.vessel_name}</p>
      <p style="margin: 10px 0;"><strong>MMSI:</strong> ${request.mmsi}</p>
      <p style="margin: 10px 0;"><strong>IMO:</strong> ${request.imo || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
      <p style="margin: 10px 0;"><strong>–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü:</strong> ${request.ship_owner}</p>
      <p style="margin: 10px 0;"><strong>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞:</strong> ${new Date(request.test_date).toLocaleString('ru-RU')}</p>
    </div>
    
    <div style="background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 5px;">
      <h4 style="margin: 0;">‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ</h4>
      <p style="margin: 10px 0 0 0;">–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –°–°–¢–û –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.</p>
    </div>
  </div>
  
  <!-- –ü–æ–¥–ø–∏—Å—å -->
  <div style="padding: 20px; background: #e9e9e9; font-size: 12px; color: #666;">
    <p style="margin: 5px 0;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</p>
    <p style="margin: 5px 0;"><strong>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–µ–∂—É—Ä–Ω—ã–π –ì–ú–°–ö–¶</strong></p>
    <p style="margin: 5px 0;">—Ç–µ–ª.: +7 (495) 626-10-52</p>
    <p style="margin: 5px 0;">email: od.smrcc@morspas.ru</p>
    <p style="margin: 15px 0 5px 0; font-size: 10px; color: #999;">
      –î–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –°–°–¢–û<br>
      ${new Date().toLocaleString('ru-RU')}
    </p>
  </div>
</div>
    `.trim();
  }
}