// backend-nest/src/signal/signal.service.ts
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 3.0 - —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Op } from 'sequelize';
import Signal from '../models/signal.model';
import SSASRequest from '../models/request';
import { EmailSenderService } from '../services/email-sender.service';
import { ReportService } from '../services/report.service';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º enum –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏
enum SignalStatus {
  PENDING = 'pending',
  MATCHED = 'matched',
  UNMATCHED = 'unmatched',
  ERROR = 'error'
}

@Injectable()
export class SignalService {
  private readonly logger = new Logger(SignalService.name);

  constructor(
    @InjectModel(Signal)
    private signalModel: typeof Signal,
    @InjectModel(SSASRequest)
    private requestModel: typeof SSASRequest,
    private emailSenderService: EmailSenderService,
    private reportService: ReportService,
  ) {}

  // ===================================
  // –û–°–ù–û–í–ù–´–ï CRUD –ú–ï–¢–û–î–´
  // ===================================

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
  async findAll(): Promise<Signal[]> {
    try {
      return await this.signalModel.findAll({
        include: [{ model: SSASRequest, as: 'request' }],
        order: [['received_at', 'DESC']],
      });
    } catch (error) {
      this.logger.error(`Error finding all signals: ${error.message}`);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ ID
  async findOne(id: number): Promise<Signal | null> {
    try {
      return await this.signalModel.findByPk(id, {
        include: [{ model: SSASRequest, as: 'request' }],
      });
    } catch (error) {
      this.logger.error(`Error finding signal ${id}: ${error.message}`);
      return null;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
  async create(data: any): Promise<Signal> {
    this.logger.log(`Creating new signal for MMSI: ${data.mmsi}`);
    
    try {
      const signal = await this.signalModel.create({
        mmsi: data.mmsi || 'UNKNOWN',
        type: data.signal_type || data.type || 'TEST',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ type
        latitude: data.latitude,
        longitude: data.longitude,
        received_at: data.received_at || new Date(),
        raw_data: data.raw_message || data.raw_data || '',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º raw_data
        email_id: data.message_id || data.email_id,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º email_id
        status: data.status || SignalStatus.PENDING,
        request_id: data.request_id
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –∑–∞—è–≤–∫–æ–π
      if (data.mmsi && data.mmsi !== 'UNKNOWN') {
        await this.matchSignalToRequest(signal);
      }

      return signal;
    } catch (error) {
      this.logger.error(`Error creating signal: ${error.message}`);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª
  async update(id: number, data: Partial<Signal>): Promise<Signal | null> {
    try {
      const signal = await this.findOne(id);
      if (!signal) {
        this.logger.warn(`Signal with ID ${id} not found`);
        return null;
      }
      
      await signal.update(data);
      return signal;
    } catch (error) {
      this.logger.error(`Error updating signal ${id}: ${error.message}`);
      return null;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª
  async remove(id: number): Promise<boolean> {
    try {
      const signal = await this.findOne(id);
      if (!signal) {
        this.logger.warn(`Signal with ID ${id} not found`);
        return false;
      }
      
      await signal.destroy();
      return true;
    } catch (error) {
      this.logger.error(`Error removing signal ${id}: ${error.message}`);
      return false;
    }
  }

  // ===================================
  // –ú–ï–¢–û–î–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø
  // ===================================

  // –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª —Å –∑–∞—è–≤–∫–æ–π
  async matchSignalToRequest(signal: Signal): Promise<void> {
    try {
      this.logger.log(`üîç Matching signal to request for MMSI: ${signal.mmsi}`);
      
      // –ò—â–µ–º –∑–∞—è–≤–∫—É —Å —Ç–∞–∫–∏–º –∂–µ MMSI –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
      const request = await this.requestModel.findOne({
        where: {
          mmsi: signal.mmsi,
          status: ['approved', 'testing'],
          test_date: {
            [Op.between]: [
              new Date(signal.received_at.getTime() - 24 * 60 * 60 * 1000), // -24 —á–∞—Å–∞
              new Date(signal.received_at.getTime() + 24 * 60 * 60 * 1000), // +24 —á–∞—Å–∞
            ],
          },
        },
      });

      if (request) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∑–∞—è–≤–∫–æ–π
        signal.request_id = request.id.toString();  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º number –≤ string
        signal.status = SignalStatus.MATCHED;       // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        await signal.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        request.signal_id = signal.id;
        request.status = 'completed';
        await request.save();

        this.logger.log(`‚úÖ Signal ${signal.id} matched to request ${request.id}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await this.sendConfirmation(request, signal);
      } else {
        this.logger.log(`‚ùå No matching request found for MMSI: ${signal.mmsi}`);
        signal.status = SignalStatus.UNMATCHED;
        await signal.save();
      }
    } catch (error) {
      this.logger.error(`Error matching signal to request: ${error.message}`);
      signal.status = SignalStatus.ERROR;
      await signal.save();
    }
  }

  // –†—É—á–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∑–∞—è–≤–∫–æ–π
  async linkToRequest(signalId: number, requestId: number): Promise<Signal | null> {
    try {
      const signal = await this.findOne(signalId);
      if (!signal) {
        this.logger.error(`Signal with ID ${signalId} not found`);
        return null;
      }

      const request = await this.requestModel.findByPk(requestId);
      if (!request) {
        this.logger.error(`Request with ID ${requestId} not found`);
        return null;
      }

      // –°–≤—è–∑—ã–≤–∞–µ–º
      signal.request_id = requestId.toString();  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º number –≤ string
      signal.status = SignalStatus.MATCHED;
      await signal.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
      request.signal_id = signalId;
      request.status = 'completed';
      await request.save();

      this.logger.log(`‚úÖ Manually linked signal ${signalId} to request ${requestId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.sendConfirmation(request, signal);

      return signal;
    } catch (error) {
      this.logger.error(`Error linking signal to request: ${error.message}`);
      return null;
    }
  }

  // ===================================
  // –ú–ï–¢–û–î–´ –û–¢–ü–†–ê–í–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ô
  // ===================================

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  private async sendConfirmation(request: SSASRequest, signal: Signal): Promise<void> {
    try {
      this.logger.log(`üìß Sending confirmation for request ${request.id}`);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF - –∏—Å–ø–æ–ª—å–∑—É–µ–º generateTestConfirmation –≤–º–µ—Å—Ç–æ generateConfirmationPdf
      const pdfPath = await this.reportService.generateTestConfirmation(request, signal);
      this.logger.log(`üìÑ PDF generated: ${pdfPath}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å PDF
      await this.emailSenderService.sendConfirmation(
        request.contact_email,
        pdfPath,
        request
      );
      
      this.logger.log(`‚úÖ Confirmation sent to ${request.contact_email}`);
    } catch (error) {
      this.logger.error(`Failed to send confirmation: ${error.message}`);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
  }

  // ===================================
  // –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò EMAIL
  // ===================================

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª –∏–∑ email
  async processEmailSignal(
    subject: string,
    body: string,
    receivedAt: Date,
    messageId: string
  ): Promise<Signal> {
    this.logger.log(`Processing email signal: ${subject}`);

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∏—Å—å–º–∞
      const mmsi = this.extractMMSI(body);
      const coordinates = this.extractCoordinates(body);
      const signalType = this.determineSignalType(subject, body);

      // –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const signal = await this.signalModel.create({
        mmsi: mmsi || 'UNKNOWN',
        type: signalType,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º type –≤–º–µ—Å—Ç–æ signal_type
        latitude: coordinates?.lat,
        longitude: coordinates?.lon,
        received_at: receivedAt,
        raw_data: body,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º raw_data –≤–º–µ—Å—Ç–æ raw_message
        email_id: messageId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º email_id –≤–º–µ—Å—Ç–æ message_id
        status: SignalStatus.PENDING,
      });

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –∑–∞—è–≤–∫–æ–π
      if (mmsi && mmsi !== 'UNKNOWN') {
        await this.matchSignalToRequest(signal);
      }

      return signal;
    } catch (error) {
      this.logger.error(`Error processing email signal: ${error.message}`);
      throw error;
    }
  }

  // –ò–∑–≤–ª–µ—á—å MMSI –∏–∑ —Ç–µ–∫—Å—Ç–∞
  private extractMMSI(text: string): string | null {
    if (!text) return null;
    const match = text.match(/MMSI[:\s]+(\d{9})/i);
    return match ? match[1] : null;
  }

  // –ò–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
  private extractCoordinates(text: string): { lat: number; lon: number } | null {
    if (!text) return null;
    
    const latMatch = text.match(/(\d+)¬∞(\d+\.?\d*)['']([NS])/);
    const lonMatch = text.match(/(\d+)¬∞(\d+\.?\d*)['']([EW])/);
    
    if (latMatch && lonMatch) {
      const latDeg = parseFloat(latMatch[1]);
      const latMin = parseFloat(latMatch[2]);
      const lat = latDeg + latMin / 60;
      const latitude = latMatch[3] === 'S' ? -lat : lat;

      const lonDeg = parseFloat(lonMatch[1]);
      const lonMin = parseFloat(lonMatch[2]);
      const lon = lonDeg + lonMin / 60;
      const longitude = lonMatch[3] === 'W' ? -lon : lon;

      return { lat: latitude, lon: longitude };
    }
    
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
  private determineSignalType(subject: string, body: string): string {
    const text = (subject + ' ' + body).toLowerCase();
    
    if (text.includes('test')) return 'TEST';
    if (text.includes('distress')) return 'DISTRESS';
    if (text.includes('alert')) return 'ALERT';
    
    return 'UNKNOWN';
  }

  // ===================================
  // –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò
  // ===================================

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ MMSI
  async findByMMSI(mmsi: string): Promise<Signal[]> {
    try {
      return await this.signalModel.findAll({
        where: { mmsi },
        include: [{ model: SSASRequest, as: 'request' }],
        order: [['received_at', 'DESC']],
      });
    } catch (error) {
      this.logger.error(`Error finding signals by MMSI ${mmsi}: ${error.message}`);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  async findUnmatched(): Promise<Signal[]> {
    try {
      return await this.signalModel.findAll({
        where: {
          status: SignalStatus.UNMATCHED,
          request_id: null,
        },
        order: [['received_at', 'DESC']],
      });
    } catch (error) {
      this.logger.error(`Error finding unmatched signals: ${error.message}`);
      return [];
    }
  }

  // ===================================
  // –ú–ï–¢–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
  // ===================================

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
  async getStatistics(): Promise<any> {
    try {
      const total = await this.signalModel.count();
      const matched = await this.signalModel.count({
        where: { status: SignalStatus.MATCHED },
      });
      const unmatched = await this.signalModel.count({
        where: { status: SignalStatus.UNMATCHED },
      });
      const pending = await this.signalModel.count({
        where: { status: SignalStatus.PENDING },
      });
      const errors = await this.signalModel.count({
        where: { status: SignalStatus.ERROR },
      });

      return {
        total,
        matched,
        unmatched,
        pending,
        errors,
        matchRate: total > 0 ? ((matched / total) * 100).toFixed(2) + '%' : '0%',
      };
    } catch (error) {
      this.logger.error(`Error getting statistics: ${error.message}`);
      return {
        total: 0,
        matched: 0,
        unmatched: 0,
        pending: 0,
        errors: 0,
        matchRate: '0%',
      };
    }
  }

  // ===================================
  // –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´
  // ===================================

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã
  async cleanupOldSignals(daysToKeep: number = 90): Promise<number> {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      const result = await this.signalModel.destroy({
        where: {
          received_at: {
            [Op.lt]: cutoffDate,
          },
          status: [SignalStatus.MATCHED, SignalStatus.UNMATCHED],
        },
      });

      this.logger.log(`üßπ Cleaned up ${result} old signals`);
      return result;
    } catch (error) {
      this.logger.error(`Error cleaning up old signals: ${error.message}`);
      return 0;
    }
  }
}