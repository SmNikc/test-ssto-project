// backend-nest/src/services/email-sender.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as nodemailer from 'nodemailer';
import * as fs from 'fs';
import { Transporter } from 'nodemailer';

@Injectable()
export class EmailSenderService {
  private readonly logger = new Logger(EmailSenderService.name);
  private transporter: Transporter;

  constructor(private configService: ConfigService) {
    this.initializeTransporter();
  }

  private initializeTransporter() {
    const config = {
      host: this.configService.get<string>('SMTP_HOST', 'smtp.gmail.com'),
      port: this.configService.get<number>('SMTP_PORT', 587),
      secure: this.configService.get<string>('SMTP_SECURE') === 'true', // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π 'true'
      auth: {
        user: this.configService.get<string>('SMTP_USER'),
        pass: this.configService.get<string>('SMTP_PASSWORD'),
      },
    };

    this.logger.log(`Initializing SMTP: ${config.host}:${config.port}`);
    
    this.transporter = nodemailer.createTransport(config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.transporter.verify((error, success) => {
      if (error) {
        this.logger.error(`SMTP connection failed: ${error.message}`);
      } else {
        this.logger.log('‚úÖ SMTP server ready to send emails');
      }
    });
  }

  async sendConfirmation(email: string, pdfPath: string, request: any) {
    try {
      this.logger.log(`üìß Sending confirmation to: ${email}`);
      
      const mailOptions = {
        from: this.configService.get<string>('SMTP_FROM') || this.configService.get<string>('SMTP_USER'),
        to: email,
        subject: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–°–¢–û - ${request.vessel_name} MMSI: ${request.mmsi}`,
        text: `
–§–ì–ë–£ ¬´–ú–û–†–°–ü–ê–°–°–õ–£–ñ–ë–ê¬ª
–ì–ª–∞–≤–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –°–°–¢–û

–°—É–¥–Ω–æ: ${request.vessel_name}
MMSI: ${request.mmsi}
IMO: ${request.imo || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞: ${new Date(request.test_date).toLocaleString('ru-RU')}

–°—Ç–∞—Ç—É—Å: –£–°–ü–ï–®–ù–û

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.

–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–µ–∂—É—Ä–Ω—ã–π –ì–ú–°–ö–¶
—Ç–µ–ª.: +7 (495) 626-10-52
email: od.smrcc@morspas.ru
        `,
        html: `
<div style="font-family: Arial, sans-serif; padding: 20px;">
  <div style="border-bottom: 2px solid #003d7a; padding-bottom: 10px;">
    <h2 style="color: #003d7a;">–§–ì–ë–£ ¬´–ú–û–†–°–ü–ê–°–°–õ–£–ñ–ë–ê¬ª</h2>
    <h3 style="color: #666;">–ì–ª–∞–≤–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä</h3>
  </div>
  
  <div style="margin: 20px 0;">
    <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –°–°–¢–û</h3>
    
    <table style="border-collapse: collapse; margin: 20px 0;">
      <tr>
        <td style="padding: 8px; font-weight: bold;">–°—É–¥–Ω–æ:</td>
        <td style="padding: 8px;">${request.vessel_name}</td>
      </tr>
      <tr style="background: #f5f5f5;">
        <td style="padding: 8px; font-weight: bold;">MMSI:</td>
        <td style="padding: 8px;">${request.mmsi}</td>
      </tr>
      <tr>
        <td style="padding: 8px; font-weight: bold;">IMO:</td>
        <td style="padding: 8px;">${request.imo || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
      </tr>
      <tr style="background: #f5f5f5;">
        <td style="padding: 8px; font-weight: bold;">–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞:</td>
        <td style="padding: 8px;">${new Date(request.test_date).toLocaleString('ru-RU')}</td>
      </tr>
      <tr>
        <td style="padding: 8px; font-weight: bold;">–°—Ç–∞—Ç—É—Å:</td>
        <td style="padding: 8px; color: green; font-weight: bold;">‚úÖ –£–°–ü–ï–®–ù–û</td>
      </tr>
    </table>
    
    <p>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.</p>
  </div>
  
  <div style="border-top: 1px solid #ccc; margin-top: 30px; padding-top: 10px; font-size: 12px; color: #666;">
    <p>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–µ–∂—É—Ä–Ω—ã–π –ì–ú–°–ö–¶<br>
    —Ç–µ–ª.: +7 (495) 626-10-52<br>
    email: od.smrcc@morspas.ru</p>
  </div>
</div>
        `,
        attachments: [
          {
            filename: `–ì–ú–°–ö–¶_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ_${request.mmsi}_${new Date().toISOString().split('T')[0]}.pdf`,
            path: pdfPath,
          },
        ],
      };

      const info = await this.transporter.sendMail(mailOptions);
      this.logger.log(`‚úÖ Email sent successfully! Message ID: ${info.messageId}`);
      
      return info;
    } catch (error) {
      this.logger.error(`‚ùå Failed to send confirmation: ${error.message}`);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ email –±–µ–∑ PDF
  async sendEmail(to: string, subject: string, text: string, html?: string) {
    try {
      const mailOptions = {
        from: this.configService.get<string>('SMTP_FROM') || this.configService.get<string>('SMTP_USER'),
        to,
        subject,
        text,
        html: html || text,
      };

      const info = await this.transporter.sendMail(mailOptions);
      this.logger.log(`‚úÖ Email sent to ${to}`);
      return info;
    } catch (error) {
      this.logger.error(`‚ùå Failed to send email: ${error.message}`);
      throw error;
    }
  }

  // –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SMTP
  async testConnection(): Promise<boolean> {
    try {
      await this.transporter.verify();
      this.logger.log('‚úÖ SMTP connection test successful');
      return true;
    } catch (error) {
      this.logger.error(`‚ùå SMTP connection test failed: ${error.message}`);
      return false;
    }
  }
}