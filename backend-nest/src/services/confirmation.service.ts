// src/services/confirmation.service.ts

import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import TestRequest from '../models/test-request.model';
import Vessel from '../models/vessel.model';
import { EmailService } from './email.service';
import { formatInTimeZone } from 'date-fns-tz';
import { ru } from 'date-fns/locale';

@Injectable()
export class ConfirmationService {
  private readonly logger = new Logger(ConfirmationService.name);

  constructor(
    @InjectModel(TestRequest)
    private testRequestModel: typeof TestRequest,
    private emailService: EmailService,
  ) {}

  async sendConfirmation(requestId: number): Promise<any> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—É–¥–Ω–∞
      const request = await this.testRequestModel.findByPk(requestId, {
        include: [Vessel],
      });

      if (!request) {
        throw new Error(`–ó–∞—è–≤–∫–∞ #${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      if (!request.vessel) {
        throw new Error(`–°—É–¥–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }

      if (request.status !== 'approved') {
        throw new Error(`–ó–∞—è–≤–∫–∞ #${requestId} –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${request.status}`);
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
      const testDateTime = formatInTimeZone(
        request.test_date,
        'Europe/Moscow',
        'dd MMMM yyyy –≥–æ–¥–∞ –≤ HH:mm',
        { locale: ru }
      );

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—É–¥–Ω–∞
      const latitude = request.vessel.latitude || 0;
      const longitude = request.vessel.longitude || 0;
      const latDirection = latitude >= 0 ? 'N' : 'S';
      const lonDirection = longitude >= 0 ? 'E' : 'W';
      const formattedCoordinates = `${Math.abs(latitude).toFixed(4)}¬∞${latDirection}, ${Math.abs(longitude).toFixed(4)}¬∞${lonDirection}`;

      // –°–æ–∑–¥–∞–µ–º HTML –ø–∏—Å—å–º–æ
      const htmlContent = this.generateConfirmationEmail(request, testDateTime, formattedCoordinates);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      const emailResult = await this.emailService.sendEmail({
        to: request.vessel.owner_email,
        subject: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ì–ú–°–°–ë –¥–ª—è —Å—É–¥–Ω–∞ ${request.vessel.name}`,
        html: htmlContent,
        text: this.generatePlainTextEmail(request, testDateTime, formattedCoordinates),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      await request.update({
        confirmation_sent: true,
        confirmation_sent_at: new Date(),
      });

      this.logger.log(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #${requestId}`);

      return {
        success: true,
        message: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${request.vessel.owner_email}`,
        request_id: requestId,
        vessel_name: request.vessel.name,
        email_sent_to: request.vessel.owner_email,
        test_date: testDateTime,
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${requestId}:`, error);
      throw error;
    }
  }

  async sendAllConfirmations(): Promise<any> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–º –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const requests = await this.testRequestModel.findAll({
        where: {
          status: 'approved',
          confirmation_sent: false,
        },
        include: [Vessel],
      });

      const results = [];
      let successful = 0;
      let failed = 0;

      for (const request of requests) {
        try {
          await this.sendConfirmation(request.id);
          successful++;
          results.push({
            request_id: request.id,
            vessel: request.vessel?.name || 'Unknown',
            status: 'success',
          });
        } catch (error) {
          failed++;
          results.push({
            request_id: request.id,
            vessel: request.vessel?.name || 'Unknown',
            status: 'failed',
            error: error.message,
          });
        }
      }

      return {
        success: true,
        message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: ${requests.length}`,
        total_processed: requests.length,
        successful,
        failed,
        results,
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  private generateConfirmationEmail(
    request: TestRequest,
    testDateTime: string,
    coordinates: string
  ): string {
    const vessel = request.vessel;
    
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px 10px 0 0;
            margin: -30px -30px 30px -30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        .header p {
            margin: 5px 0 0 0;
            opacity: 0.9;
        }
        .section {
            margin: 25px 0;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        .section h2 {
            color: #667eea;
            margin-top: 0;
            font-size: 18px;
        }
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 10px;
        }
        .info-label {
            font-weight: bold;
            color: #555;
        }
        .info-value {
            color: #333;
        }
        .important {
            background-color: #fff3cd;
            border: 1px solid #ffc107;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
        }
        .important h3 {
            color: #856404;
            margin-top: 0;
        }
        .button {
            display: inline-block;
            padding: 12px 30px;
            background-color: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            text-align: center;
            color: #6c757d;
            font-size: 14px;
        }
        .signature {
            margin-top: 30px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>–ì–ú–°–ö–¶ - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä</h1>
            <p>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ì–ú–°–°–ë</p>
        </div>

        <p>–£–≤–∞–∂–∞–µ–º—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü —Å—É–¥–Ω–∞ <strong>${vessel.name}</strong>,</p>
        
        <p>–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ì–ú–°–°–ë 
        –±—ã–ª–∞ <strong style="color: #28a745;">–û–î–û–ë–†–ï–ù–ê</strong>.</p>

        <div class="section">
            <h2>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–¥–Ω–µ</h2>
            <div class="info-grid">
                <div class="info-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞:</div>
                <div class="info-value">${vessel.name}</div>
                
                <div class="info-label">IMO –Ω–æ–º–µ—Ä:</div>
                <div class="info-value">${vessel.imo_number}</div>
                
                <div class="info-label">–ü–æ–∑—ã–≤–Ω–æ–π:</div>
                <div class="info-value">${vessel.call_sign}</div>
                
                <div class="info-label">MMSI:</div>
                <div class="info-value">${vessel.mmsi}</div>
                
                <div class="info-label">–¢–∏–ø —Å—É–¥–Ω–∞:</div>
                <div class="info-value">${vessel.vessel_type}</div>
                
                <div class="info-label">–§–ª–∞–≥:</div>
                <div class="info-value">${vessel.flag}</div>
                
                <div class="info-label">–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</div>
                <div class="info-value">${coordinates}</div>
            </div>
        </div>

        <div class="section">
            <h2>üìÖ –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞</h2>
            <div class="info-grid">
                <div class="info-label">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:</div>
                <div class="info-value"><strong>${testDateTime} (–ú–°–ö)</strong></div>
                
                <div class="info-label">–¢–∏–ø —Ç–µ—Å—Ç–∞:</div>
                <div class="info-value">${request.test_type}</div>
                
                <div class="info-label">–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</div>
                <div class="info-value">#${request.id}</div>
            </div>
        </div>

        <div class="important">
            <h3>‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <ul>
                <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ì–ú–°–°–ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏</li>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–¥–∏–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é</li>
                <li>–≠–∫–∏–ø–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</li>
                <li>–¢–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ —á–∞—Å—Ç–æ—Ç–∞—Ö: 2182 –∫–ì—Ü, 156.8 –ú–ì—Ü (16 –∫–∞–Ω–∞–ª –£–ö–í)</li>
            </ul>
        </div>

        <div class="section">
            <h2>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:</p>
            <div class="info-grid">
                <div class="info-label">–¢–µ–ª–µ—Ñ–æ–Ω:</div>
                <div class="info-value">+7 (495) 626-10-00</div>
                
                <div class="info-label">Email:</div>
                <div class="info-value">gmskc@morflot.ru</div>
                
                <div class="info-label">–î–µ–∂—É—Ä–Ω–∞—è —Å–ª—É–∂–±–∞:</div>
                <div class="info-value">–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ</div>
            </div>
        </div>

        <div class="signature">
            <p><strong>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</strong></p>
            <p>
                <strong>–ì–ú–°–ö–¶ –†–æ—Å—Å–∏–∏</strong><br>
                –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä<br>
                –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –º–æ—Ä—Å–∫–æ–≥–æ –∏ —Ä–µ—á–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            </p>
        </div>

        <div class="footer">
            <p>–≠—Ç–æ –ø–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –ì–ú–°–ö–¶.</p>
            <p>¬© ${new Date().getFullYear()} –ì–ú–°–ö–¶ –†–æ—Å—Å–∏–∏. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
    </div>
</body>
</html>
    `;
  }

  private generatePlainTextEmail(
    request: TestRequest,
    testDateTime: string,
    coordinates: string
  ): string {
    const vessel = request.vessel;
    
    return `
–ì–ú–°–ö–¶ - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ì–ú–°–°–ë

–£–≤–∞–∂–∞–µ–º—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü —Å—É–¥–Ω–∞ ${vessel.name},

–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ì–ú–°–°–ë –±—ã–ª–∞ –û–î–û–ë–†–ï–ù–ê.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–£–î–ù–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞: ${vessel.name}
- IMO –Ω–æ–º–µ—Ä: ${vessel.imo_number}
- –ü–æ–∑—ã–≤–Ω–æ–π: ${vessel.call_sign}
- MMSI: ${vessel.mmsi}
- –¢–∏–ø —Å—É–¥–Ω–∞: ${vessel.vessel_type}
- –§–ª–∞–≥: ${vessel.flag}
- –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${coordinates}

–î–ï–¢–ê–õ–ò –¢–ï–°–¢–ê:
- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${testDateTime} (–ú–°–ö)
- –¢–∏–ø —Ç–µ—Å—Ç–∞: ${request.test_type}
- –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${request.id}

–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ì–ú–°–°–ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–¥–∏–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
- –≠–∫–∏–ø–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
- –¢–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ —á–∞—Å—Ç–æ—Ç–∞—Ö: 2182 –∫–ì—Ü, 156.8 –ú–ì—Ü (16 –∫–∞–Ω–∞–ª –£–ö–í)

–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 626-10-00
- Email: gmskc@morflot.ru
- –î–µ–∂—É—Ä–Ω–∞—è —Å–ª—É–∂–±–∞: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ì–ú–°–ö–¶ –†–æ—Å—Å–∏–∏
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä
–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –º–æ—Ä—Å–∫–æ–≥–æ –∏ —Ä–µ—á–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞

¬© ${new Date().getFullYear()} –ì–ú–°–ö–¶ –†–æ—Å—Å–∏–∏. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
    `;
  }
}